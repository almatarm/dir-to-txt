***$$$@@@ /wimm2-backup/target/classes/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:wimm.db
*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/META-INF/persistence.xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="com.almatarm_p-budget_jar_1.0-SNAPSHOTPU" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <properties>
      <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sample"/>
      <property name="javax.persistence.jdbc.user" value="app"/>
      <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
      <property name="javax.persistence.jdbc.password" value="app"/>
      <property name="hibernate.cache.provider_class" value="org.hibernate.cache.NoCacheProvider"/>
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
    </properties>
  </persistence-unit>
</persistence>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/Mapping.hbm.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.almatarm.p.budget.model">
  <!-- Payee Class -->
  <class name="com.almatarm.wimm.domain3.Payee" table="payees">
    <id column="payee_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name" not-null="true"/>
    <property length="128" name="address"/>
  </class>
  <!-- Category Class -->
  <class name="Category" table="categories">
    <id column="cat_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="master" not-null="true"/>
    <property length="48" name="category" not-null="true"/>
  </class>
  <!-- Account
  <class name="Account" table="accounts">
    <id column="account_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name"        not-null="true"/>
    <property length="128" name="description" column="desc"/>
    <property length="128" name="note"/>
    <property name="limit"/>
    <property name="balance"/>
    
  </class>
    
    /**
     * Type of account
     */
    Type type;
     -->
  <!--  
    Book Class  
  <class name="Book" table="books">
    <id column="book_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="64" name="author"/>
  
     constraints 
    <bag name="recipes" lazy="false">
      <key column="book_id"/>
      <one-to-many class="Recipe"/>
    </bag>
    
  </class>
  
    Recipe Class 
  <class name="Recipe" table="recipes">
    <id column="recipe_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="32" name="chapter"/>
    <property column="prep_time" name="preperationTime"/>
    <property column="cooking_time" name="cookingTime"/>
    <property column="ready_in" name="readyIn"/>
    <property name="servings"/>
    <property length="96" name="source"/>
    <property length="32" name="yield"/>
    <property name="rating"/>
    <property name="description"/>
    <property length="1024" name="directions"/>
    <property name="note"/>
    <property name="tags"/>
    
     constraints 
    <many-to-one cascade="save-update" class="Book" column="book_id" name="book" not-null="true" lazy="false"/>
    
    <many-to-one class="Recipe" column="master_recipe_id" name="master"/>
    
    <bag name="recipeIngredients" table="recipe_ingds"  lazy="false">
      <key column="recipe_id"/>
      <composite-element class="RecipeIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredient"  lazy="false"/>
        <property name="quantity" not-null="true"/>
        <many-to-one class="Unit" column="unit" name="unit" not-null="true"  lazy="false"/>
      </composite-element>
    </bag>
    
  </class>
  
    Ingredient Class 
  <class name="Ingredient" table="ingredients">
    <id column="ingredient_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="32" name="name" not-null="true"/>
    <property column="name_ext" length="32" name="nameExt"/>
    <property column="brand" length="32" name="brand"/>
    <property column="short_name" length="32" name="shortName" />
    <property name="type"/>
    <property column="cost" name="cost"/>
    <property name="grade"/>
    <property column="cal_from_fat" name="caloriesFromFat"/>
    <property column="total_fat" name="totalFat"/>
    <property column="sat_fat" name="saturatedFat"/>
    <property column="poly_fat" name="polyFat"/>
    <property column="mono_fat" name="monoFlat"/>
    <property name="cholesterol"/>
    <property name="sodium"/>
    <property name="carbohydrates"/>
    <property name="fiber"/>
    <property name="sugars"/>
    <property name="protein"/>
  
    constraints
    <many-to-one class="Unit" column="default_unit" name="defaultUnit" not-null="true"/>

    <set name="units" table="ingd_units" lazy="false">
      <key column="ingd_id"/>
      <composite-element class="IngredientUnits">
        <many-to-one class="Unit" column="unit_id" name="unit" lazy="false"/>
        <property column="gram_per_unit" name="gramPerUnit"/>
        <property column="main_unit" name="mainUnit"/>
      </composite-element>
    </set>

    <set name="substitutions">
      <key column="ingd_id"/>
      <one-to-many class="Substitution"/>
    </set>

  </class>
  
   Substitution Class 
  <class name="Substitution" table="substitution">
    <id column="subst_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <many-to-one class="Ingredient" column="ingd_id" name="ingredient"/>
    <property name="quantity"/>
    <many-to-one class="Unit" column="unit" name="unit"/>
    <set name="substitutions" table="subst_ingd">
      <key column="subst_id"/>
      <composite-element class="SubstitutionIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredientId"/>
        <many-to-one class="Unit" column="unit" name="unit"/>
        <property name="quantity"/>
      </composite-element>
    </set>
  </class>-->
</hibernate-mapping>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <!-- H2 -->
    <!--        
    <property name="connection.driver_class">org.h2.Driver</property>
    <property name="connection.url">jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE</property>
    <property name="connection.username">sa</property>
    <property name="connection.password"/>
    <property name="dialect">org.hibernate.dialect.H2Dialect</property>
-->
    <!-- SQLite -->
    <property name="connection.driver_class">org.sqlite.JDBC</property>
    <property name="connection.url">jdbc:sqlite:D:/Dropbox/utopia/p-budget/budget.db</property>
    <!--<property name="connection.url">jdbc:sqlite:/Users/almatarm/Dropbox/workarea/MasterRecipe.db</property>-->
    <property name="dialect">com.almatarm.p.budget.hibernate.SQLiteDialect</property>
    <!-- MySQl -->
    <!--
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="connection.url">jdbc:mysql://localhost:3306/mysql</property>
    <property name="connection.username">root</property>
    <property name="connection.password"></property>
    <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
 -->
    <!-- JDBC connection pool (use the built-in) -->
    <property name="connection.pool_size">1</property>
    <!-- SQL dialect -->
    <!-- Disable the second-level cache  -->
    <!--<property name="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</property>-->
    <!--<property name="dialect">com.applerao.hibernatesqlite.dialect.SQLiteDialect</property>-->
    <!-- Echo all executed SQL to stdout -->
    <property name="show_sql">true</property>
    <!--Drop and re-create the database schema on startup -->
    <property name="hbm2ddl.auto">create</property>
    <property name="format_sql">true</property>
    <property name="hibernate.use_sql_comments">true</property>
    <mapping resource="Mapping.hbm.xml"/>
    <mapping class="com.almatarm.p.budget.model.Account"/>
  </session-factory>
</hibernate-configuration>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/app-context2.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/persistence/PayeeMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.PayeeMapper">

    <resultMap  id="payeeResultMap"   type="Payee">
        <id     property="id"         column="ID" />
        <result property="name"       column="Name" />
        <result property="address"    column="Address" />
        <!-- 
            Table: Payee
            Mapper: PayeeMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name, Address
            Select Alone: Name
            Type: Long id; String name, address; 
        -->
    </resultMap>

</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/persistence/TagMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TagMapper">

    <resultMap  id="tagGroupResultMap"   type="TagGroup">
        <id         property="id"       column="ID" />
        <result     property="name"     column="Name" />       
        <collection property="tags"     ofType="Tag" > 
            <id     property="id"       column="Tag_ID" />      
            <result property="name"     column="Tag_Name" />   
        </collection>
        <!-- 
            Table: TagGroup
            Mapper: TagMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name
            Select Alone: Name
            FK: tags, TagGroup_ID
            Type: Long id; String name; Tag tags; 
        -->
    </resultMap>
    
    <resultMap  id="tagResultMap"   type="Tag">
        <id     property="id"       column="ID" />
        <result property="name"     column="Name" />           
        <!-- 
            Table: Tag 
            Unique: ID
            Find By: ID, Name
            Searchable: Name
            Type: Long ID; String Name; 
        -->   
    </resultMap>

<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/persistence/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.AccountMapper">

    <resultMap  id="accountResultMap"    type="Account">
        <id     property="id"            column="ID" />
        <result property="name"          column="Name" />
        <result property="description"   column="Descr" />
        <result property="notes"         column="Notes" />
        <result property="type"          column="Type" />
        <!--<result property="parentID"      column="Parent_ID" />-->
        <result property="hidden"        column="Hidden" />
        <result property="qualifiedName" column="QName" />
        <association property="parent"      column="Parent_ID"   select="findAccountByID" fetchType="lazy"/>        
        <association property="currency"     column="Currency_ID" javaType="CurrencyUnitDO">
            <id     property="id"             column="CU_ID" />
            <result property="code"           column="CU_Code" />
            <result property="description"    column="CU_Descr" />
            <result property="symbol"         column="CU_Symbol" />
            <result property="provider"       column="CU_Provider" />
            <result property="fractionDigits" column="CU_FractDigt" />
        </association>
        <discriminator column="Type" javaType="AccountType">
            <case value="CREDIT" resultMap="creditResultMap" />
            <case value="LOAN"   resultMap="loanResultMap" />            
        </discriminator>
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID, QName
            Find By: ID, QName, Name, Parent_ID
            Searchable: Name, Descr, Notes, Type, QName
            !Select Alone: 
            !FK: currency, TagGroup_ID
            Type: Long id, parentID; String name, qualifiedName, description, notes;
            Type: String name, qualifiedName, description, notes;
            Type: boolean hidden;
        -->
    </resultMap>

    <resultMap  id="creditResultMap" type="CreditAccount" extends="accountResultMap">
        <result property="limit"            column="CreditLimit" />
        <result property="statementDay"     column="StatDay" />
        <!-- 
            Type: BigDecimal limit; int statementDay;
            Class: com.almatarm.money.domain.CreditAccount
        -->
    </resultMap>
    
    <resultMap  id="loanResultMap" type="Loan" extends="accountResultMap">
        <result property="presentValue"     column="PresentValue" />
        <result property="interestRate"     column="InterestRate" />
        <!-- 
            Type: BigDecimal presentValue, interestRate;
            Class: com.almatarm.money.domain.Loan
        -->
    </resultMap>
    
    <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM 
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID;
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
            <if test="type != null">
                Account.Type = #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName = #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
            <if test="type != null">
                Account.Type LIKE #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName LIKE #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            Account.ID = #{id}
    </select>

    <select id="findAccountByQualifiedName" parameterType="String" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            QName = #{qualifiedName}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID, Hidden, QName, Currency_ID
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, CreditLimit, StatDay</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, PresentValue, InterestRate</if>) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID}, #{hidden}, #{qualifiedName}, #{currency.id}
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, #{limit}, #{statementDay}</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, #{presentValue}, #{interestRate}</if>)    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name           = #{name},
            Descr          = #{description},
            Notes          = #{notes},
            Type           = #{type},
            Parent_ID      = #{parentID},
            Hidden         = #{hidden},
            QName          = #{qualifiedName},
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">
            CreditLimit    = #{limit},
            StatDay        = #{statementDay}
            </if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">
            PresentValue   = #{presentValue},
            InterestRate   = #{interestRate}
            </if>
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
       
</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/persistence/TransactionMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TransactionMapper">

    <resultMap  id="transactionResultMap"   type="Transaction">
        <id         property="id"               column="ID" />
        <result     property="date"             column="Date" />       
        <result     property="effectiveDate"    column="EffectiveDate" />       
        <result     property="number"           column="Number" />       
        <result     property="Memo"             column="Memo" />       
        <result     property="status"           column="Status" /> 
        <result     property="type"             column="Type" /> 
        
        <!-- 
            Table: Transactions
            Mapper: TransactionMapper
            Unique: ID
            Find By: ID, Date
            Searchable: Name, Data, EffectiveDate, Number, Memo, Status
            !Select Alone: 
            !FK: tags, TagGroup_ID
            Type: Long id; Status status;
            Type: Calendar date, effectiveDate;
            Type: TransactionType type;
            Type: String number, memo;
        -->
        
    
    BigDecimal amount;
    Payee payee;
    Account account;
    Tag tag;
    MonetaryAmount foreignAmount;
    TransactionGroup transactionGroup;

    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
    
    
    </resultMap>
    
<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/persistence/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
   
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>

</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/App.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Menu class="javax.swing.JMenuBar" name="menuBar">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="fileMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="102"/>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="openMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="111"/>
                <Property name="text" type="java.lang.String" value="Open"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="115"/>
                <Property name="text" type="java.lang.String" value="Save"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveAsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="Save As ..."/>
                <Property name="displayedMnemonicIndex" type="int" value="5"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="exitMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="120"/>
                <Property name="text" type="java.lang.String" value="Exit"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="exitMenuItemActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="editMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="101"/>
            <Property name="text" type="java.lang.String" value="Edit"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="cutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="116"/>
                <Property name="text" type="java.lang.String" value="Cut"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="copyMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="121"/>
                <Property name="text" type="java.lang.String" value="Copy"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="pasteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="112"/>
                <Property name="text" type="java.lang.String" value="Paste"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="deleteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="100"/>
                <Property name="text" type="java.lang.String" value="Delete"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="helpMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="104"/>
            <Property name="text" type="java.lang.String" value="Help"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="contentsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="99"/>
                <Property name="text" type="java.lang.String" value="Contents"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="aboutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="About"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="menuBar"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-56,0,0,3,-127"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Container class="javax.swing.JSplitPane" name="jSplitPane1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
      <SubComponents>
        <Container class="javax.swing.JSplitPane" name="jSplitPane2">
          <Properties>
            <Property name="orientation" type="int" value="0"/>
          </Properties>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
              <JSplitPaneConstraints position="left"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
          <SubComponents>
            <Container class="javax.swing.JScrollPane" name="jScrollPane1">
              <AuxValues>
                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
              </AuxValues>
              <Constraints>
                <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
                  <JSplitPaneConstraints position="top"/>
                </Constraint>
              </Constraints>

              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
              <SubComponents>
                <Component class="javax.swing.JList" name="jList1">
                  <Properties>
                    <Property name="model" type="javax.swing.ListModel" editor="org.netbeans.modules.form.editors2.ListModelEditor">
                      <StringArray count="5">
                        <StringItem index="0" value="Item 1"/>
                        <StringItem index="1" value="Item 2"/>
                        <StringItem index="2" value="Item 3"/>
                        <StringItem index="3" value="Item 4"/>
                        <StringItem index="4" value="Item 5"/>
                      </StringArray>
                    </Property>
                  </Properties>
                  <AuxValues>
                    <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
                  </AuxValues>
                </Component>
              </SubComponents>
            </Container>
          </SubComponents>
        </Container>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/com/almatarm/wimm/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/log4j.properties
# Root logger option
log4j.rootLogger=Debug, stdout

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %40.40C:%4L - %m%n
*** end *** end ***
***$$$@@@ /wimm2-backup/target/classes/javamoney.properties
#Currency Conversion
conversion.default-chain=Static,xChange
*** end *** end ***
***$$$@@@ /wimm2-backup/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>wimm</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    
    <repositories>
        <!--
        Repository hosting NetBeans modules, especially APIs.
        Versions are based on IDE releases, e.g.: RELEASE691
        To create your own repository, use: nbm:populate-repository
        -->
        <repository>
            <id>netbeans</id>
            <name>NetBeans</name>
            <url>http://bits.netbeans.org/nexus/content/groups/netbeans/</url>
        </repository>
    </repositories>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>net.sf</groupId>
                    <artifactId>stat-scm</artifactId>
                    <version>1.2.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
       
        <plugins>
            <plugin>
                <groupId>net.sf</groupId>
                <artifactId>stat-scm</artifactId>
            </plugin>
        </plugins>
    </build>
    
    <reporting>
        <plugins>
            <plugin>
                <groupId>net.sf</groupId>
                <artifactId>stat-scm</artifactId>
                <version>1.2.0</version>
            </plugin>
        </plugins>
    </reporting>
    
    <dependencies>
<!--        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>HibernateHelper</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>4.2.3.Final</version>
            <type>jar</type>
        </dependency>
                <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>4.3.1.Final</version>
        </dependency>
        
-->
        
        <!-- SQLite JDBC library -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.8.11.2</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>  
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>            
        
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.14</version>
        </dependency>
        
<!--         H2 
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.190</version>
        </dependency>        -->
        
        <!-- MyBatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.3</version>
        </dependency>         
        
        <dependency> 
            <groupId>com.tunyk.currencyconverter</groupId> 
            <artifactId>currency-converter-api</artifactId> 
            <version>1.0</version> 
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>money-domain</artifactId>
            <version>1.0</version>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <spring.framework.version>4.2.4.RELEASE</spring.framework.version>
    </properties>
</project>
*** end *** end ***
***$$$@@@ /wimm2-backup/nbactions.xml
<?xml version="1.0" encoding="UTF-8"?>
<actions>
        <action>
            <actionName>CUSTOM-stat-scm:stats</actionName>
            <displayName>stat-scm:stats</displayName>
            <goals>
                <goal>stat-scm:stats</goal>
            </goals>
        </action>
    </actions>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/data.sql
INSERT INTO TagGroup (ID, Name) VALUES (1, 'Default');

INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (1, 'Orange', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (2, 'Yellow', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (3, 'Green', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (4, 'Blue', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (5, 'Red', 1);

INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (1, 'Shukran', 'Shukran', 'Reward Points', 'Shukran', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (2, 'Qitaf', 'STC Reward Points', 'Reward Points', 'Qitaf', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (3, 'ICSAB', 'SABB ICSAB', 'Reward Points', 'ICSAB', 0);

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:wimm.db
*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/schema.sql
CREATE TABLE Account (
    ID                INTEGER       NOT NULL
                                    CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    NAME              VARCHAR (32)  NOT NULL,
    DESCR             VARCHAR (128),
    TYPE              VARCHAR (4)   NOT NULL,
    NOTES             TEXT,
    CURRENCY          VARCHAR (12)  NOT NULL,
    CURRENCY_PROVIDER VARCHAR (32),
    BALANCE           REAL          DEFAULT 0,
    HIDDEN            BOOLEAN,
    CREDIT_LIMIT      REAL,
    STAT_DAY          INTEGER,
    PARENT_ID         INTEGER,
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        PARENT_ID
    )
    REFERENCES Account (ID) 
);


CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    NAME    VARCHAR (64)  UNIQUE
                          NOT NULL,
    ADDRESS VARCHAR (256) 
);

CREATE TABLE Transaction_Group (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);

CREATE TABLE Transactions (
    ID             INTEGER       NOT NULL
                                 CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE           DATE          NOT NULL,
    EFFECTIVE_DATE DATE,
    AMOUNT         REAL          DEFAULT (0),
    STATUS         CHAR (1)      NOT NULL
                                 DEFAULT N,
    NUMBER         VARCHAR (12),
    MEMO           VARCHAR (128),
    ACCOUNT_ID     INTEGER       CONSTRAINT FK_ACCOUNT_TRANSACTION REFERENCES Account (ID),
    PAYEE_ID       INTEGER       CONSTRAINT FK_PAYEE_TRANSACTION REFERENCES Payee (ID) 
);

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/META-INF/persistence.xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="com.almatarm_p-budget_jar_1.0-SNAPSHOTPU" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <properties>
      <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sample"/>
      <property name="javax.persistence.jdbc.user" value="app"/>
      <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
      <property name="javax.persistence.jdbc.password" value="app"/>
      <property name="hibernate.cache.provider_class" value="org.hibernate.cache.NoCacheProvider"/>
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
    </properties>
  </persistence-unit>
</persistence>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/wimm.db
SQLite format 3   @                                                                   -�	� �    �����                                                                  �]�tableTagGroupTagGroupCREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
)/C indexsqlite_autoindex_TagGroup_1TagGroup�|�WtablePayeePayeeCREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
))= indexsqlite_autoindex_Payee_1Payee   P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�0--�tableTransactionGroupTransactionGroupCREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMEN      
   	   
   	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 � ������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ;sqlitestudio_temp_table
Account%TransactionsTagCurrency �	TagGroup                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
 Default
   � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
	Default      �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #�c )ESPSpanish PesetaCurrencyESP�  � M��� ���                                                                  �]�tableTagGroupTagGroup                                                                    �]�tableTagGroupTagGroupCREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
)/C indexsqlite_autoindex_TagGroup_1TagGroup�|�WtablePayeePayeeCREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
))= indexsqlite_autoindex_Payee_1Payee   P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�0--�tableTransactionGroupTransactionGroupCREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
)6  : � : : G                                        �y--�%tableAccount_TagGroupAccount_TagGroupCREATE TABLE Account_TagGroup (
    ACCOUNT_ID   INTEGER REFERENCES Currency (ID) 
                         NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                         NOT NULL
)  X;;�Atablesqlitestudio_temp_tablesqlitestudio_temp_tableCREATE TABLE "sqlitestudio_temp_table" (
    ID           INTEGER      NOT NULL
                              CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name         VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAG_GROUP_TAG REFERENCES TagGroup (ID) 
)�o�1tableCurrencyCurrencyCREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL
)      �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              	Red   � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              	Red
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  �  �� !               �%%�tableTransactionsTransactionsCREATE TABLE Transactions (
    ID                  INTEGER         NOT NULL
              �Y	;;�Itablesqlitestudio_temp_tablesqlitestudio_temp_�!%%�tableTransactionsTransactionsCREATE TABLE Transactions (ID INTEGER NOT NULL CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT, Date DATE NOT NULL, Effective_Date DATE NOT NULL, Amount INTEGER (13, 0) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Status CHAR (1) NOT NULL DEFAULT N, Number VARCHAR (12), Memo VARCHAR (128), Account_ID INTEGER CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID), Payee_ID INTEGER CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID), TransGroup_ID INTEGER CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID), tag_ID INTEGER CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID), ForeignAmount INTEGER (13), ForeignScale INTEGER (2), ForeignCurrency_ID INTEGER CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE                DATE            NOT NULL,
    EFFECTIVE_DATE      DATE            NOT NULL,
    AMOUNT              INTEGER (13, 0) DEFAULT (0),
    SCALE               INTEGER (2)     DEFAULT (2),
    STATUS              CHAR (1)        NOT NULL
                                        DEFAULT N,
    NUMBER              VARCHAR (12),
    MEMO                VARCHAR (128),
    ACCOUNT_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    PAYEE_ID            INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TRANS_GROUP_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    TAG_ID              INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    FOREIGN_AMOUNT      INTEGER (13),
    FOREIGN_SCALE       INTEGER (2),
    FOREIGN_CURRENCY_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �B;;�tablesqlitestudio_temp_tablesqlitestudio_temp_tableCREATE TABLE "sqlitestudio_temp_table" (
    ID                  INTEGER         NOT NULL
                                        CONSTRAIN   �y--�%tableAccount_TagGroupAccount_TagGroupCREATE TABLE Account_TagGroup (
    ACCOUNT_ID   INTEGER REFERENCES Currency (ID) 
                         NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                         NOT NULL
)   �%%�tableTransactionsTransactionsCREATE TABLE Transactions (
    ID                  INTEGER         NOT NULL
                     M
a; indexsqlite_autoindex_sqlitestudio_temp_table_1sqlitestudio_temp_table
         NSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE                DATE            NOT NULL,
    EFFECTIVE_DATE      DATE            NOT NULL,
    AMOUNT              INTEGER (13, 0) DEFAULT (0),
    SCALE               INTEGER (2)     DEFAULT (2),
    STATUS              CHAR (1)        NOT NULL
                                        DEFAULT N,
    NUMBER              VARCHAR (12),
    MEMO                VARCHAR (128),
    ACCOUNT_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    PAYEE_ID            INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TRANS_GROUP_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    TAG_ID              INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    FOREIGN_AMOUNT      INTEGER (13),
    FOREIGN_SCALE       INTEGER (2),
    FOREIGN_CURRENCY_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
)    �  � � �                                                                                                                                                           -A indexsqlite_autoindex_Account_1Account   �!%%�tableTransactionsTransactionsCREATE TABLE Transactions (ID INTEGER NOT NULL CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT, Date DATE NOT NULL, Effective_Date DATE NOT NULL, Amount INTEGER (13, 0) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Status CHAR (1) NOT NULL DEFAULT N, Number VARCHAR (12), Memo VARCHAR (128), Account_ID INTEGER CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID), Payee_ID INTEGER CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID), TransGroup_ID INTEGER CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID), tag_ID INTEGER CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID), ForeignAmount INTEGER (13), ForeignScale INTEGER (2), ForeignCurrency_ID INTEGER CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID))    � �� �                                                                                                                                                                                   �M�tableTagTagCREATE TABLE Tag (ID INTEGER NOT NULL CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT, Name VARCHAR (32) NOT NULL, TagGroup_ID INTEGER CONSTRAINT FK_TAGGROUP_TAG REFERENCES TagGroup (ID))-A indexsqlite_autoindex_Account_1Account�=�QtableAccountAccountCREATE TABLE Account (ID INTEGER NOT NULL CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT, Name VARCHAR (32) NOT NULL, Descr VARCHAR (128), Type VARCHAR (4) NOT NULL, Notes VARCHAR (128), CreditLimit INTEGER, StatDay INTEGER, Hidden BOOLEAN DEFAULT (0), Balance INTEGER (13) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Currency_ID INTEGER CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID), Parent_ID INTEGER REFERENCES Account (ID), CONSTRAINT ID UNIQUE (ID), CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (Parent_ID) REFERENCES Account (ID))
*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/schema-export2.sql
--
-- File generated with SQLiteStudio v3.0.7 on Fri Feb 5 20:48:14 2016
--
-- Text encoding used: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Account
DROP TABLE IF EXISTS Account;

CREATE TABLE Account (
    ID          INTEGER       NOT NULL
                              CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    Name   Fic     VARCHAR (32)  NOT NULL,
    Descr       VARCHAR (128),
    Type        VARCHAR (4)   NOT NULL,
    Notes       VARCHAR (128),
    CreditLimit INTEGER,
    StatDay     INTEGER,
    Hidden      BOOLEAN       DEFAULT (0),
    Balance     INTEGER (13)  DEFAULT (0),
    Scale       INTEGER (2)   DEFAULT (2),
    Currency_ID INTEGER       CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID),
    Parent_ID   INTEGER       REFERENCES Account (ID),
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        Parent_ID
    )
    REFERENCES Account (ID) 
);


-- Table: Currency
DROP TABLE IF EXISTS Currency;

CREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL
);

INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (228, 'ZMK', 'Zambian Kwacha', 'Currency', 'ZMK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (229, 'KRW', 'South Korean Won', 'Currency', 'KRW', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (230, 'BDT', 'Bangladeshi Taka', 'Currency', 'BDT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (231, 'UZS', 'Uzbekistan Som', 'Currency', 'UZS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (232, 'UYU', 'Uruguayan Peso', 'Currency', 'UYU', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (233, 'GNF', 'Guinean Franc', 'Currency', 'GNF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (234, 'AZM', 'Azerbaijani Manat (1993-2006)', 'Currency', 'AZM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (235, 'XUA', 'ADB Unit of Account', 'Currency', 'XUA', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (236, 'TND', 'Tunisian Dinar', 'Currency', 'TND', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (237, 'CLF', 'Chilean Unit of Account (UF)', 'Currency', 'CLF', 4);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (239, 'VEB', 'Venezuelan Bolívar (1871-2008)', 'Currency', 'VEB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (240, 'XSU', 'Sucre', 'Currency', 'XSU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (241, 'BRL', 'Brazilian Real', 'Currency', 'BRL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (242, 'XOF', 'CFA Franc BCEAO', 'Currency', 'XOF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (243, 'YUM', 'Yugoslavian New Dinar (1994-2002)', 'Currency', 'YUM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (244, 'PEN', 'Peruvian Nuevo Sol', 'Currency', 'PEN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (245, 'VUV', 'Vanuatu Vatu', 'Currency', 'VUV', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (246, 'GIP', 'Gibraltar Pound', 'Currency', 'GIP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (247, 'AFA', 'Afghan Afghani (1927-2002)', 'Currency', 'AFA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (248, 'INR', 'Indian Rupee', 'Currency', 'INR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (249, 'SYP', 'Syrian Pound', 'Currency', 'SYP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (250, 'CHW', 'CHW', 'Currency', 'CHW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (251, 'MRO', 'Mauritanian Ouguiya', 'Currency', 'MRO', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (252, 'FKP', 'Falkland Islands Pound', 'Currency', 'FKP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (253, 'TZS', 'Tanzanian Shilling', 'Currency', 'TZS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (254, 'LYD', 'Libyan Dinar', 'Currency', 'LYD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (255, 'TPE', 'Timorese Escudo', 'Currency', 'TPE', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (256, 'HUF', 'Hungarian Forint', 'Currency', 'HUF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (257, 'BGL', 'Bulgarian Hard Lev', 'Currency', 'BGL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (258, 'FIM', 'Finnish Markka', 'Currency', 'FIM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (259, 'FRF', 'French Franc', 'Currency', 'FRF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (260, 'CDF', 'Congolese Franc', 'Currency', 'CDF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (262, 'PGK', 'Papua New Guinean Kina', 'Currency', 'PGK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (263, 'PHP', 'Philippine Peso', 'Currency', 'PHP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (264, 'SSP', 'South Sudanese Pound', 'Currency', 'SSP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (265, 'IRR', 'Iranian Rial', 'Currency', 'IRR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (266, 'ZWN', 'ZWN', 'Currency', 'ZWN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (267, 'CUC', 'Cuban Convertible Peso', 'Currency', 'CUC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (268, 'SZL', 'Swazi Lilangeni', 'Currency', 'SZL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (269, 'NAD', 'Namibian Dollar', 'Currency', 'NAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (270, 'ATS', 'Austrian Schilling', 'Currency', 'ATS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (271, 'LUF', 'Luxembourgian Franc', 'Currency', 'LUF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (272, 'DKK', 'Danish Krone', 'Currency', 'DKK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (273, 'MNT', 'Mongolian Tugrik', 'Currency', 'MNT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (274, 'THB', 'Thai Baht', 'Currency', 'THB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (275, 'MMK', 'Myanma Kyat', 'Currency', 'MMK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (276, 'CYP', 'Cypriot Pound', 'Currency', 'CYP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (277, 'UGX', 'Ugandan Shilling', 'Currency', 'UGX', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (278, 'XBB', 'European Monetary Unit', 'Currency', 'XBB', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (279, 'IEP', 'Irish Pound', 'Currency', 'IEP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (280, 'JOD', 'Jordanian Dinar', 'Currency', 'JOD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (281, 'XBA', 'European Composite Unit', 'Currency', 'XBA', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (282, 'BHD', 'Bahraini Dinar', 'Currency', 'BHD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (283, 'SVC', 'Salvadoran Colón', 'Currency', 'SVC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (284, 'AYM', 'AYM', 'Currency', 'AYM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (285, 'XPD', 'Palladium', 'Currency', 'XPD', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (286, 'MAD', 'Moroccan Dirham', 'Currency', 'MAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (287, 'ARS', 'Argentine Peso', 'Currency', 'ARS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (288, 'MXN', 'Mexican Peso', 'Currency', 'MXN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (289, 'RON', 'Romanian Leu', 'Currency', 'RON', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (290, 'VEF', 'Venezuelan Bolívar', 'Currency', 'VEF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (291, 'RUR', 'Russian Ruble (1991-1998)', 'Currency', 'RUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (292, 'HNL', 'Honduran Lempira', 'Currency', 'HNL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (293, 'AZN', 'Azerbaijani Manat', 'Currency', 'AZN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (294, 'LRD', 'Liberian Dollar', 'Currency', 'LRD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (295, 'SKK', 'Slovak Koruna', 'Currency', 'SKK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (296, 'XDR', 'Special Drawing Rights', 'Currency', 'XDR', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (297, 'GMD', 'Gambian Dalasi', 'Currency', 'GMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (298, 'ISK', 'Icelandic Króna', 'Currency', 'ISK', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (300, 'ZAR', 'South African Rand', 'Currency', 'ZAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (301, 'KHR', 'Cambodian Riel', 'Currency', 'KHR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (302, 'CLP', 'Chilean Peso', 'Currency', 'CLP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (303, 'STD', 'São Tomé and Príncipe Dobra', 'Currency', 'STD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (304, 'BZD', 'Belize Dollar', 'Currency', 'BZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (305, 'YER', 'Yemeni Rial', 'Currency', 'YER', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (306, 'GHC', 'Ghanaian Cedi (1979-2007)', 'Currency', 'GHC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (307, 'TMT', 'Turkmenistani Manat', 'Currency', 'TMT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (308, 'BOB', 'Bolivian Boliviano', 'Currency', 'BOB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (309, 'HTG', 'Haitian Gourde', 'Currency', 'HTG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (310, 'BWP', 'Botswanan Pula', 'Currency', 'BWP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (311, 'SLL', 'Sierra Leonean Leone', 'Currency', 'SLL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (312, 'MVR', 'Maldivian Rufiyaa', 'Currency', 'MVR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (313, 'NLG', 'Dutch Guilder', 'Currency', 'NLG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (314, 'USS', 'US Dollar (Same day)', 'Currency', 'USS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (315, 'BYR', 'Belarusian Ruble', 'Currency', 'BYR', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (316, 'ADP', 'Andorran Peseta', 'Currency', 'ADP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (317, 'ANG', 'Netherlands Antillean Guilder', 'Currency', 'ANG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (318, 'BTN', 'Bhutanese Ngultrum', 'Currency', 'BTN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (319, 'TJS', 'Tajikistani Somoni', 'Currency', 'TJS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (320, 'DJF', 'Djiboutian Franc', 'Currency', 'DJF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (321, 'KGS', 'Kyrgystani Som', 'Currency', 'KGS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (322, 'ETB', 'Ethiopian Birr', 'Currency', 'ETB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (323, 'OMR', 'Omani Rial', 'Currency', 'OMR', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (324, 'NGN', 'Nigerian Naira', 'Currency', 'NGN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (325, 'BOV', 'Bolivian Mvdol', 'Currency', 'BOV', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (326, 'SCR', 'Seychellois Rupee', 'Currency', 'SCR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (327, 'LBP', 'Lebanese Pound', 'Currency', 'LBP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (328, 'MXV', 'Mexican Investment Unit', 'Currency', 'MXV', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (329, 'UYI', 'UYI', 'Currency', 'UYI', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (330, 'PLN', 'Polish Zloty', 'Currency', 'PLN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (331, 'ZWD', 'Zimbabwean Dollar (1980-2008)', 'Currency', 'ZWD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (332, 'ERN', 'Eritrean Nakfa', 'Currency', 'ERN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (333, 'MGF', 'Malagasy Franc', 'Currency', 'MGF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (334, 'XPF', 'CFP Franc', 'Currency', 'XPF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (335, 'BND', 'Brunei Dollar', 'Currency', 'BND', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (336, 'IDR', 'Indonesian Rupiah', 'Currency', 'IDR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (337, 'ROL', 'Romanian Leu (1952-2006)', 'Currency', 'ROL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (338, 'XCD', 'East Caribbean Dollar', 'Currency', 'XCD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (339, 'TOP', 'Tongan Paʻanga', 'Currency', 'TOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (340, 'NOK', 'Norwegian Krone', 'Currency', 'NOK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (341, 'SDG', 'Sudanese Pound', 'Currency', 'SDG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (342, 'COU', 'COU', 'Currency', 'COU', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (343, 'EUR', 'Euro', 'Currency', 'EUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (344, 'SAR', 'Saudi Riyal', 'Currency', 'SAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (345, 'MGA', 'Malagasy Ariary', 'Currency', 'MGA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (346, 'SOS', 'Somali Shilling', 'Currency', 'SOS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (347, 'ITL', 'Italian Lira', 'Currency', 'ITL', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (348, 'KMF', 'Comorian Franc', 'Currency', 'KMF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (349, 'TRL', 'Turkish Lira (1922-2005)', 'Currency', 'TRL', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (350, 'PAB', 'Panamanian Balboa', 'Currency', 'PAB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (351, 'XBC', 'European Unit of Account (XBC)', 'Currency', 'XBC', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (352, 'HRK', 'Croatian Kuna', 'Currency', 'HRK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (353, 'KES', 'Kenyan Shilling', 'Currency', 'KES', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (354, 'BYB', 'Belarusian New Ruble (1994-1999)', 'Currency', 'BYB', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (355, 'MTL', 'Maltese Lira', 'Currency', 'MTL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (356, 'KYD', 'Cayman Islands Dollar', 'Currency', 'KYD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (357, 'BIF', 'Burundian Franc', 'Currency', 'BIF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (358, 'MYR', 'Malaysian Ringgit', 'Currency', 'MYR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (359, 'USD', 'US Dollar', 'Currency', '$', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (360, 'BMD', 'Bermudan Dollar', 'Currency', 'BMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (361, 'BBD', 'Barbadian Dollar', 'Currency', 'BBD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (362, 'LAK', 'Laotian Kip', 'Currency', 'LAK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (363, 'GYD', 'Guyanaese Dollar', 'Currency', 'GYD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (364, 'MZM', 'Mozambican Metical (1980-2006)', 'Currency', 'MZM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (365, 'WST', 'Samoan Tala', 'Currency', 'WST', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (366, 'XBD', 'European Unit of Account (XBD)', 'Currency', 'XBD', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (367, 'GWP', 'Guinea-Bissau Peso', 'Currency', 'GWP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (368, 'USN', 'US Dollar (Next day)', 'Currency', 'USN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (369, 'AMD', 'Armenian Dram', 'Currency', 'AMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (370, 'VND', 'Vietnamese Dong', 'Currency', 'VND', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (371, 'FJD', 'Fijian Dollar', 'Currency', 'FJD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (372, 'TRY', 'Turkish Lira', 'Currency', 'TRY', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (373, 'KZT', 'Kazakhstani Tenge', 'Currency', 'KZT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (374, 'SIT', 'Slovenian Tolar', 'Currency', 'SIT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (375, 'MDL', 'Moldovan Leu', 'Currency', 'MDL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (376, 'JMD', 'Jamaican Dollar', 'Currency', 'JMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (377, 'RUB', 'Russian Ruble', 'Currency', 'RUB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (378, 'MOP', 'Macanese Pataca', 'Currency', 'MOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (379, 'CRC', 'Costa Rican Colón', 'Currency', 'CRC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (380, 'MWK', 'Malawian Kwacha', 'Currency', 'MWK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (381, 'CHF', 'Swiss Franc', 'Currency', 'CHF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (382, 'GBP', 'British Pound Sterling', 'Currency', 'GBP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (383, 'TMM', 'Turkmenistani Manat (1993-2009)', 'Currency', 'TMM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (384, 'PTE', 'Portuguese Escudo', 'Currency', 'PTE', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (385, 'JPY', 'Japanese Yen', 'Currency', 'JPY', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (386, 'TWD', 'New Taiwan Dollar', 'Currency', 'TWD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (387, 'COP', 'Colombian Peso', 'Currency', 'COP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (388, 'UAH', 'Ukrainian Hryvnia', 'Currency', 'UAH', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (389, 'XFO', 'French Gold Franc', 'Currency', 'XFO', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (390, 'CVE', 'Cape Verdean Escudo', 'Currency', 'CVE', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (391, 'EGP', 'Egyptian Pound', 'Currency', 'EGP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (392, 'PKR', 'Pakistani Rupee', 'Currency', 'PKR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (393, 'PYG', 'Paraguayan Guarani', 'Currency', 'PYG', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (394, 'CHE', 'CHE', 'Currency', 'CHE', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (395, 'XAU', 'Gold', 'Currency', 'XAU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (396, 'AOA', 'Angolan Kwanza', 'Currency', 'AOA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (397, 'EEK', 'Estonian Kroon', 'Currency', 'EEK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (398, 'BGN', 'Bulgarian Lev', 'Currency', 'BGN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (399, 'HKD', 'Hong Kong Dollar', 'Currency', 'HKD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (400, 'ZWL', 'Zimbabwean Dollar (2009)', 'Currency', 'ZWL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (401, 'BSD', 'Bahamian Dollar', 'Currency', 'BSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (402, 'GEL', 'Georgian Lari', 'Currency', 'GEL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (403, 'NPR', 'Nepalese Rupee', 'Currency', 'NPR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (404, 'CUP', 'Cuban Peso', 'Currency', 'CUP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (405, 'MUR', 'Mauritian Rupee', 'Currency', 'MUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (406, 'SDD', 'Sudanese Dinar (1992-2007)', 'Currency', 'SDD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (407, 'QAR', 'Qatari Rial', 'Currency', 'QAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (408, 'CNY', 'Chinese Yuan', 'Currency', 'CNY', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (409, 'GHS', 'Ghanaian Cedi', 'Currency', 'GHS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (410, 'GTQ', 'Guatemalan Quetzal', 'Currency', 'GTQ', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (411, 'MKD', 'Macedonian Denar', 'Currency', 'MKD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (412, 'XAG', 'Silver', 'Currency', 'XAG', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (413, 'DZD', 'Algerian Dinar', 'Currency', 'DZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (414, 'GRD', 'Greek Drachma', 'Currency', 'GRD', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (415, 'CSD', 'Serbian Dinar (2002-2006)', 'Currency', 'CSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (416, 'XXX', 'Unknown Currency', 'Currency', 'XXX', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (417, 'NZD', 'New Zealand Dollar', 'Currency', 'NZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (418, 'LKR', 'Sri Lankan Rupee', 'Currency', 'LKR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (419, 'ZWR', 'Zimbabwean Dollar (2008)', 'Currency', 'ZWR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (420, 'AED', 'United Arab Emirates Dirham', 'Currency', 'AED', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (421, 'DOP', 'Dominican Peso', 'Currency', 'DOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (422, 'BEF', 'Belgian Franc', 'Currency', 'BEF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (423, 'SBD', 'Solomon Islands Dollar', 'Currency', 'SBD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (424, 'SGD', 'Singapore Dollar', 'Currency', 'SGD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (425, 'XTS', 'Testing Currency Code', 'Currency', 'XTS', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (426, 'RSD', 'Serbian Dinar', 'Currency', 'RSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (427, 'LSL', 'Lesotho Loti', 'Currency', 'LSL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (428, 'XPT', 'Platinum', 'Currency', 'XPT', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (429, 'KWD', 'Kuwaiti Dinar', 'Currency', 'KWD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (430, 'IQD', 'Iraqi Dinar', 'Currency', 'IQD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (431, 'TTD', 'Trinidad and Tobago Dollar', 'Currency', 'TTD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (432, 'SRD', 'Surinamese Dollar', 'Currency', 'SRD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (433, 'LTL', 'Lithuanian Litas', 'Currency', 'LTL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (434, 'ESP', 'Spanish Peseta', 'Currency', 'ESP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (435, 'XFU', 'French UIC-Franc', 'Currency', 'XFU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (436, 'NIO', 'Nicaraguan Córdoba', 'Currency', 'NIO', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (437, 'BAM', 'Bosnia-Herzegovina Convertible Mark', 'Currency', 'BAM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (438, 'SRG', 'Surinamese Guilder', 'Currency', 'SRG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (439, 'AUD', 'Australian Dollar', 'Currency', 'AUD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (440, 'SEK', 'Swedish Krona', 'Currency', 'SEK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (441, 'KPW', 'North Korean Won', 'Currency', 'KPW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (442, 'XAF', 'CFA Franc BEAC', 'Currency', 'XAF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (443, 'CAD', 'Canadian Dollar', 'Currency', 'CAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (444, 'CZK', 'Czech Republic Koruna', 'Currency', 'CZK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (445, 'LVL', 'Latvian Lats', 'Currency', 'LVL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (446, 'AFN', 'Afghan Afghani', 'Currency', 'AFN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (447, 'AWG', 'Aruban Florin', 'Currency', 'AWG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (448, 'MZN', 'Mozambican Metical', 'Currency', 'MZN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (449, 'RWF', 'Rwandan Franc', 'Currency', 'RWF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (450, 'ZMW', 'ZMW', 'Currency', 'ZMW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (451, 'DEM', 'German Mark', 'Currency', 'DEM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (452, 'Shukran', 'Shukran', 'Reward Points', 'Shukran', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (453, 'Qitaf', 'STC Reward Points', 'Reward Points', 'Qitaf', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (454, 'ICSAB', 'SABB ICSAB', 'Reward Points', 'ICSAB', 0);

-- Table: Account_TagGroup
DROP TABLE IF EXISTS Account_TagGroup;

CREATE TABLE Account_TagGroup (
    ACCOUNT_ID  INTEGER REFERENCES Currency (ID) 
                        NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                        NOT NULL
);


-- Table: Tag
DROP TABLE IF EXISTS Tag;

CREATE TABLE Tag (
    ID          INTEGER      NOT NULL
                             CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAGGROUP_TAG REFERENCES TagGroup (ID) 
);


-- Table: Transactions
DROP TABLE IF EXISTS Transactions;

CREATE TABLE Transactions (
    ID                 INTEGER         NOT NULL
                                       CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    Date               DATE            NOT NULL,
    Effective_Date     DATE            NOT NULL,
    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Number             VARCHAR (12),
    Memo               VARCHAR (128),
    Account_ID         INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
);


-- Table: TagGroup
DROP TABLE IF EXISTS TagGroup;

CREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
);

INSERT INTO TagGroup (ID, Name) VALUES (1, 'Default');

-- Table: TransactionGroup
DROP TABLE IF EXISTS TransactionGroup;

CREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);


-- Table: Payee
DROP TABLE IF EXISTS Payee;

CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/TODO
Features:
    Backup files are automatically generated when appropriate.

Terminology:
    Account registers
    Hierarchy of accounts
    Type of Accounts:
        Asset: Cash, Bank, Stock, Mutual Fund, Accounts Receivable
        Liability: Credit Card, Accounts Payable, and Liability
        Equity
        Income
        Expense

Transaction:
    Date : Num : Description : Transfer (Budget : transfer Account) : R Deposit : Withdrawal : Balance

    R : When you write a check for something, you should enter the transaction 
    into GnuCash. The reconciliation R field of the transaction will initially 
    contain n (new). Your new entry will contribute to the total balance, but not to 
    the cleared and reconciled balance. Later, if you think that the check has been 
    cashed, you might click on the transaction’s R field to change it to c (cleared).
    When you do this, the cleared balance will change to include this amount. When 
    the bank statement arrives, you can then compare it to what you’ve recorded in 
    GnuCash by opening the reconciliation window. There, you will be able to change 
    the R field to y (reconciled).

Scheduled Transactions
    start date, frequency and a little description
*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/Mapping.hbm.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.almatarm.p.budget.model">
  <!-- Payee Class -->
  <class name="com.almatarm.wimm.domain3.Payee" table="payees">
    <id column="payee_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name" not-null="true"/>
    <property length="128" name="address"/>
  </class>
  <!-- Category Class -->
  <class name="Category" table="categories">
    <id column="cat_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="master" not-null="true"/>
    <property length="48" name="category" not-null="true"/>
  </class>
  <!-- Account
  <class name="Account" table="accounts">
    <id column="account_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name"        not-null="true"/>
    <property length="128" name="description" column="desc"/>
    <property length="128" name="note"/>
    <property name="limit"/>
    <property name="balance"/>
    
  </class>
    
    /**
     * Type of account
     */
    Type type;
     -->
  <!--  
    Book Class  
  <class name="Book" table="books">
    <id column="book_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="64" name="author"/>
  
     constraints 
    <bag name="recipes" lazy="false">
      <key column="book_id"/>
      <one-to-many class="Recipe"/>
    </bag>
    
  </class>
  
    Recipe Class 
  <class name="Recipe" table="recipes">
    <id column="recipe_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="32" name="chapter"/>
    <property column="prep_time" name="preperationTime"/>
    <property column="cooking_time" name="cookingTime"/>
    <property column="ready_in" name="readyIn"/>
    <property name="servings"/>
    <property length="96" name="source"/>
    <property length="32" name="yield"/>
    <property name="rating"/>
    <property name="description"/>
    <property length="1024" name="directions"/>
    <property name="note"/>
    <property name="tags"/>
    
     constraints 
    <many-to-one cascade="save-update" class="Book" column="book_id" name="book" not-null="true" lazy="false"/>
    
    <many-to-one class="Recipe" column="master_recipe_id" name="master"/>
    
    <bag name="recipeIngredients" table="recipe_ingds"  lazy="false">
      <key column="recipe_id"/>
      <composite-element class="RecipeIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredient"  lazy="false"/>
        <property name="quantity" not-null="true"/>
        <many-to-one class="Unit" column="unit" name="unit" not-null="true"  lazy="false"/>
      </composite-element>
    </bag>
    
  </class>
  
    Ingredient Class 
  <class name="Ingredient" table="ingredients">
    <id column="ingredient_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="32" name="name" not-null="true"/>
    <property column="name_ext" length="32" name="nameExt"/>
    <property column="brand" length="32" name="brand"/>
    <property column="short_name" length="32" name="shortName" />
    <property name="type"/>
    <property column="cost" name="cost"/>
    <property name="grade"/>
    <property column="cal_from_fat" name="caloriesFromFat"/>
    <property column="total_fat" name="totalFat"/>
    <property column="sat_fat" name="saturatedFat"/>
    <property column="poly_fat" name="polyFat"/>
    <property column="mono_fat" name="monoFlat"/>
    <property name="cholesterol"/>
    <property name="sodium"/>
    <property name="carbohydrates"/>
    <property name="fiber"/>
    <property name="sugars"/>
    <property name="protein"/>
  
    constraints
    <many-to-one class="Unit" column="default_unit" name="defaultUnit" not-null="true"/>

    <set name="units" table="ingd_units" lazy="false">
      <key column="ingd_id"/>
      <composite-element class="IngredientUnits">
        <many-to-one class="Unit" column="unit_id" name="unit" lazy="false"/>
        <property column="gram_per_unit" name="gramPerUnit"/>
        <property column="main_unit" name="mainUnit"/>
      </composite-element>
    </set>

    <set name="substitutions">
      <key column="ingd_id"/>
      <one-to-many class="Substitution"/>
    </set>

  </class>
  
   Substitution Class 
  <class name="Substitution" table="substitution">
    <id column="subst_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <many-to-one class="Ingredient" column="ingd_id" name="ingredient"/>
    <property name="quantity"/>
    <many-to-one class="Unit" column="unit" name="unit"/>
    <set name="substitutions" table="subst_ingd">
      <key column="subst_id"/>
      <composite-element class="SubstitutionIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredientId"/>
        <many-to-one class="Unit" column="unit" name="unit"/>
        <property name="quantity"/>
      </composite-element>
    </set>
  </class>-->
</hibernate-mapping>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <!-- H2 -->
    <!--        
    <property name="connection.driver_class">org.h2.Driver</property>
    <property name="connection.url">jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE</property>
    <property name="connection.username">sa</property>
    <property name="connection.password"/>
    <property name="dialect">org.hibernate.dialect.H2Dialect</property>
-->
    <!-- SQLite -->
    <property name="connection.driver_class">org.sqlite.JDBC</property>
    <property name="connection.url">jdbc:sqlite:D:/Dropbox/utopia/p-budget/budget.db</property>
    <!--<property name="connection.url">jdbc:sqlite:/Users/almatarm/Dropbox/workarea/MasterRecipe.db</property>-->
    <property name="dialect">com.almatarm.p.budget.hibernate.SQLiteDialect</property>
    <!-- MySQl -->
    <!--
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="connection.url">jdbc:mysql://localhost:3306/mysql</property>
    <property name="connection.username">root</property>
    <property name="connection.password"></property>
    <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
 -->
    <!-- JDBC connection pool (use the built-in) -->
    <property name="connection.pool_size">1</property>
    <!-- SQL dialect -->
    <!-- Disable the second-level cache  -->
    <!--<property name="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</property>-->
    <!--<property name="dialect">com.applerao.hibernatesqlite.dialect.SQLiteDialect</property>-->
    <!-- Echo all executed SQL to stdout -->
    <property name="show_sql">true</property>
    <!--Drop and re-create the database schema on startup -->
    <property name="hbm2ddl.auto">create</property>
    <property name="format_sql">true</property>
    <property name="hibernate.use_sql_comments">true</property>
    <mapping resource="Mapping.hbm.xml"/>
    <mapping class="com.almatarm.p.budget.model.Account"/>
  </session-factory>
</hibernate-configuration>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/com/almatarm/wimm/app-context2.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/com/almatarm/wimm/persistence/PayeeMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.PayeeMapper">

    <resultMap  id="payeeResultMap"   type="Payee">
        <id     property="id"         column="ID" />
        <result property="name"       column="Name" />
        <result property="address"    column="Address" />
        <!-- 
            Table: Payee
            Mapper: PayeeMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name, Address
            Select Alone: Name
            Type: Long id; String name, address; 
        -->
    </resultMap>

</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/com/almatarm/wimm/persistence/TagMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TagMapper">

    <resultMap  id="tagGroupResultMap"   type="TagGroup">
        <id         property="id"       column="ID" />
        <result     property="name"     column="Name" />       
        <collection property="tags"     ofType="Tag" > 
            <id     property="id"       column="Tag_ID" />      
            <result property="name"     column="Tag_Name" />   
        </collection>
        <!-- 
            Table: TagGroup
            Mapper: TagMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name
            Select Alone: Name
            FK: tags, TagGroup_ID
            Type: Long id; String name; Tag tags; 
        -->
    </resultMap>
    
    <resultMap  id="tagResultMap"   type="Tag">
        <id     property="id"       column="ID" />
        <result property="name"     column="Name" />           
        <!-- 
            Table: Tag 
            Unique: ID
            Find By: ID, Name
            Searchable: Name
            Type: Long ID; String Name; 
        -->   
    </resultMap>

<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/com/almatarm/wimm/persistence/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.AccountMapper">

    <resultMap  id="accountResultMap"    type="Account">
        <id     property="id"            column="ID" />
        <result property="name"          column="Name" />
        <result property="description"   column="Descr" />
        <result property="notes"         column="Notes" />
        <result property="type"          column="Type" />
        <!--<result property="parentID"      column="Parent_ID" />-->
        <result property="hidden"        column="Hidden" />
        <result property="qualifiedName" column="QName" />
        <association property="parent"      column="Parent_ID"   select="findAccountByID" fetchType="lazy"/>        
        <association property="currency"     column="Currency_ID" javaType="CurrencyUnitDO">
            <id     property="id"             column="CU_ID" />
            <result property="code"           column="CU_Code" />
            <result property="description"    column="CU_Descr" />
            <result property="symbol"         column="CU_Symbol" />
            <result property="provider"       column="CU_Provider" />
            <result property="fractionDigits" column="CU_FractDigt" />
        </association>
        <discriminator column="Type" javaType="AccountType">
            <case value="CREDIT" resultMap="creditResultMap" />
            <case value="LOAN"   resultMap="loanResultMap" />            
        </discriminator>
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID, QName
            Find By: ID, QName, Name, Parent_ID
            Searchable: Name, Descr, Notes, Type, QName
            !Select Alone: 
            !FK: currency, TagGroup_ID
            Type: Long id, parentID; String name, qualifiedName, description, notes;
            Type: String name, qualifiedName, description, notes;
            Type: boolean hidden;
        -->
    </resultMap>

    <resultMap  id="creditResultMap" type="CreditAccount" extends="accountResultMap">
        <result property="limit"            column="CreditLimit" />
        <result property="statementDay"     column="StatDay" />
        <!-- 
            Type: BigDecimal limit; int statementDay;
            Class: com.almatarm.money.domain.CreditAccount
        -->
    </resultMap>
    
    <resultMap  id="loanResultMap" type="Loan" extends="accountResultMap">
        <result property="presentValue"     column="PresentValue" />
        <result property="interestRate"     column="InterestRate" />
        <!-- 
            Type: BigDecimal presentValue, interestRate;
            Class: com.almatarm.money.domain.Loan
        -->
    </resultMap>
    
    <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM 
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID;
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
            <if test="type != null">
                Account.Type = #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName = #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
            <if test="type != null">
                Account.Type LIKE #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName LIKE #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            Account.ID = #{id}
    </select>

    <select id="findAccountByQualifiedName" parameterType="String" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            QName = #{qualifiedName}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID, Hidden, QName, Currency_ID
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, CreditLimit, StatDay</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, PresentValue, InterestRate</if>) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID}, #{hidden}, #{qualifiedName}, #{currency.id}
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, #{limit}, #{statementDay}</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, #{presentValue}, #{interestRate}</if>)    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name           = #{name},
            Descr          = #{description},
            Notes          = #{notes},
            Type           = #{type},
            Parent_ID      = #{parentID},
            Hidden         = #{hidden},
            QName          = #{qualifiedName},
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">
            CreditLimit    = #{limit},
            StatDay        = #{statementDay}
            </if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">
            PresentValue   = #{presentValue},
            InterestRate   = #{interestRate}
            </if>
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
       
</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/com/almatarm/wimm/persistence/TransactionMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TransactionMapper">

    <resultMap  id="transactionResultMap"   type="Transaction">
        <id         property="id"               column="ID" />
        <result     property="date"             column="Date" />       
        <result     property="effectiveDate"    column="EffectiveDate" />       
        <result     property="number"           column="Number" />       
        <result     property="Memo"             column="Memo" />       
        <result     property="status"           column="Status" /> 
        <result     property="type"             column="Type" /> 
        
        <!-- 
            Table: Transactions
            Mapper: TransactionMapper
            Unique: ID
            Find By: ID, Date
            Searchable: Name, Data, EffectiveDate, Number, Memo, Status
            !Select Alone: 
            !FK: tags, TagGroup_ID
            Type: Long id; Status status;
            Type: Calendar date, effectiveDate;
            Type: TransactionType type;
            Type: String number, memo;
        -->
        
    
    BigDecimal amount;
    Payee payee;
    Account account;
    Tag tag;
    MonetaryAmount foreignAmount;
    TransactionGroup transactionGroup;

    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
    
    
    </resultMap>
    
<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/com/almatarm/wimm/persistence/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
   
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>

</mapper>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/log4j.properties
# Root logger option
log4j.rootLogger=Debug, stdout

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %40.40C:%4L - %m%n
*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/javamoney.properties
#Currency Conversion
conversion.default-chain=Static,xChange
*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/resources/schema-export.sql
--
-- File generated with SQLiteStudio v3.0.7 on Sat Feb 6 13:07:44 2016
--
-- Text encoding used: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Payee
DROP TABLE IF EXISTS Payee;

CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
);


-- Table: Tag
DROP TABLE IF EXISTS Tag;

CREATE TABLE Tag (
    ID          INTEGER      NOT NULL
                             CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAG_GROUP_TAG REFERENCES TagGroup (ID) ON DELETE CASCADE
                                                                                  ON UPDATE CASCADE
);


-- Table: TagGroup
DROP TABLE IF EXISTS TagGroup;

CREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
);


-- Table: Account
DROP TABLE IF EXISTS Account;

CREATE TABLE Account (
    ID          INTEGER       NOT NULL
                              CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32)  NOT NULL,
    Descr       VARCHAR (128),
    Type        VARCHAR (4)   NOT NULL,
    Notes       TEXT,
    CreditLimit INTEGER,
    StatDay     INTEGER,
    Hidden      BOOLEAN       DEFAULT (0),
    Balance     INTEGER (13)  DEFAULT (0),
    Scale       INTEGER (2)   DEFAULT (2),
    Currency_ID INTEGER       CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID),
    Parent_ID   INTEGER       REFERENCES Account (ID),
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        Parent_ID
    )
    REFERENCES Account (ID),
    CONSTRAINT UQ_ACCOUNT_NAME UNIQUE (
        Name COLLATE BINARY
    )
);


-- Table: TransactionGroup
DROP TABLE IF EXISTS TransactionGroup;

CREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);


-- Table: Account_TagGroup
DROP TABLE IF EXISTS Account_TagGroup;

CREATE TABLE Account_TagGroup (
    Account_ID  INTEGER REFERENCES Currency (ID) 
                        NOT NULL,
    TagGroup_ID INTEGER REFERENCES TagGroup (ID) 
                        NOT NULL
);


-- Table: Transactions
DROP TABLE IF EXISTS Transactions;

CREATE TABLE Transactions (
    ID                 INTEGER         NOT NULL
                                       CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    Date               DATE            NOT NULL,
    EffectiveDate      DATE            NOT NULL,
    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Number             VARCHAR (12),
    Memo               VARCHAR (128),
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
);


-- Table: Currency
DROP TABLE IF EXISTS Currency;

CREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL,
    CONSTRAINT UQC_CODE_PROVIDER UNIQUE (
        Code COLLATE BINARY,
        Provider COLLATE BINARY
    )
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/TestIt.java
package com.almatarm.wimm;

import java.math.BigDecimal;
import org.apache.ibatis.type.BigDecimalTypeHandler;

/**
 *
 * @author almatarm
 */
public class TestIt {
    public static void main(String[] args) {
        BigDecimalTypeHandler t;
        BigDecimal n = new BigDecimal("1542.2");
        System.out.println(n.setScale(2));
        System.out.println(n.unscaledValue() + "\t" + n.scale());
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/Util.java
package com.almatarm.wimm;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class Util {
    public static <T extends Comparable<? super T>> List<T> asSortedList(Collection<T> c) {
        List<T> list = new ArrayList<T>(c);
        Collections.sort(list);
        return list;
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/StaticExchange.java
package com.almatarm.wimm.monetary;

import com.almatarm.xchange.ExchangeException;
import java.math.BigDecimal;

/**
 *
 * @author almatarm
 */
public class StaticExchange {
    
    private static String[][] exchangeTable = {
        {"SAR", "CAD", "0.37", null},
        {"CAD", "SAR", "2.70", null},
        {"USD", "SAR", "3.75", null},
        {"SAR", "USD", "0.27", null},
        
        {"ICSAB", "SAR", "1", "100"},
        
    };
    
    public static BigDecimal exchange(String from, String to, BigDecimal amount) 
            throws ExchangeNotSupportedException, ExchangeException {
        if(!isExchangeSupported(from, to)) {
            throw new ExchangeNotSupportedException("Exchanging from " + from 
                    + " to " + to + " is not supported!");
        }
        
        for (String[] exchangeRow : exchangeTable) {
            if(exchangeRow[0].equals(from) && exchangeRow[1].equals(to)) {
                BigDecimal exRate =  new BigDecimal(exchangeRow[2]).multiply(amount);
                return exRate;
            }
        }
        
        throw new ExchangeException("Could not connect to get an update for "
                    + "exchange rate from " + from + " to " + to);
    }
    
    public static boolean isExchangeSupported(String from, String to) {
        for (String[] exchangeRow : exchangeTable) {
            if(exchangeRow[0].equals(from) && exchangeRow[1].equals(to))
                return true;
        }
        return false;
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/XChangeRateProvider.java
package com.almatarm.wimm.monetary;

import com.almatarm.xchange.ExchangeException;
import com.almatarm.xchange.XChange;
import java.math.BigDecimal;
import java.util.Currency;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.CurrencyUnit;
import javax.money.convert.ConversionContext;
import javax.money.convert.ConversionQuery;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.ProviderContext;
import javax.money.convert.ProviderContextBuilder;
import javax.money.convert.RateType;
import org.javamoney.moneta.ExchangeRateBuilder;
import org.javamoney.moneta.spi.AbstractRateProvider;
import org.javamoney.moneta.spi.DefaultNumberValue;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@ServiceProvider(service=ExchangeRateProvider.class)
public class XChangeRateProvider extends AbstractRateProvider {

    private final static ProviderContext CONTEXT = ProviderContextBuilder
            .of("xChange", RateType.REALTIME)
            .set("providerDescription", "Yahoo!").build();
    
    public XChangeRateProvider() {
        super(CONTEXT);
        
    }

    @Override
    public ExchangeRate getExchangeRate(ConversionQuery conversionQuery) {
        try {
            if (!isAvailable(conversionQuery)) {
                return null;
            }
            
            CurrencyUnit base = conversionQuery.getBaseCurrency();
            CurrencyUnit term = conversionQuery.getCurrency();
            
            BigDecimal exchangeRateFactor = XChange.getExchangeRate(
                    Currency.getInstance(base.getCurrencyCode()),
                    Currency.getInstance(term.getCurrencyCode()));
            
            ExchangeRateBuilder builder = new ExchangeRateBuilder(
                    ConversionContext.of(CONTEXT.getProviderName(), 
                            RateType.REALTIME));
            builder.setBase(base);
            builder.setTerm(term);
            builder.setFactor(DefaultNumberValue.of(exchangeRateFactor));
            return builder.build();
        } catch (ExchangeException ex) {
            Logger.getLogger(XChangeRateProvider.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/ExchangeRateException.java
package com.almatarm.wimm.monetary;

/**
 *
 * @author almatarm
 */
public class ExchangeRateException extends Exception {

    /**
     * Creates a new instance of <code>ExchangeRateException</code> without
     * detail message.
     */
    public ExchangeRateException() {
    }

    /**
     * Constructs an instance of <code>ExchangeRateException</code> with the
     * specified detail message.
     *
     * @param msg the detail message.
     */
    public ExchangeRateException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/RewardPointsProvider.java
package com.almatarm.wimm.monetary;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.money.CurrencyContext;
import javax.money.CurrencyContextBuilder;
import javax.money.CurrencyQuery;
import javax.money.CurrencyUnit;
import javax.money.spi.CurrencyProviderSpi;
import org.javamoney.moneta.CurrencyUnitBuilder;
import org.openide.util.lookup.ServiceProvider;

@ServiceProvider(service = CurrencyProviderSpi.class)
public final class RewardPointsProvider implements CurrencyProviderSpi {
    public static final String NAME = "Reward Points";
    
    private Set<CurrencyUnit> currencies = new HashSet<>();
    private final CurrencyContext context = CurrencyContextBuilder.of(NAME).build();
    
    private final List<String> currencyCodes = new ArrayList<String>(
            Arrays.asList(new String[]{ "ICSAB", "Shukran", "Qitaf" }));
    private final Map<String, CurrencyUnit> currenciesMap = new HashMap<>();
    
    public RewardPointsProvider() {
        for(String code : currencyCodes) {
            CurrencyUnit cu = CurrencyUnitBuilder.of(code, context).build();
            currenciesMap.put(code, cu);
            currencies.add(cu);
        }
        currencies = Collections.unmodifiableSet(currencies);
    }

    @Override
    public Set<CurrencyUnit> getCurrencies(CurrencyQuery query) {
        Set<CurrencyUnit> foundCurrencies = new HashSet<>();
        query.getCurrencyCodes().stream().forEach( (code) -> { 
            if(currencyCodes.contains(code)) {
                foundCurrencies.add(currenciesMap.get(code));
            }
        });
        return foundCurrencies;
    } 
       
}

   
*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/ExchangeNotSupportedException.java
package com.almatarm.wimm.monetary;

/**
 *
 * @author almatarm
 */
public class ExchangeNotSupportedException extends Exception {

    /**
     * Creates a new instance of <code>ExchangeNotSupportedException</code>
     * without detail message.
     */
    public ExchangeNotSupportedException() {
    }

    /**
     * Constructs an instance of <code>ExchangeNotSupportedException</code> with
     * the specified detail message.
     *
     * @param msg the detail message.
     */
    public ExchangeNotSupportedException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/NewMain.java
package com.almatarm.wimm.monetary;

import java.util.Collection;
import java.util.Locale;
import java.util.ServiceLoader;
import javax.money.CurrencyUnit;
import javax.money.Monetary;
import javax.money.MonetaryAmount;
import javax.money.convert.CurrencyConversion;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.MonetaryConversions;
import javax.money.format.AmountFormatQueryBuilder;
import javax.money.format.MonetaryAmountFormat;
import javax.money.format.MonetaryFormats;
import org.javamoney.moneta.Money;
import org.openide.util.Lookup;


/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class NewMain {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        CurrencyUnit euro = Monetary.getCurrency("EUR");

        Monetary.getCurrencyProviderNames().stream().forEach( (name) -> {
            System.out.println(name);
        });
        
        
        Monetary.getCurrency("ICSAB");
        System.out.println(Monetary.getCurrency("Qitaf"));
        
        System.out.println("-----------------");
        System.out.println(Monetary.getCurrency("ICSAB", RewardPointsProvider.NAME));
        
//        MonetaryAmountFormat formatQueried = MonetaryFormats.getAmountFormat(
//                AmountFormatQueryBuilder.of(Locale.GERMANY)
//                .set("pattern", "####,####")
//                .build()
//        );
//
        Collection<? extends ExchangeRateProvider> results = Lookup.getDefault().lookupAll(ExchangeRateProvider.class);
        results.stream().forEach( (erp) -> { 
            System.out.println(erp.getContext().getProviderName());
        });
        
        System.out.println("-------------------------------------------------");
        ExchangeRateProvider rateProvider = MonetaryConversions.getExchangeRateProvider("Static", "xChange");
        CurrencyConversion conversion = rateProvider.getCurrencyConversion("SAR");

        MonetaryAmount amountInCAD   = Money.of(100, "CAD");
        
        MonetaryAmount amountInICSAB = Money.of(120, "ICSAB");
        MonetaryAmount amountInSAR = amountInICSAB.with(conversion);
        System.out.println(amountInICSAB + " --> " + amountInSAR);

    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/monetary/StaticChangeRateProvider.java
package com.almatarm.wimm.monetary;

import com.almatarm.xchange.ExchangeException;
import java.math.BigDecimal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.CurrencyUnit;
import javax.money.convert.ConversionContext;
import javax.money.convert.ConversionQuery;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.ProviderContext;
import javax.money.convert.ProviderContextBuilder;
import javax.money.convert.RateType;
import org.javamoney.moneta.ExchangeRateBuilder;
import org.javamoney.moneta.spi.AbstractRateProvider;
import org.javamoney.moneta.spi.DefaultNumberValue;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@ServiceProvider(service=ExchangeRateProvider.class)
public class StaticChangeRateProvider extends AbstractRateProvider {

    private final static ProviderContext CONTEXT = ProviderContextBuilder
            .of("Static", RateType.OTHER).build();
    
    public StaticChangeRateProvider() {
        super(CONTEXT);
    }

    @Override
    public ExchangeRate getExchangeRate(ConversionQuery conversionQuery) {
        try {
            if (!isAvailable(conversionQuery)) {
                return null;
            }
            
            CurrencyUnit base = conversionQuery.getBaseCurrency();
            CurrencyUnit term = conversionQuery.getCurrency();
            
            BigDecimal exchangeRateFactor = StaticExchange.exchange(
                    base.getCurrencyCode(), term.getCurrencyCode(), BigDecimal.ONE);
            
            ExchangeRateBuilder builder = new ExchangeRateBuilder(
                    ConversionContext.of(CONTEXT.getProviderName(), 
                            RateType.REALTIME));
            builder.setBase(base);
            builder.setTerm(term);
            builder.setFactor(DefaultNumberValue.of(exchangeRateFactor));
            return builder.build();
        } catch (ExchangeException | ExchangeNotSupportedException ex) {
            Logger.getLogger(StaticChangeRateProvider.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        return null;
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/StoreMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface StoreMapper {
    
    //**************************************************************************
    // TagGroup Mapper
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();
  
    public List<TagGroup> findTagGroups(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);
       
    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);
    
    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);
   
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/CurrencyUnitMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.CurrencyUnitDO;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface CurrencyUnitMapper {
    
    public List<CurrencyUnitDO> getCurrencyUnits();

    public List<String> getCurrencyUnitCodesList();

    public List<String> getCurrencyUnitProvidersList();

    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit);

    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit);

    public CurrencyUnitDO findCurrencyUnitByID(Long id);

    public void insertCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void updateCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void deleteCurrencyUnit(Long id);

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/PayeeMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.Payee;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface PayeeMapper {

    public List<Payee> getPayees();

    public List<String> getPayeeNamesList();

    public List<Payee> findPayees(Payee payee);

    public List<Payee> findPayeesLike(Payee payee);

    public Payee findPayeeByID(Long id);

    public Payee findPayeeByName(String name);

    public void insertPayee(Payee payee);

    public void updatePayee(Payee payee);

    public void deletePayee(Long id);
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/TagMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface TagMapper {
    
    //**************************************************************************
    // Tag Mapper
    //**************************************************************************

    public List<Tag> getTags();

    public List<Tag> findTags(Tag tag);

    public List<Tag> findTagsLike(Tag tag);

    public Tag findTagByID(Long id);

    public List<Tag> findTagByNameRegEx(String name);

    public void insertTag(Tag tag);

    public void updateTag(Tag tag);

    public void deleteTag(Long id);    
    
    //**************************************************************************
    // TagGroup Mapper
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();

    public List<String> getTagGroupNamesList();

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);

    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);

    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);

    public void insertTagGroup(TagGroup tagGroup);

    public void updateTagGroup(TagGroup tagGroup);

    public void deleteTagGroup(Long id);

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/AccountMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.Account;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountMapper {
    

    //**************************************************************************
    // Account Mapper
    //**************************************************************************

    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public Account findAccountByQualifiedName(String qualifiedName);

    public void insertAccount(Account account);

    public void updateAccount(Account account);

    public void deleteAccount(Long id);

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/MonetaryAmountTypeHandler.java
package com.almatarm.wimm.persistence;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.money.MonetaryAmount;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(MonetaryAmount.class)
public class MonetaryAmountTypeHandler implements TypeHandler<MonetaryAmount> {

    @Override
    public void setParameter(PreparedStatement ps, int i, MonetaryAmount t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null;//MonetaryAmount.toMonetaryAmount(rs.getString(columnLabel));
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(rs.getString(i));
    }

    @Override
    public MonetaryAmount getResult(CallableStatement cs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/CurrencyUnitDoTypeHandler.java
package com.almatarm.wimm.persistence;


import com.almatarm.money.domain.CurrencyUnitDO;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
//@MappedTypes(CurrencyUnitDO.class)
public class CurrencyUnitDoTypeHandler implements TypeHandler<CurrencyUnitDO> {

    @Override
    public void setParameter(PreparedStatement ps, int i, CurrencyUnitDO t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null; //CurrencyUnitDO.toCurrencyUnitDO(rs.getString(columnLabel));
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(rs.getString(i));
    }

    @Override
    public CurrencyUnitDO getResult(CallableStatement cs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence/AccountTypeTypeHandler.java
package com.almatarm.wimm.persistence;


import com.almatarm.money.domain.AccountType;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(AccountType.class)
public class AccountTypeTypeHandler implements TypeHandler<AccountType> {

    @Override
    public void setParameter(PreparedStatement ps, int i, AccountType t, 
            JdbcType jt) throws SQLException {
        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public AccountType getResult(ResultSet rs, String columnLabel) throws SQLException {
        return AccountType.toAccountType(rs.getString(columnLabel));
    }

    @Override
    public AccountType getResult(ResultSet rs, int i) throws SQLException {
        return AccountType.toAccountType(rs.getString(i));
    }

    @Override
    public AccountType getResult(CallableStatement cs, int i) throws SQLException {
        return AccountType.toAccountType(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence2/CurrencyTypeHandler.java
package com.almatarm.wimm.persistence2;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Currency;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(Currency.class)
public class CurrencyTypeHandler implements TypeHandler<Currency>{

    @Override
    public void setParameter(PreparedStatement ps, int i, Currency t, JdbcType jt) 
            throws SQLException {
        ps.setString(i, t.getCurrencyCode());
    }

    @Override
    public Currency getResult(ResultSet rs, String columnLabel) 
            throws SQLException {
        return Currency.getInstance(rs.getString(columnLabel));
    }

    @Override
    public Currency getResult(ResultSet rs, int i) 
            throws SQLException {
        return Currency.getInstance(rs.getString(i));
    }

    @Override
    public Currency getResult(CallableStatement cs, int i) 
            throws SQLException {
        return Currency.getInstance(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/persistence2/AccountTypeTypeHandler.java
package com.almatarm.wimm.persistence2;

import com.almatarm.money.domain.AccountType;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(AccountType.class)
public class AccountTypeTypeHandler implements TypeHandler<AccountType> {

    @Override
    public void setParameter(PreparedStatement ps, int i, AccountType t, 
            JdbcType jt) throws SQLException {
        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public AccountType getResult(ResultSet rs, String columnLabel) throws SQLException {
        return AccountType.toAccountType(rs.getString(columnLabel));
    }

    @Override
    public AccountType getResult(ResultSet rs, int i) throws SQLException {
        return AccountType.toAccountType(rs.getString(i));
    }

    @Override
    public AccountType getResult(CallableStatement cs, int i) throws SQLException {
        return AccountType.toAccountType(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/App.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Menu class="javax.swing.JMenuBar" name="menuBar">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="fileMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="102"/>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="openMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="111"/>
                <Property name="text" type="java.lang.String" value="Open"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="115"/>
                <Property name="text" type="java.lang.String" value="Save"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveAsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="Save As ..."/>
                <Property name="displayedMnemonicIndex" type="int" value="5"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="exitMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="120"/>
                <Property name="text" type="java.lang.String" value="Exit"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="exitMenuItemActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="editMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="101"/>
            <Property name="text" type="java.lang.String" value="Edit"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="cutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="116"/>
                <Property name="text" type="java.lang.String" value="Cut"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="copyMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="121"/>
                <Property name="text" type="java.lang.String" value="Copy"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="pasteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="112"/>
                <Property name="text" type="java.lang.String" value="Paste"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="deleteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="100"/>
                <Property name="text" type="java.lang.String" value="Delete"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="helpMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="104"/>
            <Property name="text" type="java.lang.String" value="Help"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="contentsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="99"/>
                <Property name="text" type="java.lang.String" value="Contents"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="aboutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="About"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="menuBar"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-56,0,0,3,-127"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Container class="javax.swing.JSplitPane" name="jSplitPane1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
      <SubComponents>
        <Container class="javax.swing.JSplitPane" name="jSplitPane2">
          <Properties>
            <Property name="orientation" type="int" value="0"/>
          </Properties>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
              <JSplitPaneConstraints position="left"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
          <SubComponents>
            <Container class="javax.swing.JScrollPane" name="jScrollPane1">
              <AuxValues>
                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
              </AuxValues>
              <Constraints>
                <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
                  <JSplitPaneConstraints position="top"/>
                </Constraint>
              </Constraints>

              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
              <SubComponents>
                <Component class="javax.swing.JList" name="jList1">
                  <Properties>
                    <Property name="model" type="javax.swing.ListModel" editor="org.netbeans.modules.form.editors2.ListModelEditor">
                      <StringArray count="5">
                        <StringItem index="0" value="Item 1"/>
                        <StringItem index="1" value="Item 2"/>
                        <StringItem index="2" value="Item 3"/>
                        <StringItem index="3" value="Item 4"/>
                        <StringItem index="4" value="Item 5"/>
                      </StringArray>
                    </Property>
                  </Properties>
                  <AuxValues>
                    <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
                  </AuxValues>
                </Component>
              </SubComponents>
            </Container>
          </SubComponents>
        </Container>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/App.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.wimm;

/**
 *
 * @author almatarm
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jSplitPane2.setTopComponent(jScrollPane1);

        jSplitPane1.setLeftComponent(jSplitPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/Services.java
package com.almatarm.wimm;

import com.almatarm.wimm.service.AccountService;
import com.almatarm.wimm.service.CurrencyUnitService;
import com.almatarm.wimm.service.StoreService;
import com.almatarm.wimm.service.TagService;
import java.io.IOException;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternResolver;

/**
 *
 * @author almatarm
 */
public class Services {
    final GenericApplicationContext ctx;
    AccountService accountService;
    TagService tagService;
    StoreService storeService;
    
    CurrencyUnitService currencyUnitService;
    
    private Services() {
//        
        this.ctx = new GenericApplicationContext() {

            @Override
            protected ResourcePatternResolver getResourcePatternResolver() {
                return new PathMatchingResourcePatternResolverEx(this);
            }
        };

        //set Spring's classloader to context classloader
        this.ctx.setClassLoader(Thread.currentThread().getContextClassLoader());

        XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);
        xmlReader.loadBeanDefinitions(new ClassPathResource("/app-context.xml", Services.class));
//        ctx.load("classpath:app-context.xml");

//         ctx.refresh();
//    
//        ctx = new GenericXmlApplicationContext();
        
//        ctx.refresh();
//        ctx = new ClassPathXmlApplicationContext(
//                new String[] {"com/almatarm/wimm/app-context.xml"}); 
//

        //set Spring's classloader to context classloader
//        this.ctx.setClassLoader(Thread.currentThread().getContextClassLoader());
//        ctx.load("classpath:app-context.xml");
//        ctx.refresh();

        accountService = ctx.getBean("accoService", 
                AccountService.class);
        accountService.buildCache();
        
        currencyUnitService = ctx.getBean("currencyUnitService", 
                CurrencyUnitService.class);
    
        tagService = ctx.getBean("tagService", TagService.class);
    
        storeService = ctx.getBean("storeService", StoreService.class);
    
    }

    private static class PathMatchingResourcePatternResolverEx extends PathMatchingResourcePatternResolver {

        public PathMatchingResourcePatternResolverEx(ResourceLoader resourceLoader) {
            super(resourceLoader);
        }

        public PathMatchingResourcePatternResolverEx(ClassLoader classLoader) {
            super(classLoader);
        }

        public PathMatchingResourcePatternResolverEx() {
            super();
        }

        @Override
        protected boolean isJarResource(Resource resource) throws IOException {
            return super.isJarResource(resource) || "nbjcl".equals(resource.getURL().getProtocol());
        }
    }
    
    public static Services getInstance() {
        return ServicesHolder.INSTANCE;
    }
    
    private static class ServicesHolder {
        private static final Services INSTANCE = new Services();
    }

    public GenericApplicationContext getApplicationContext() {
        return ctx;
    }

    public AccountService getAccountService() {
        return accountService;
    }

    public CurrencyUnitService getCurrencyUnitService() {
        return currencyUnitService;
    }

    public TagService getTagService() {
        return tagService;
    }

    public StoreService getStoreService() {
        return storeService;
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/NewMain.java
package com.almatarm.wimm;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.AccountType;
import com.almatarm.money.domain.CreditAccount;
import com.almatarm.money.domain.CurrencyUnitDO;
import com.almatarm.money.domain.Loan;
import com.almatarm.money.domain.Period;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionRange;
import com.almatarm.money.importing.ShadowAccount;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.wimm.importing.manipulator.SalaryTGM;
import com.almatarm.wimm.importing.manipulator.SplitBalanceTGM;
import com.almatarm.wimm.importing.manipulator.StartingBalanceTGM;
import com.almatarm.wimm.importing.manipulator.TuningTGM;
import com.almatarm.wimm.importing.qif.ynab.YNABImport;
import com.almatarm.wimm.service.AccountService;
import com.almatarm.wimm.service.CurrencyUnitService;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.Month;
import java.util.Currency;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.smallutil.resource.Utopia;
import org.springframework.context.support.GenericXmlApplicationContext;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class NewMain {

    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
        ctx.load("classpath:app-context.xml");
        ctx.refresh();

//        insertDefaultCurrencyUnit();
//        readCurrencies();
//        if(true) return;
//        
//        System.out.println("------------------------------------------------");
//        Services.getInstance().getTagService().getTagGroupNames().stream().forEach( (name) -> {
//            System.out.println(name);
//        });
        
//        System.out.println("------------------------------------------------");
//        Services.getInstance().getTagService().getTagGroups().stream().forEach( (tagGroup) -> {
//            System.out.println(tagGroup.getName()+ ": " + tagGroup.getTags());
//        });
//        
//        List<TagGroup> tagGroups = Services.getInstance().getTagService().getTagGroups();
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tagGroups = Services.getInstance().getTagService().getTagGroupsWithTags();
//        System.out.println("tagGroups = " + tagGroups);
//        
//        TagGroup tg = new TagGroup();
//        tg.setName("Credit");
//        tagGroups = Services.getInstance().getTagService().findTagGroups(tg);
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tagGroups = Services.getInstance().getTagService().findTagGroupsWithTags(tg);
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tg.setName("%t");
//        tagGroups = Services.getInstance().getTagService().findTagGroupsLike(tg);
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tagGroups = Services.getInstance().getTagService().findTagGroupsWithTagsLike(tg);
//        System.out.println("tagGroups = " + tagGroups);
        
//        System.out.println("------------------------------------------------");  
//        System.out.println(Services.getInstance().getTagService().findTagGroupByID(1L));
//        
//        System.out.println("------------------------------------------------");  
//        TagGroup credit = Services.getInstance().getTagService().findTagGroupByName("Credit");
//        Tag tag = new Tag("Partialy Paid!");
//        tag.setTagGroup(credit);
//        Services.getInstance().getTagService().save(tag);
        System.out.println();
        
        System.out.println("------------------------------------------------");  
//        TagGroup tg = new TagGroup("New Tag Group");
//        tg.addTag(new Tag("Tag1"));
//        tg.addTag(new Tag("Tag2"));
//        Services.getInstance().getTagService().save(tg);
        
//        System.out.println(Services.getInstance().getTagService().findTagByID(5L));

        AccountService accountService = Services.getInstance().getAccountService();
//        setupAccounts(accountService);
//        if(true) return;
//        List<Account> accounts = accountService.getAccounts();
//        accounts.forEach((account) -> {
//            System.out.println(account);
//        });
//        Account a = accountService.findAccountByID(310L);
//        System.out.println(a);
//        System.out.println("----------------------------------");
//        System.out.println(a.getCurrency());
//        setupAccounts(accountService); 
//        readCurrencies();
        
          Account account;
//        Account account = accountService.findAccountByID(106L);
//        account.setDescription("Big Money");
//        accountService.saveAccount(account);
        
        account = accountService.findAccountByQualifiedName("Liability:Credit Cards:SABB VISA");
        ((CreditAccount) account).setLimit(new BigDecimal("47530"));
        accountService.saveAccount(account);
        System.out.println(account);
        System.out.println("--> Get Parent Account");
        System.out.println(account.getParent());
        
//        List<Account> accounts = accountService.getAccounts();
//        Account account1 = accounts.get(0);
//        account1.getCurrency();
//        account1.getQualifiedName();
        if(true) return;
//        
////        print(accountService.findAll().get(0));
        Account rootAccount = accountService.getAccounts().get(0);
        ShadowTree shadowTree = new ShadowTree(rootAccount);
        ShadowAccount root = shadowTree.getRoot();
        print(root, 10);
        
        HashMap<String, ShadowAccount> qualifiedNamesMap = shadowTree.getQualifiedNamesMap();
        
        ShadowAccount importedAccount = importTransaction(rootAccount);
        printDetail(importedAccount, true);
        print(importedAccount, 10);

        
//        System.out.println("##################################################################"
//                + "\n\n\n\n\n\n\n\n\n\n\n");
//        Period p = Period.monthOf(10, 2015);
//        printBudget(importedAccount, p, 3);
    }

    private static void insertDefaultCurrencyUnit() {
        CurrencyUnitService cuService = Services.getInstance().getCurrencyUnitService();
        Set<Currency> availableCurrencies = Currency.getAvailableCurrencies();
        availableCurrencies.stream().forEach((currency) -> {
            CurrencyUnitDO currencyUnit = new CurrencyUnitDO(
                    currency.getCurrencyCode(),
                    currency.getDisplayName(),
                    currency.getSymbol(),
                    "Currency",
                    currency.getDefaultFractionDigits());
//            cuService.save(currencyUnit);
        });
    }
    
    private static void readCurrencies() {
        CurrencyUnitService cuService = Services.getInstance().getCurrencyUnitService();
        
//        CurrencyUnitDO cu2 = new CurrencyUnitDO();
//        cu2.setDescription("%Dollar%");
//        cu2.setCode("%B%");
//        cu2.setProvider("%Cur%c_");
//        List<CurrencyUnitDO> allCurrencies2 = cuService.findCurrencyUnitLike(cu2);
//        allCurrencies2.stream().forEach( (cu) -> { 
//            System.out.println("Currency Unit: " + cu);
//        });
//        
        
     
        List<CurrencyUnitDO> allCurrencies = cuService. getCurrencyUnits();        
        allCurrencies.stream().forEach( (cu) -> { 
            System.out.println(cu);
        });
        
        System.out.println(cuService.findCurrencyUnitByID(159L));
     
        if(true) return;

        System.out.println("----------------------------------------");
//        cuService.delete(261L);

//        cuService.findByProvider("Reward Points").stream().forEach( (cu) -> { 
//            System.out.println(cu);
//        });
        
//        System.out.println("------------------------------------------");
//        cuService.getProviders().stream().forEach( (provider) -> {
//            System.out.println(provider);
//        });
//        
//        System.out.println("------------------------------------------");
//        System.out.println(cuService.findByCodeAndProvider(
//                "INR", "Currency"));
//        
//        System.out.println("------------------------------------------");
//        cuService.findByCode("SAR").stream().forEach( (currency) -> {
//            System.out.println(currency);
//            currency.setFractionDigits(3);
//            cuService.save(currency);
//        });
//        
//        
    }

    private static void deleteCurrency() {
        
    }   

    private static void setupAccounts(AccountService accountService) {
        CurrencyUnitService cuService = Services.getInstance().getCurrencyUnitService();
        
//        CurrencyUnitDO USD = cuService.findCurrencyUnitsBySymbol("USD").get(0);
        CurrencyUnitDO CAD = cuService.findCurrencyUnitByID(222L);
        CurrencyUnitDO SAR = cuService.findCurrencyUnitByID(159L);
        
        Account root = new Account("Root", "The ultimate parent of all account", 
                SAR, "", AccountType.ROOT, BigDecimal.ZERO);
        accountService.saveAccount(root);
        
        //Assets
        Account assets = new Account("Assets", "Assets Account", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        assets.setParent(root);
        accountService.saveAccount(assets);
        
        Account sabb = new Account("SABB", "SABB Bank Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        sabb.setParent(assets);
        accountService.saveAccount(sabb);
        
        Account spring = new Account("Spring", "Main Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        spring.setParent(sabb);
        accountService.saveAccount(spring);
        
        Account springChecking = new Account("Checking", "SABB Bank Accounts", 
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        springChecking.setParent(spring);
        accountService.saveAccount(springChecking);
        
        Account springCash = new Account("Cash", "SABB Bank Accounts", 
                SAR, "", AccountType.CASH, BigDecimal.ZERO);
        springCash.setParent(spring);
        accountService.saveAccount(springCash);
                
        Account rainyDays = new Account("Rainy Days", "Irregular Expenses",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        rainyDays.setParent(sabb);
        accountService.saveAccount(rainyDays);
        
        // |__ Mufeed
        Account home      = new Account("Home", "Regular Expenses",
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        home.setParent(sabb);
        accountService.saveAccount(home);

        Account homeChecking      = new Account("Checking", "Regular Expenses",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        homeChecking.setParent(home);
        accountService.saveAccount(homeChecking);
        
        Account homeCash      = new Account("Cash", "Regular Expenses",
                SAR, "", AccountType.CASH, BigDecimal.ZERO);
        homeCash.setParent(home);
        accountService.saveAccount(homeCash);
        
        // |__ Sea
        Account sea      = new Account("Sea", "Sea Saving Account",
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        sea.setParent(sabb);
        accountService.saveAccount(sea);
        
        Account seaCredit      = new Account("Credit Payback", 
                "Credit Card Payback Saving",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        seaCredit.setParent(sea);
        accountService.saveAccount(seaCredit);
        
        // |__ Mufeed
        Account mufeed      = new Account("Mufeed", "Mufeed's Account",
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        mufeed.setParent(sabb);
        accountService.saveAccount(mufeed);
                
        Account mufeedChecking  = new Account("Checking", "Mufeed's Checking Account",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        mufeedChecking.setParent(mufeed);
        accountService.saveAccount(mufeedChecking);
        
        Account mufeedCash  = new Account("Cash", "Mufeed's Cash Account",
                SAR, "", AccountType.CASH, BigDecimal.ZERO);
        mufeedCash.setParent(mufeed);
        accountService.saveAccount(mufeedCash);
                
        Account ahmad      = new Account("Ahmad", "Ahmad's Saving",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        ahmad.setParent(sabb);
        accountService.saveAccount(ahmad);
        
        Account znz      = new Account("ZnZ", "Zahraa and Zainb's Saving",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        znz.setParent(sabb);
        accountService.saveAccount(znz);

        Account bigSaving      = new Account("Big Savings", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        bigSaving.setParent(sabb);
        accountService.saveAccount(bigSaving);
        
        // |__ Saudi Aramco
        Account sa = new Account("Saudi Aramco", "", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        sa.setParent(assets);
        accountService.saveAccount(sa);
        
        Account thriftPlanSaving      = new Account("Thrift Plan Saving", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        thriftPlanSaving.setParent(sa);
        accountService.saveAccount(thriftPlanSaving);
        
        // |__ NCB
        Account ncb = new Account("NCB Bank", "NCB Bank Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        ncb.setParent(assets);
        accountService.saveAccount(ncb);
        
        Account ncbChecking  = new Account("Checking", "NCB Checking Account",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        ncbChecking.setParent(ncb);
        accountService.saveAccount(ncbChecking);
        
        // |__ Samba
        Account samba = new Account("Samba Bank", "Samba Bank Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        samba.setParent(assets);
        accountService.saveAccount(samba);
        
        Account sambaChecking  = new Account("Checking", "Samba Checking Account",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        sambaChecking.setParent(samba);
        accountService.saveAccount(sambaChecking);
        
        // |__ Investment
        Account investment = new Account("Investments", "", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        investment.setParent(assets);
        accountService.saveAccount(investment);
        
        Account stocks  = new Account("Stocks", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        stocks.setParent(investment);
        accountService.saveAccount(stocks);
        
        
        // |__ Others
        Account others = new Account("Others", "", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        others.setParent(assets);
        accountService.saveAccount(others);
        
//        Account balancer  = new Account("Balancer", "Balancing CAD to SAR",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        balancer.setParent(others);
//        accountService.saveAccount(balancer);
//        
//        Account homeCredit  = new Account("Home Credit", "Credit for Home Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        homeCredit.setParent(others);
//        accountService.saveAccount(homeCredit);
//        
//        Account lendBorrow  = new Account("Lend-Borrow", "Lend Borrow Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        lendBorrow.setParent(others);
//        accountService.saveAccount(lendBorrow);
//        
//        Account mars  = new Account("Mars", "Mufeed's Credit Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        mars.setParent(others);
//        accountService.saveAccount(mars);
   
        Account wpa306_CAD  = new Account("WPA-306 (CAD)", "",
                CAD, "", AccountType.BANK, BigDecimal.ZERO);
        wpa306_CAD.setParent(others);
        accountService.saveAccount(wpa306_CAD);
        
        Account wpa306Buffer_CAD  = new Account("WPA-306 Buffer (CAD)", "",
                CAD, "", AccountType.BANK, BigDecimal.ZERO);
        wpa306Buffer_CAD.setParent(others);
        accountService.saveAccount(wpa306Buffer_CAD);
        
        Account wpa306Buffer_SAR  = new Account("WPA-306 Buffer (SAR)", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        wpa306Buffer_SAR.setParent(others);
        accountService.saveAccount(wpa306Buffer_SAR);
  
        
        //liability        
        Account liability = new Account("Liability", "Liability Account", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        liability.setParent(root);
        accountService.saveAccount(liability);
        
        // |__ Credit Cards
        Account creditCards = new Account("Credit Cards", "Credit Cards Account", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        creditCards.setParent(liability);
        accountService.saveAccount(creditCards);
               
        CreditAccount visa = new CreditAccount(new BigDecimal(47500), 15, "SABB VISA", 
                "SABB VISA Card", SAR, "", BigDecimal.ZERO);
        visa.setParent(creditCards);
        accountService.saveAccount(visa);
        
        CreditAccount mastercard = new CreditAccount(new BigDecimal(18000), 10, "SABB MasterCard", 
                "SABB Mastercard", SAR, "", BigDecimal.ZERO);
        mastercard.setParent(creditCards);
        accountService.saveAccount(mastercard);

        // |__ Loans
        Account loans = new Account("Loans", "Loans", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        loans.setParent(liability);
        accountService.saveAccount(loans);
        
        Loan sabbLoan  = new Loan("SABB", "", SAR, "", BigDecimal.ZERO);
        sabbLoan.setParent(loans);
        accountService.saveAccount(sabbLoan);
        
        Loan srtpLoan  = new Loan("SRTP", "", SAR, "", BigDecimal.ZERO);
        srtpLoan.setParent(loans);
        accountService.saveAccount(srtpLoan);
        
        // |__ Equity
        Account equity = new Account("Equity", "Equity", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        equity.setParent(root);
        accountService.saveAccount(equity);
        
        Account openingBalances  = new Account("Opening Balances", "",
                SAR, "", AccountType.EQUITY, BigDecimal.ZERO);
        openingBalances.setParent(equity);
        accountService.saveAccount(openingBalances);
        
        // |__ Income
        Account income = new Account("Income", "Income", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        income.setParent(root);
        accountService.saveAccount(income);
        
        Account salary  = new Account("Salary", "",
                SAR, "", AccountType.INCOME, BigDecimal.ZERO);
        salary.setParent(income);
        accountService.saveAccount(salary);
        
        Account otherIncome  = new Account("Other Income", "",
                SAR, "", AccountType.INCOME, BigDecimal.ZERO);
        otherIncome.setParent(income);
        accountService.saveAccount(otherIncome);
        
        // |__ Expenses
        Account expenses = new Account("Expenses", "Expenses", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        expenses.setParent(root);
        accountService.saveAccount(expenses);
    }

    private static void print(Account account, int maxLevel) {
        System.out.println("Account                              Amount ");
        System.out.println("=================                    =======");
        print(account, "", maxLevel);
    }
    
    private final static String SPACE = "  "; 
    private static void print(Account account, final String space, int maxLevel) {
        if(space.length() > maxLevel * SPACE.length()) {
            return;
        }
        System.out.format("%-33s %3s %10.2f     %-50s %-30s %n", 
                fix(space + account.getName(), 33), 
                account.getCurrency().getCode(),
                account.getBalanceAmount(), 
                fix(account.getQualifiedName(), 50), 
                account.getType());
        
        account.getChildren().stream().forEach((a) -> {
            print(a, space +  "  ", maxLevel);
        });
    }

    
    ///////////////////////////////////////////////////////////////////////////
    private static void printBudget(Account account, Period p, int maxLevel) {
        System.out.format("%-33s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s  %n", 
            "Account",
                fix(Month.of(p.previousMonth().previousMonth().previousMonth().previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.previousMonth().previousMonth().previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.previousMonth().previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.getNumber()).toString(), 8),
                fix(Month.of(p.nextMonth().getNumber()).toString(), 8),
                fix(Month.of(p.nextMonth().nextMonth().getNumber()).toString(), 8),
                fix(Month.of(p.nextMonth().nextMonth().nextMonth().getNumber()).toString(), 8)
                );
        System.out.println("=================               ");
        printBudget(account, p, "", maxLevel);
    }
    
    private static void printBudget(Account account, Period p,final String space, int maxLevel) {
        if(space.length() > maxLevel * SPACE.length()) {
            return;
        }
        System.out.format("%-33s %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %n", 
                fix(space + account.getName(), 33), 
                account.getTransactions(p.previousMonth().previousMonth().previousMonth().previousMonth()).getBalance(), 
                account.getTransactions(p.previousMonth().previousMonth().previousMonth()).getBalance(), 
                account.getTransactions(p.previousMonth().previousMonth()).getBalance(), 
                account.getTransactions(p.previousMonth()).getBalance(),
                account.getTransactions(p).getBalance(), 
                account.getTransactions(p.nextMonth()).getBalance(),
                account.getTransactions(p.nextMonth().nextMonth()).getBalance(),
                account.getTransactions(p.nextMonth().nextMonth().nextMonth()).getBalance()
                );
        
        account.getChildren().stream().forEach((a) -> {
            printBudget(a, p, space +  "  ", maxLevel);
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    
    private static ShadowAccount importTransaction(Account root) throws IOException {
        final Map<String, String[]> am = new HashMap<>();
        
        am.put("Ahmad",                  new String[]{"Assets:SABB:Ahmad", "SAR"});
        am.put("Balancer",               new String[]{"Assets:Others:Balancer", "SAR"});
        am.put("Big Savings",            new String[]{"Assets:SABB:Big Savings", "SAR"});
        am.put("Cash",                   new String[]{"Assets:SABB:Home:Cash", "SAR"});
        am.put("Home Credit",            new String[]{"Assets:Others:Home Credit", "SAR"});
        am.put("Home",                   new String[]{"Assets:SABB:Home:Checking", "SAR"});
        am.put("LCash",                  new String[]{"Assets:SABB:Spring:Cash", "SAR"});
        am.put("Lend-Borrow",            new String[]{"Assets:Others:Lend-Borrow", "SAR"});
        am.put("MCash",                  new String[]{"Assets:SABB:Mufeed:Cash", "SAR"});
        am.put("Mars",                   new String[]{"Assets:Others:Mars", "SAR"});
        am.put("Mufeed",                 new String[]{"Assets:SABB:Mufeed:Checking", "SAR"});
        am.put("NCB",                    new String[]{"Assets:NCB Bank:Checking", "SAR"});
        am.put("Portfoilo",              new String[]{"Assets:Investments:Stocks", "SAR"});
        am.put("Rainy Days",             new String[]{"Assets:SABB:Rainy Days", "SAR"});
        am.put("SABB Loan",              new String[]{"Liability:Loans:SABB", "SAR"});
        am.put("SABB MasterCard",        new String[]{"Liability:Credit Cards:SABB MasterCard", "SAR"});
        am.put("SABB VISA",              new String[]{"Liability:Credit Cards:SABB VISA", "SAR"});
        am.put("SRTP Loan",              new String[]{"Liability:Loans:SRTP", "SAR"});
        am.put("Samba",                  new String[]{"Assets:Samba Bank:Checking", "SAR"});
        am.put("Sea",                    new String[]{"Assets:SABB:Sea:Credit Payback", "SAR"});
        am.put("Spring",                 new String[]{"Assets:SABB:Spring:Checking", "SAR"});
        am.put("Thrift Plan Loan (Sep)", new String[]{"Assets:Saudi Aramco:Thrift Plan Saving", "SAR"});
        am.put("Thrift Plan Loan",       new String[]{"Assets:Saudi Aramco:Thrift Plan Saving", "SAR"});
        am.put("Thrift Plan Saving",     new String[]{"Assets:Saudi Aramco:Thrift Plan Saving", "SAR"});
        am.put("WPA-306 (CAD)",          new String[]{"Assets:Others:WPA-306 (CAD)", "SAR"});
        am.put("WPA-306 Buffer (CAD)",   new String[]{"Assets:Others:WPA-306 Buffer (CAD)", "SAR"});
        am.put("WPA-306 Buffer (SAR)",   new String[]{"Assets:Others:WPA-306 Buffer (SAR)", "SAR"});
        am.put("ZnZ",                    new String[]{"Assets:SABB:ZnZ", "SAR"});
        
        final Map<String, String> em = new HashMap<>();
        em.put("Salary Deductions:Thrift Plan Earnings", "Assets:Saudi Aramco:Thrift Plan Earnings");
        
        File qifDir = new File(Utopia.getInstance().getProperty(Utopia.Key.DROPBOX_PATH)
            +  "/YNAB/Exports/01/");

        YNABImport yImport = new YNABImport(qifDir, am, em, root);
        
        SalaryTGM salaryTGM       = new SalaryTGM(yImport.getShadowTree());
        yImport.addTransactionGroupManipulator(salaryTGM);
        
        StartingBalanceTGM  sbTGB = new StartingBalanceTGM(yImport.getShadowTree());
        yImport.addTransactionGroupManipulator(sbTGB);
        
        SplitBalanceTGM splitTGM  = new SplitBalanceTGM();
        yImport.addTransactionGroupManipulator(splitTGM);
        
        TuningTGM tuningTGM  = new TuningTGM(yImport.getShadowTree());
        yImport.addTransactionGroupManipulator(tuningTGM);
        
        return yImport.importTransaction();
    }
    
    public static void printDetail(Account account, boolean monthly) {
        System.out.println("\n\n");
        System.out.println("**************************");
        System.out.println("* " + account.getName());
        System.out.println("**************************");
        
        BigDecimal total = BigDecimal.ZERO;
        
        if(monthly) {
            List<Period> periods = account.getTransactionMgr().getPeriods();
            for(Period period : periods ) {
                System.out.println("## " + period.getStartDate().getTime() 
                        + " - " + period.getEndDate().getTime());
                TransactionRange tpr = account.getTransactionMgr().getTransactionRanage(period);
                total = printAccountTransaction(account.getName(), tpr.getTransactions(), total);
                System.out.println("\t\t Cum. Balance: " + tpr.getCumulativeBalance() 
                        + "\t\t\t\t\t\t Balance: " + tpr.getBalance());

            }
        } else {
                printAccountTransaction(account.getName(), 
                    account.getTransactions(), total);
        }
        
        account.getChildren().stream().forEach((childAccount) -> {
            printDetail(childAccount, monthly);
        });
    }
    
    private static BigDecimal printAccountTransaction(String accountName, 
            List <Transaction> transactions, BigDecimal total) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat sdfShort = new SimpleDateFormat("dd/MM");

        String dFormat = " %-10s  %5d %10s %-6s %-2s %-20s %-50s %10.2f %13.2f %n";
        for (Transaction t : transactions) {
            total = total.add(t.getAmount());
            System.out.format(dFormat,
                    fix(accountName, 12),
                    (t.getId()==null?-1L:t.getId()),
                    sdf.format(t.getDate().getTime()),
                    sdfShort.format(t.getEffectiveDate().getTime()),
                    t.getType().getDiscriminator(),
                    fix(t.getPayee().getName(), 20),
                    fix(t.getMemo(), 50),
                    t.getAmount(),
                    total);
        }
        return total;
    }
    
    public static String fix(String str, int maxLen) {
        if(str == null) return "nnnn";
        String out = isProbablyArabic(str)? "********": str;
        return out.length() > maxLen? out.substring(0, maxLen) : out;
    }
    
    public static boolean isProbablyArabic(String s) {
        String arabicLetters = "ذ د ج ح خ ه ع غ إ ف ق ث ص ض ط ك م ن ت ا ل أ  ب ي س ش ظ ز و ة ى لا ر ؤ ء ئ";
        for (int i = 0; i < s.length();) {
            int c = s.codePointAt(i);
            if (c >= 0x0600 && c <= 0x06E0) {
                return true;
            } else if (arabicLetters.contains(s.charAt(i) + "") && s.charAt(i) != ' ' ) {
                return true;
            }
            i += Character.charCount(c);
        }
        return false;
    }

   
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/TagService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface TagService {
    //**************************************************************************
    // Tag Service
    //**************************************************************************

    public List<Tag> getTags();

    public List<Tag> findTags(Tag tag);

    public List<Tag> findTagsLike(Tag tag);

    public Tag findTagByID(Long id);

    public List<Tag> findTagsByName(String name);

    public Tag saveTag(Tag tag);

    public void deleteTag(Long id);

    //**************************************************************************
    // TagGroup Service
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();

    public List<String> getTagGroupNamesList();

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);

    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);

    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);

    public TagGroup saveTagGroup(TagGroup tagGroup);

    public void deleteTagGroup(Long id);

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/AccountService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Account;
import java.util.List;

/**
 * Accounts are read and cached 
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountService {

    public Account find(String name);    
    public Account findByQualifiedName(String name);
    
    public void buildCache();

    
    //**************************************************************************
    // Account Service
    //**************************************************************************

    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public List<Account> findAccountsByName(String name);

    public List<Account> findAccountsByParentID(Long parentID);

    public Account findAccountByQualifiedName(String qualifiedName);

    public Account saveAccount(Account account);

    public void deleteAccount(Long id);


}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/CurrencyUnitService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.CurrencyUnitDO;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface CurrencyUnitService {

    public List<CurrencyUnitDO> getCurrencyUnits();

    public List<String> getCurrencyUnitCodesList();

    public List<String> getCurrencyUnitProvidersList();

    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit);

    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit);

    public CurrencyUnitDO findCurrencyUnitByID(Long id);

    public List<CurrencyUnitDO> findCurrencyUnitsByDescription(String description);

    public List<CurrencyUnitDO> findCurrencyUnitsBySymbol(String symbol);

    public List<CurrencyUnitDO> findCurrencyUnitsByProvider(String provider);

    public CurrencyUnitDO saveCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void deleteCurrencyUnit(Long id);
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/mybatis/CurrencyUnitServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.CurrencyUnitDO;
import com.almatarm.wimm.persistence.CurrencyUnitMapper;
import com.almatarm.wimm.service.CurrencyUnitService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("currencyUnitService")
@Repository
@Transactional
public class CurrencyUnitServiceImpl implements CurrencyUnitService {
    private final Log log = LogFactory.getLog(CurrencyUnitServiceImpl.class);
        
    @Autowired
    private CurrencyUnitMapper currencyMapper;

    @Override
    public List<CurrencyUnitDO> getCurrencyUnits() {
        return currencyMapper.getCurrencyUnits();
    }

    @Override
    public List<String> getCurrencyUnitCodesList() {
        return currencyMapper.getCurrencyUnitCodesList();
    }

    @Override
    public List<String> getCurrencyUnitProvidersList() {
        return currencyMapper.getCurrencyUnitProvidersList();
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit) {
        return currencyMapper.findCurrencyUnits(currencyUnit);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit) {
        return currencyMapper.findCurrencyUnitsLike(currencyUnit);
    }

    @Override
    public CurrencyUnitDO findCurrencyUnitByID(Long id) {
        return currencyMapper.findCurrencyUnitByID(id);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsByDescription(String description) {
        CurrencyUnitDO currencyUnit = new CurrencyUnitDO();
        currencyUnit.setDescription(description);
        return findCurrencyUnits(currencyUnit);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsBySymbol(String symbol) {
        CurrencyUnitDO currencyUnit = new CurrencyUnitDO();
        currencyUnit.setSymbol(symbol);
        return findCurrencyUnits(currencyUnit);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsByProvider(String provider) {
        CurrencyUnitDO currencyUnit = new CurrencyUnitDO();
        currencyUnit.setProvider(provider);
        return findCurrencyUnits(currencyUnit);
    }

    @Override
    public CurrencyUnitDO saveCurrencyUnit(CurrencyUnitDO currencyUnit) {
        if(currencyUnit.getId() == null) {
            currencyMapper.insertCurrencyUnit(currencyUnit);
        } else {
            currencyMapper.updateCurrencyUnit(currencyUnit);
        }
        return currencyUnit;
    }

    @Override
    public void deleteCurrencyUnit(Long id) {
        currencyMapper.deleteCurrencyUnit(id);
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/mybatis/AccountServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Account;
import com.almatarm.wimm.persistence.AccountMapper;
import com.almatarm.wimm.service.AccountService;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * AccountServiceImpl
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("accountService")
@Repository
@Transactional
public class AccountServiceImpl implements AccountService {
    private final Log log = LogFactory.getLog(AccountServiceImpl.class);

    Map<Long,   Account> accountIdsMap;
    Map<String, Account> qNameMap;
    
    @Override
    public void buildCache() {
        if(true) return;
        System.out.println("buildCache()");
        //Map Account ID --> Account
        accountIdsMap = new HashMap<>();
        List<Account> accounts = getAccounts();
        accounts.stream().forEach((account) -> {
            accountIdsMap.put(account.getId(), account);
        });
        
        //Build Parent Child Rel
        accounts.stream().forEach((account) -> {
            Long parentAccountId  = account.getParentID();
            Account parentAccount = null;
            if(parentAccountId != null && 
                    (parentAccount = accountIdsMap.get(parentAccountId)) != null) {
                account.setParent(parentAccount);
            }
        });
        
        //Build Qualified Name --> Account Map
        qNameMap = new HashMap<>();
        accounts.stream().forEach( (account) -> {
            qNameMap.put(account.getQualifiedName(), account);
            System.out.println(account.getQualifiedName());
        });
        
    }

    @Override
    public Account find(String root) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findByQualifiedName(String qName) {
        return qNameMap.get(qName);
    }

    
    //**************************************************************************
    // Account ServiceImpl
    //**************************************************************************

    @Autowired
    private AccountMapper accountMapper;

    @Override
    public List<Account> getAccounts() {
//        List<Account> result = new ArrayList<>();
//       
//        accountMapper.getAccounts().forEach( (Account account) -> {
//            result.add(AccountProxy.create(account));
//        });
//        
//        return result;
        return accountMapper.getAccounts();
    }

    @Override
    public List<Account> findAccounts(Account account) {
        return accountMapper.findAccounts(account);
    }

    @Override
    public List<Account> findAccountsLike(Account account) {
        return accountMapper.findAccountsLike(account);
    }

    @Override
    public Account findAccountByID(Long id) {
        System.out.println(AccountServiceImpl.class.getName() + ":findAccountByID:" + id );
        return accountMapper.findAccountByID(id);
    }

    @Override
    public List<Account> findAccountsByName(String name) {
        Account account = new Account();
        account.setName(name);
        return findAccounts(account);
    }

    @Override
    public List<Account> findAccountsByParentID(Long parentID) {
        Account account = new Account();
        account.setParentID(parentID);
        return findAccounts(account);
    }

    @Override
    public Account findAccountByQualifiedName(String qualifiedName) {
        return accountMapper.findAccountByQualifiedName(qualifiedName);
    }

    @Override
    public Account saveAccount(Account account) {
        if(account.getId() == null) {
            accountMapper.insertAccount(account);
        } else {
            accountMapper.updateAccount(account);
        }
        return account;
    }

    @Override
    public void deleteAccount(Long id) {
        accountMapper.deleteAccount(id);
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/mybatis/PayeeServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Payee;
import com.almatarm.wimm.persistence.PayeeMapper;
import com.almatarm.wimm.service.PayeeService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("payeeService")
@Repository
@Transactional
public class PayeeServiceImpl implements PayeeService {
    private final Log log = LogFactory.getLog(PayeeServiceImpl.class);

    @Autowired
    private PayeeMapper payeeMapper;

    @Override
    public List<Payee> getPayees() {
        return payeeMapper.getPayees();
    }

    @Override
    public List<String> getPayeeNamesList() {
        return payeeMapper.getPayeeNamesList();
    }

    @Override
    public List<Payee> findPayees(Payee payee) {
        return payeeMapper.findPayees(payee);
    }

    @Override
    public List<Payee> findPayeesLike(Payee payee) {
        return payeeMapper.findPayeesLike(payee);
    }

    @Override
    public Payee findPayeeByID(Long id) {
        return payeeMapper.findPayeeByID(id);
    }

    @Override
    public Payee findPayeeByName(String name) {
        return payeeMapper.findPayeeByName(name);
    }

    @Override
    public Payee savePayee(Payee payee) {
        if(payee.getId() == null) {
            payeeMapper.insertPayee(payee);
        } else {
            payeeMapper.updatePayee(payee);
        }
        return payee;
    }

    @Override
    public void deletePayee(Long id) {
        payeeMapper.deletePayee(id);
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/mybatis/StoreServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.TagGroup;
import com.almatarm.wimm.persistence.PayeeMapper;
import com.almatarm.wimm.persistence.StoreMapper;
import com.almatarm.wimm.service.StoreService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("storeService")
@Repository
@Transactional
public class StoreServiceImpl implements StoreService {
    private final Log log = LogFactory.getLog(StoreServiceImpl.class);

    @Autowired
    private PayeeMapper payeeMapper;

    @Override
    public List<Payee> getPayees() {
        return payeeMapper.getPayees();
    }

    @Override
    public Payee findPayeeByID(Long id) {
        return payeeMapper.findPayeeByID(id);
    }

    @Override
    public Payee findPayeeByName(String name) {
        return payeeMapper.findPayeeByName(name);
    }

    @Override
    public List<Payee> findPayeeByNameRegEx(String name) {
        return null;//payeeMapper.findPayeeByNameRegEx(name);
    }

    @Override
    public Payee savePayee(Payee payee) {
        if(payee.getId() == null) {
            payeeMapper.insertPayee(payee);
        } else {
            payeeMapper.updatePayee(payee);
        }
        return payee;
    }

    @Override
    public void deletePayee(Long id) {
        payeeMapper.deletePayee(id);
    }

    //**************************************************************************
    // TagGroup ServiceImpl
    //**************************************************************************

    @Autowired
    private StoreMapper storeMapper;

   
    @Override
    public List<TagGroup> getTagGroups() {
        return storeMapper.getTagGroups();
    }

    @Override
    public List<TagGroup> getTagGroupsWithTags() {
        return storeMapper.getTagGroupsWithTags();
    }

    @Override
    public List<TagGroup> findTagGroups(TagGroup tagGroup) {
        return storeMapper.findTagGroups(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup) {
        return storeMapper.findTagGroupsWithTags(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup) {
        return storeMapper.findTagGroupsLike(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup) {
        return storeMapper.findTagGroupsWithTagsLike(tagGroup);
    }
      
    @Override
    public TagGroup findTagGroupByID(Long id) {
        return storeMapper.findTagGroupByID(id);
    }

    @Override
    public TagGroup findTagGroupWithTagsByID(Long id) {
        return storeMapper.findTagGroupWithTagsByID(id);
    }

    @Override
    public TagGroup findTagGroupByName(String name) {
        return storeMapper.findTagGroupByName(name);
    }

    @Override
    public TagGroup findTagGroupWithTagsByName(String name) {
        return storeMapper.findTagGroupWithTagsByName(name);
    }


}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/mybatis/Store.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Account;
import com.almatarm.wimm.service.AccountService;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author almatarm
 */
public class Store implements AccountService {
    Map<Long,   Account> accountIdsMap;
    Map<String, Account> qNameMap;
    
    AccountService accountService;

    public Store(AccountService accountService) {
        this.accountService = accountService;
        buildCache();
    }
    
    @Override
    public void buildCache() {
        System.out.println("buildCache()");
        //Map Account ID --> Account
        accountIdsMap = new HashMap<>();
        List<Account> accounts = getAccounts();
        accounts.stream().forEach((account) -> {
            accountIdsMap.put(account.getId(), account);
        });
        
        //Build Parent Child Rel
        accounts.stream().forEach((account) -> {
            Long parentAccountId  = account.getParentID();
            Account parentAccount = null;
            if(parentAccountId != null && 
                    (parentAccount = accountIdsMap.get(parentAccountId)) != null) {
                account.setParent(parentAccount);
            }
        });
        
        //Build Qualified Name --> Account Map
        qNameMap = new HashMap<>();
        accounts.stream().forEach( (account) -> {
            qNameMap.put(account.getQualifiedName(), account);
            System.out.println(account.getQualifiedName());
        });
        
    }


    @Override
    public Account find(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findByQualifiedName(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    

    @Override
    public List<Account> getAccounts() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccounts(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsLike(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findAccountByID(Long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsByName(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsByParentID(Long parentID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findAccountByQualifiedName(String qualifiedName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account saveAccount(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void deleteAccount(Long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/mybatis/TagServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import com.almatarm.wimm.persistence.TagMapper;
import com.almatarm.wimm.service.TagService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("tagService")
@Repository
@Transactional
public class TagServiceImpl implements TagService {
    private final Log log = LogFactory.getLog(TagServiceImpl.class);

    
    //**************************************************************************
    // Tag ServiceImpl
    //**************************************************************************

    @Autowired
    private TagMapper tagMapper;

    @Override
    public List<Tag> getTags() {
        return tagMapper.getTags();
    }

    @Override
    public List<Tag> findTags(Tag tag) {
        return tagMapper.findTags(tag);
    }

    @Override
    public List<Tag> findTagsLike(Tag tag) {
        return tagMapper.findTagsLike(tag);
    }

    @Override
    public Tag findTagByID(Long id) {
        return tagMapper.findTagByID(id);
    }

    @Override
    public List<Tag> findTagsByName(String name) {
        Tag tag = new Tag();
        tag.setName(name);
        return findTags(tag);
    }

    @Override
    public Tag saveTag(Tag tag) {
        if(tag.getId() == null) {
            tagMapper.insertTag(tag);
        } else {
            tagMapper.updateTag(tag);
        }
        return tag;
    }

    @Override
    public void deleteTag(Long id) {
        tagMapper.deleteTag(id);
    }
    
    //**************************************************************************
    // TagGroup ServiceImpl
    //**************************************************************************

    @Override
    public List<TagGroup> getTagGroups() {
        return tagMapper.getTagGroups();
    }

    @Override
    public List<TagGroup> getTagGroupsWithTags() {
        List<TagGroup> tagGroups = tagMapper.getTagGroupsWithTags();
        for(TagGroup tagGroup : tagGroups) {
            updateTagGroupTags(tagGroup);
        }
        return tagGroups;
    }

    private void updateTagGroupTags(TagGroup tagGroup) {
        for(Tag tag : tagGroup.getTags()) {
            tag.setTagGroup(tagGroup);
        }
    }

    @Override
    public List<String> getTagGroupNamesList() {
        return tagMapper.getTagGroupNamesList();
    }

    @Override
    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup) {
        return tagMapper.findTagGroupsLike(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup) {
        List<TagGroup> tagGroups = tagMapper.findTagGroupsWithTagsLike(tagGroup);
        for(TagGroup aTagGroup : tagGroups) {
            updateTagGroupTags(aTagGroup);
        }
        return tagGroups;
    }

    @Override
    public TagGroup findTagGroupByID(Long id) {
        return tagMapper.findTagGroupByID(id);
    }

    @Override
    public TagGroup findTagGroupWithTagsByID(Long id) {
        TagGroup tagGroup = tagMapper.findTagGroupWithTagsByID(id);
        updateTagGroupTags(tagGroup);
        return tagGroup;
    }

    @Override
    public TagGroup findTagGroupByName(String name) {
        return tagMapper.findTagGroupByName(name);
    }

    @Override
    public TagGroup findTagGroupWithTagsByName(String name) {
        TagGroup tagGroup = tagMapper.findTagGroupWithTagsByName(name);
        updateTagGroupTags(tagGroup);
        return tagGroup;
    }

    @Override
    public TagGroup saveTagGroup(TagGroup tagGroup) {
        if(tagGroup.getId() == null) {
            tagMapper.insertTagGroup(tagGroup);
        } else {
            tagMapper.updateTagGroup(tagGroup);
        }
        return tagGroup;
    }

    @Override
    public void deleteTagGroup(Long id) {
        tagMapper.deleteTagGroup(id);
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/StoreService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface StoreService {
    
    public List<Payee> getPayees();
    
    public Payee findPayeeByID(Long id);
    
    public Payee findPayeeByName(String name);
    
    public List<Payee> findPayeeByNameRegEx(String name);
    
    public Payee savePayee(Payee payee);
    
    public void deletePayee(Long id);
 
    //**************************************************************************
    // TagGroup Service
    //**************************************************************************

    public List<TagGroup> getTagGroups();
    
    public List<TagGroup> getTagGroupsWithTags();

    public List<TagGroup> findTagGroups(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);
     
    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);
    
    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/service/PayeeService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Payee;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface PayeeService {
    public List<Payee> getPayees();

    public List<String> getPayeeNamesList();

    public List<Payee> findPayees(Payee payee);

    public List<Payee> findPayeesLike(Payee payee);

    public Payee findPayeeByID(Long id);

    public Payee findPayeeByName(String name);

    public Payee savePayee(Payee payee);

    public void deletePayee(Long id);
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/manipulator/OrignalAmountTGM.java
package com.almatarm.wimm.importing.manipulator;



/**
 *
 * @author almatarm
 */
public class OrignalAmountTGM implements TransactionGroupManipulator {

    @Override
    public void manipulate(TransactionGroup transGroup) {
        transGroup.getTransactions().stream().forEach((transaction) -> {
            //TODO from memo of each transaction, get the origon amount if exist
        });
    }
    
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/manipulator/TuningTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.moneyparser.manipulator.TransactionGroupManipulator;

/**
 *
 * @author almatarm
 */
public class TuningTGM implements TransactionGroupManipulator {
    ShadowTree shadowTree;

    public TuningTGM(ShadowTree shadowTree) {
        this.shadowTree = shadowTree;
    }
    
    @Override
    public void manipulate(TransactionGroup transGroup) {
        transGroup.getTransactions().stream().forEach((transaction) -> { 
            extractThriftPlanEarnings(transaction);
            moveLendBorrowExpensesToAssetsMoneyOwnedToYou(transaction);
        });
    }

    private void moveLendBorrowExpensesToAssetsMoneyOwnedToYou(Transaction transaction) {
        if (transaction.getAccount().getQualifiedName().contains(
                "Lend/Borrow (B)")) {
            transaction.setAccount(shadowTree.getOrCreateAccount(
                    transaction.getAccount().getQualifiedName().replace(
                            "Expenses:Lend/Borrow (B)",
                            "Assets:Money owed to you")));
        }
    }

    public void extractThriftPlanEarnings(Transaction transaction) {
        if(transaction.getAccount().getQualifiedName().equals(
                "Assets:Saudi Aramco:Thrift Plan Saving")
                && (transaction.getMemo().equals("Earnings on Regular Savings") ||
                transaction.getMemo().equals("Earning of Regular Savings"))) {
            transaction.setAccount(shadowTree.getOrCreateAccount(
                    "Assets:Saudi Aramco:Thrift Plan Earnings"));
        }
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/manipulator/StartingBalanceTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.moneyparser.manipulator.TransactionGroupManipulator;


/**
 *
 * @author almatarm
 */
public class StartingBalanceTGM implements TransactionGroupManipulator {
    ShadowTree shadowTree;

    public StartingBalanceTGM(ShadowTree shadowTree) {
        this.shadowTree = shadowTree;
    }
    
    @Override
    public void manipulate(TransactionGroup transGroup) {
         if(!transGroup.getTransactions().isEmpty() 
                && transGroup.getTransactions().get(0).getPayee().getName()
                        .equals("Starting Balance")
                && transGroup.getTransactions().get(1).getAccount().
                        getQualifiedName().equals("Income:Other Income")
                 ) {
             
            transGroup.getTransactions().get(1).setAccount(
                    shadowTree.getOrCreateAccount("Equity:Opening Balances"));
       }
    }
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/manipulator/SalaryTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.moneyparser.manipulator.TransactionGroupManipulator;
import com.almatarm.money.importing.ShadowTree;

/**
 *
 * @author almatarm
 */
public class SalaryTGM implements TransactionGroupManipulator {
    ShadowTree shadowTree;

    public SalaryTGM(ShadowTree shadowTree) {
        this.shadowTree = shadowTree;
    }
    
    @Override
    public void manipulate(TransactionGroup transGroup) {
        if(!transGroup.getTransactions().isEmpty() 
                && transGroup.getTransactions().get(0).getMemo().equals("Base Salary")
                && transGroup.getTransactions().get(1).getAccount().
                        getQualifiedName().equals("Income:Other Income")) {
            
            transGroup.getTransactions().get(1).setAccount(
                    shadowTree.getOrCreateAccount("Income:Salary"));
        
        }
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/manipulator/SplitBalanceTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.moneyparser.manipulator.TransactionGroupManipulator;
import java.math.BigDecimal;

/**
 *
 * @author almatarm
 */
public class SplitBalanceTGM implements TransactionGroupManipulator {

    @Override
    public void manipulate(TransactionGroup transGroup) {
        if(transGroup.getBalance().compareTo(BigDecimal.ZERO) != 0) {
            transGroup.getTransactions().stream().forEach((t) -> {
                if(t.getAmount().compareTo(BigDecimal.ZERO) == 0) {
                    t.setAmount(transGroup.getBalance().negate());
                }
            });
        }
    }
    
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/qif/QIFTransaction.java
package com.almatarm.wimm.importing.qif;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class QIFTransaction {
    Currency currency;
    List<String> types = new ArrayList<>();
    List<String> values = new ArrayList<>();

    QIFTransaction(List<String> types, List<String> values) {
        this(types, values, Currency.getInstance("USD"));
    }
    
    QIFTransaction(List<String> types, List<String> values, Currency currency) {
        this.types    = types;
        this.values   = values;
        this.currency = currency;
        
        for(int i = 0; i < types.size(); i++) {
            String type = types.get(i);
            switch (type) {
                case "D":
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    try {
                        date.setTime(sdf.parse(values.get(i)));
                    } catch (ParseException ex) {
                        Logger.getLogger(QIFTransaction.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "T":
                    amount = new BigDecimal(values.get(i).replaceAll("[,$]", ""));
                    break;
                case "P":
                    payee = values.get(i);
                    break;
                case "C":
                    cleared = values.get(i).equalsIgnoreCase("c");
                    break;
                case "N":
                    checkNumber = values.get(i);
                    break;
                case "A":
                    if(address.isEmpty() && !values.get(i).isEmpty()) {
                        address += values.get(i);
                    } else if(!address.isEmpty() && !values.get(i).isEmpty()) {
                        address += "\n" + values.get(i);
                    }
                    break;
                case "M":
                    memo = values.get(i);
                    break;
                case "L":
                    category = values.get(i);
                    break;
                case "S":
                    curSplit = new Split();
                    curSplit.category = values.get(i);
                    splits.add(curSplit);
                    break;
                case "E":
                    curSplit.memo = values.get(i);
                    break;
                case "$":
                    curSplit.amount = new BigDecimal(values.get(i).replaceAll("[,$]", ""));
                    break;    
            }
        }
    }
    
    Calendar date = Calendar.getInstance();
    BigDecimal amount  = BigDecimal.ZERO;
    String checkNumber = "";
    String payee       = "";
    String address     = "";
    String memo        = "";
    String category    = "";
    boolean cleared = false;

    List<Split> splits = new ArrayList<>();
    Split curSplit = null;
    
    public List<String> getTypes() {
        return types;
    }

    public Calendar getDate() {
        return date;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public String getCheckNumber() {
        return checkNumber;
    }

    public String getDescription() {
        return payee;
    }

    public String getAddress() {
        return address;
    }

    public String getMemo() {
        return memo;
    }

    public String getCategory() {
        return category;
    }

    public boolean isCleared() {
        return cleared;
    }

    public String getPayee() {
        return payee;
    }

    public void setPayee(String payee) {
        this.payee = payee;
    }

    public boolean isSplit() {
        return !splits.isEmpty();
    }

    public List<Split> getSplits() {
        return splits;
    }
    
    public class Split {
        String category   = "";
        String memo       = "";
        BigDecimal amount = BigDecimal.ZERO;

        public Split() {
        }

        public String getCategory() {
            return category;
        }

        public String getMemo() {
            return memo;
        }

        public BigDecimal getAmount() {
            return amount;
        }

        @Override
        public String toString() {
            return "Split{"  
                + "\n\tcategory=" + category 
                + "\n\tmemo=" + memo 
                + "\n\tamount=" + amount + '}';
        }
        
        
    };

    public Currency getCurrency() {
        return currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @Override
    public String toString() {
        return "QIFTransaction{" 
                + "\ndate=" + date 
                + "\namount=" + amount 
                + "\ncheckNumber=" + checkNumber 
                + "\ndescription=" + payee 
                + "\naddress=" + address 
                + "\nmemo=" + memo 
                + "\ncategory=" + category 
                + "\ncleared=" + cleared 
                + "\nsplits=" + splits + '}';
    }
    
}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/qif/QIFReader.java
package com.almatarm.wimm.importing.qif;

import java.util.*;
import java.io.*;

public class QIFReader {

    BufferedReader qifin;
    String path;
    String AccountType;

    public QIFReader(String path) {
        this.path = path;
    }

    public void open() throws IOException {
        qifin = new BufferedReader(new InputStreamReader(
                new FileInputStream(path), "UTF-8"));
        AccountType = qifin.readLine();
    }

    public QIFTransaction next() throws IOException {
        return readRecord();
    }

    public boolean hasNext() throws IOException {
        return qifin.ready();
    }

    private QIFTransaction readRecord() throws IOException {
        String attr;
        List<String> types = new ArrayList<>();
        List<String> values = new ArrayList<>();
        
        while (qifin.ready()) {
            attr = qifin.readLine();
            String type = attr.substring(0, 1);
            if (type.startsWith(TRANSACTION_BREAK)) {
                break;
            }
            String value = attr.substring(1, attr.length());
            
            types.add(type);
            values.add(value);
        }
        QIFTransaction trans = new QIFTransaction(types, values);
        return trans;
    }
    private static final String TRANSACTION_BREAK = "^";

    public static void main(String args[]) throws IOException {
        QIFReader in = new QIFReader("D:\\Dropbox\\VISA.qif");
        in.open();
        while (in.hasNext()) {
            QIFTransaction trans = in.next();
            System.out.println(trans);
        }
    }

}

*** end *** end ***
***$$$@@@ /wimm2-backup/src/main/java/com/almatarm/wimm/importing/qif/ynab/YNABImport.java
package com.almatarm.wimm.importing.qif.ynab;

import com.almatarm.mff.qif.QIFReader;
import com.almatarm.mff.qif.QIFTransaction;
import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.domain.TransactionStatus;
import com.almatarm.money.domain.TransactionType;
import static com.almatarm.money.domain.TransactionType.Budget;
import static com.almatarm.money.domain.TransactionType.Transfer;
import com.almatarm.money.importing.ShadowAccount;
import com.almatarm.money.importing.ShadowTransaction;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.moneyparser.manipulator.TransactionGroupManipulator;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;



/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class YNABImport {
    /**
     * the folder where YNAB QIF files 
     */
    final File importFolder;
    
    /**
     * A Mapping between YNAB account names and WIMM qualified account names.
     */
    final Map<String, String[]> accountMappings;
    
    final Map<String, String> expensesMappings;
    /**
     * Parsing result
     */
    final Set<ShadowAccount> shadowAccounts = new HashSet<>();
    List<TransactionGroupManipulator> tgManipulators = new ArrayList<>(); 
    
    ShadowTree shadowTree;
    
    List<String> proccessedAccount = new ArrayList<>();
    public YNABImport(File importFolder, Map<String, String[]> accountMappings,
           Map<String, String> expensesMappings, Account root) {
        this.importFolder = importFolder;
        this.accountMappings = accountMappings;
        this.expensesMappings = expensesMappings;
        this.shadowTree = new ShadowTree(root);
    }

    public File getImportFolder() {
        return importFolder;
    }

    public void addTransactionGroupManipulator(TransactionGroupManipulator tgm) {
        tgManipulators.add(tgm);
    }

    public ShadowTree getShadowTree() {
        return shadowTree;
    }
    
    public Map<String, String[]> getAccountMappings() {
        return accountMappings;
    }

    public ShadowAccount importTransaction() throws IOException {
        proccessedAccount.clear();
        
        System.out.println("------------------------------------------------------------------------");
        for(File qifFile : importFolder.listFiles((File dir, String name) -> name.endsWith(".qif"))) {
            if(qifFile.getName().contains("Thrift Plan Loan")
                    || qifFile.getName().contains("Balancer")
                    || qifFile.getName().contains("Home Credit")
                    || qifFile.getName().contains("Mars")
                    || qifFile.getName().contains("Lend-Borrow")
                    || qifFile.getName().contains("WPA-306 (CAD)")
                    || qifFile.getName().contains("WPA-306 Buffer (CAD)")
                    ) 
                continue;
//            if(
//                    qifFile.getName().contains("Mufeed")
//                     qifFile.getName().contains("WPA")
//                    || qifFile.getName().contains("VISA")
//                    || qifFile.getName().contains("MCash")
//                    || qifFile.getName().contains("-Home as")
//                    )
            process(qifFile);
        }
        return shadowTree.getRoot();
    }
    
    private void process(File qifFile) throws IOException {
        System.out.format("%-60s %-30s %n", qifFile.getName(), 
                getYNABAccountNameFromFileName(qifFile.getName()));
        
        String ynabFromAccount = getYNABAccountNameFromFileName(qifFile.getName());
        String fromAccountQName = accountMappings.get(ynabFromAccount)[0];
        System.out.println(ynabFromAccount + "/" + fromAccountQName);
        ShadowAccount fromAccount = shadowTree.getOrCreateAccount(fromAccountQName);
        
        List<QIFTransaction> qifTrans = read(qifFile);
        qifTrans.stream().forEach((QIFTransaction qifTran) -> {
            TransactionGroup trnasGroup = toTransaction(qifTran, fromAccount);
            
            tgManipulators.stream().forEach( (manipulator) -> {
                manipulator.manipulate(trnasGroup);
            });
            
            trnasGroup.getTransactions().stream().forEach((t) -> {
                t.getAccount().addTransaction(t);
            });
        });
        
        proccessedAccount.add(fromAccountQName);
    }
    
    private String getYNABAccountNameFromFileName(String fileName) {
        int iDash = fileName.indexOf("-");
        int iAsOf = fileName.lastIndexOf(" as of");
        return fileName.substring(iDash + 1, iAsOf);
    }

    private List<QIFTransaction> read(File qifFile) throws IOException {
        List<QIFTransaction> qifTransaction = new ArrayList<>();
        QIFReader in = new QIFReader(qifFile.getAbsolutePath());
        in.open();
        while (in.hasNext()) {
            qifTransaction.add(in.next());
        }
        return qifTransaction;
    }

    private TransactionGroup toTransaction(QIFTransaction qifTran,
            ShadowAccount fromAccount) {
        TransactionGroup transGroup = new TransactionGroup();
    
        Transaction fromTran = new Transaction();
        
        if(qifTran != null) {
            //Get the type
            TransactionType type = getType(qifTran);
            fromTran.setAmount(qifTran.getAmount());
            fromTran.setStatus(qifTran.isCleared()?TransactionStatus.CLEARED:
                    TransactionStatus.NOT_CLEARED);
            fromTran.setDate(qifTran.getDate());
            fromTran.setMemo(qifTran.getMemo());
            fromTran.setNumber(qifTran.getCheckNumber());
            fromTran.setPayee(new Payee(qifTran.getPayee(), qifTran.getAddress()));
            fromTran.setAccount(fromAccount);
            fromTran.setType(type);
            
            Transaction toTran;
            String ynabToAccountName;
            String toAccountQName;
            ShadowAccount toAccount;
                
            switch(type) {
                case Transfer:
                    
                    fromTran.setPayee(new Payee("Transfer TFX"));
                    fromTran.setType(TransactionType.Transfer);
                    ynabToAccountName = qifTran.getPayee().substring(
                            "Transfer : ".length()).trim();
                    toAccountQName = accountMappings.get(ynabToAccountName)[0];
                    toAccount = shadowTree.getOrCreateAccount(toAccountQName); 
                    
                    toTran = new Transaction(fromTran);                        
                        toTran.setAmount(fromTran.getAmount().negate());
                        toTran.setAccount(toAccount);
                        
                        if(!proccessedAccount.contains(toAccount.getQualifiedName())) {
                            transGroup.addTransaction(new ShadowTransaction(fromTran));
                            transGroup.addTransaction(new ShadowTransaction(toTran));    
                        }
                    break;
                case Budget:
                    
                default:
                    
                    if(qifTran.isSplit()) {
                        transGroup.addTransaction(new ShadowTransaction(fromTran));
                        for(int i = 0; i < qifTran.getSplits().size(); i++) {
                            QIFTransaction.Split qifSplit = qifTran.getSplits().get(i);
                            toAccount = getOrCreateAccount(qifSplit.getCategory());
                            toTran = new Transaction(fromTran);
                            toTran.setMemo(qifSplit.getMemo());
                            toTran.setAmount(qifSplit.getAmount().negate());
                            toTran.setAccount(toAccount);
                            transGroup.addTransaction(new ShadowTransaction(toTran));    
                        }
                    } else { 
                        toAccount = getOrCreateAccount(qifTran.getCategory());
                        
                        switch (qifTran.getCategory()) {
//                            case "Income:Available this month":
//                                toAccount = shadowTree.getOrCreateAccount(
//                                        "Income:Other Income");
//                                break;
                            case "Income:Available next month":
//                                toAccount = shadowTree.getOrCreateAccount(
//                                        "Income:Other Income");
                                fromTran.getEffectiveDate().add(Calendar.MONTH, 1);
                                fromTran.getEffectiveDate().set(Calendar.DAY_OF_MONTH, 1);
                                break;
//                            default:
//                                toAccount = shadowTree.getOrCreateAccount("Expenses:"
//                                        + qifTran.getCategory());
//                                break;
                        }
                        toTran = new Transaction(fromTran);
                        toTran.setAmount(fromTran.getAmount().negate());
                        toTran.setAccount(toAccount);

                        transGroup.addTransaction(new ShadowTransaction(fromTran));
                        transGroup.addTransaction(new ShadowTransaction(toTran));
                    }
                    break;
                
//                default:
//                    System.out.println("NEW TYPE");
//                    transGroup.addTransaction(new ShadowTransaction(fromTran));
//                    
            }
        }
       
        return transGroup;
    }
    
    private TransactionType getType(QIFTransaction qifTran) {
        if (qifTran.getPayee().startsWith("Transfer : ")) {
            return TransactionType.Transfer;
        }
        if (!qifTran.getCategory().isEmpty()) {
            return TransactionType.Budget;
        }
        return TransactionType.Transaction;
    }
    ;
    private ShadowAccount getOrCreateAccount(String category) {
        if(expensesMappings.containsKey(category)) {
            return shadowTree.getOrCreateAccount(expensesMappings.get(category));
        }
        switch (category) {
            case "Income:Available this month":
            case "Income:Available next month":
                return shadowTree.getOrCreateAccount("Income:Other Income");
            default:
                return shadowTree.getOrCreateAccount("Expenses:" + category);
        }
    }
}

*** end *** end ***
***$$$@@@ /wimm/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>wimm</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    
    <repositories>
        <!--
        Repository hosting NetBeans modules, especially APIs.
        Versions are based on IDE releases, e.g.: RELEASE691
        To create your own repository, use: nbm:populate-repository
        -->
        <repository>
            <id>netbeans</id>
            <name>NetBeans</name>
            <url>http://bits.netbeans.org/nexus/content/groups/netbeans/</url>
        </repository>
    </repositories>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>net.sf</groupId>
                    <artifactId>stat-scm</artifactId>
                    <version>1.2.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
       
        <plugins>
            <plugin>
                <groupId>net.sf</groupId>
                <artifactId>stat-scm</artifactId>
            </plugin>
        </plugins>
    </build>
    
    <reporting>
        <plugins>
            <plugin>
                <groupId>net.sf</groupId>
                <artifactId>stat-scm</artifactId>
                <version>1.2.0</version>
            </plugin>
        </plugins>
    </reporting>
    
    <dependencies>
        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>HibernateHelper</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>4.2.3.Final</version>
            <type>jar</type>
        </dependency>
        
        <!-- SQLite JDBC library -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.8.11.2</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>4.3.1.Final</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>  
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>            
        
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.14</version>
        </dependency>
        
        <!-- H2 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.190</version>
        </dependency>        
        
        <!-- MyBatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.3</version>
        </dependency>         
        
        <dependency> 
            <groupId>com.tunyk.currencyconverter</groupId> 
            <artifactId>currency-converter-api</artifactId> 
            <version>1.0</version> 
        </dependency>
        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>xChange</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.netbeans.api</groupId>
            <artifactId>org-openide-util-lookup</artifactId>
            <version>RELEASE80</version>
            <type>jar</type>
        </dependency>
        
        <dependency>
            <groupId>org.javamoney</groupId>
            <artifactId>moneta</artifactId>
            <version>1.0</version>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <spring.framework.version>4.2.4.RELEASE</spring.framework.version>
    </properties>
</project>
*** end *** end ***
***$$$@@@ /wimm/nbactions.xml
<?xml version="1.0" encoding="UTF-8"?>
<actions>
        <action>
            <actionName>CUSTOM-stat-scm:stats</actionName>
            <displayName>stat-scm:stats</displayName>
            <goals>
                <goal>stat-scm:stats</goal>
            </goals>
        </action>
    </actions>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/data.sql
INSERT INTO TagGroup (ID, Name) VALUES (1, 'Default');

INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (1, 'Orange', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (2, 'Yellow', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (3, 'Green', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (4, 'Blue', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (5, 'Red', 1);

INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (1, 'Shukran', 'Shukran', 'Reward Points', 'Shukran', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (2, 'Qitaf', 'STC Reward Points', 'Reward Points', 'Qitaf', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (3, 'ICSAB', 'SABB ICSAB', 'Reward Points', 'ICSAB', 0);

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:wimm.db
*** end *** end ***
***$$$@@@ /wimm/src/main/resources/schema.sql
CREATE TABLE Account (
    ID                INTEGER       NOT NULL
                                    CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    NAME              VARCHAR (32)  NOT NULL,
    DESCR             VARCHAR (128),
    TYPE              VARCHAR (4)   NOT NULL,
    NOTES             TEXT,
    CURRENCY          VARCHAR (12)  NOT NULL,
    CURRENCY_PROVIDER VARCHAR (32),
    BALANCE           REAL          DEFAULT 0,
    HIDDEN            BOOLEAN,
    CREDIT_LIMIT      REAL,
    STAT_DAY          INTEGER,
    PARENT_ID         INTEGER,
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        PARENT_ID
    )
    REFERENCES Account (ID) 
);


CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    NAME    VARCHAR (64)  UNIQUE
                          NOT NULL,
    ADDRESS VARCHAR (256) 
);

CREATE TABLE Transaction_Group (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);

CREATE TABLE Transactions (
    ID             INTEGER       NOT NULL
                                 CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE           DATE          NOT NULL,
    EFFECTIVE_DATE DATE,
    AMOUNT         REAL          DEFAULT (0),
    STATUS         CHAR (1)      NOT NULL
                                 DEFAULT N,
    NUMBER         VARCHAR (12),
    MEMO           VARCHAR (128),
    ACCOUNT_ID     INTEGER       CONSTRAINT FK_ACCOUNT_TRANSACTION REFERENCES Account (ID),
    PAYEE_ID       INTEGER       CONSTRAINT FK_PAYEE_TRANSACTION REFERENCES Payee (ID) 
);

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/META-INF/persistence.xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="com.almatarm_p-budget_jar_1.0-SNAPSHOTPU" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <properties>
      <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sample"/>
      <property name="javax.persistence.jdbc.user" value="app"/>
      <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
      <property name="javax.persistence.jdbc.password" value="app"/>
      <property name="hibernate.cache.provider_class" value="org.hibernate.cache.NoCacheProvider"/>
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
    </properties>
  </persistence-unit>
</persistence>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/wimm.db
SQLite format 3   @                                                                   -�	� �    �����                                                                  �]�tableTagGroupTagGroupCREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
)/C indexsqlite_autoindex_TagGroup_1TagGroup�|�WtablePayeePayeeCREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
))= indexsqlite_autoindex_Payee_1Payee   P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�0--�tableTransactionGroupTransactionGroupCREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMEN      
   	   
   	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 � ������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ;sqlitestudio_temp_table
Account%TransactionsTagCurrency �	TagGroup                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
 Default
   � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
	Default      �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #�c )ESPSpanish PesetaCurrencyESP�  � M��� ���                                                                  �]�tableTagGroupTagGroup                                                                    �]�tableTagGroupTagGroupCREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
)/C indexsqlite_autoindex_TagGroup_1TagGroup�|�WtablePayeePayeeCREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
))= indexsqlite_autoindex_Payee_1Payee   P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�0--�tableTransactionGroupTransactionGroupCREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
)6  : � : : G                                        �y--�%tableAccount_TagGroupAccount_TagGroupCREATE TABLE Account_TagGroup (
    ACCOUNT_ID   INTEGER REFERENCES Currency (ID) 
                         NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                         NOT NULL
)  X;;�Atablesqlitestudio_temp_tablesqlitestudio_temp_tableCREATE TABLE "sqlitestudio_temp_table" (
    ID           INTEGER      NOT NULL
                              CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name         VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAG_GROUP_TAG REFERENCES TagGroup (ID) 
)�o�1tableCurrencyCurrencyCREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL
)      �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              	Red   � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              	Red
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  �  �� !               �%%�tableTransactionsTransactionsCREATE TABLE Transactions (
    ID                  INTEGER         NOT NULL
              �Y	;;�Itablesqlitestudio_temp_tablesqlitestudio_temp_�!%%�tableTransactionsTransactionsCREATE TABLE Transactions (ID INTEGER NOT NULL CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT, Date DATE NOT NULL, Effective_Date DATE NOT NULL, Amount INTEGER (13, 0) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Status CHAR (1) NOT NULL DEFAULT N, Number VARCHAR (12), Memo VARCHAR (128), Account_ID INTEGER CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID), Payee_ID INTEGER CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID), TransGroup_ID INTEGER CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID), tag_ID INTEGER CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID), ForeignAmount INTEGER (13), ForeignScale INTEGER (2), ForeignCurrency_ID INTEGER CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE                DATE            NOT NULL,
    EFFECTIVE_DATE      DATE            NOT NULL,
    AMOUNT              INTEGER (13, 0) DEFAULT (0),
    SCALE               INTEGER (2)     DEFAULT (2),
    STATUS              CHAR (1)        NOT NULL
                                        DEFAULT N,
    NUMBER              VARCHAR (12),
    MEMO                VARCHAR (128),
    ACCOUNT_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    PAYEE_ID            INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TRANS_GROUP_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    TAG_ID              INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    FOREIGN_AMOUNT      INTEGER (13),
    FOREIGN_SCALE       INTEGER (2),
    FOREIGN_CURRENCY_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �B;;�tablesqlitestudio_temp_tablesqlitestudio_temp_tableCREATE TABLE "sqlitestudio_temp_table" (
    ID                  INTEGER         NOT NULL
                                        CONSTRAIN   �y--�%tableAccount_TagGroupAccount_TagGroupCREATE TABLE Account_TagGroup (
    ACCOUNT_ID   INTEGER REFERENCES Currency (ID) 
                         NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                         NOT NULL
)   �%%�tableTransactionsTransactionsCREATE TABLE Transactions (
    ID                  INTEGER         NOT NULL
                     M
a; indexsqlite_autoindex_sqlitestudio_temp_table_1sqlitestudio_temp_table
         NSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE                DATE            NOT NULL,
    EFFECTIVE_DATE      DATE            NOT NULL,
    AMOUNT              INTEGER (13, 0) DEFAULT (0),
    SCALE               INTEGER (2)     DEFAULT (2),
    STATUS              CHAR (1)        NOT NULL
                                        DEFAULT N,
    NUMBER              VARCHAR (12),
    MEMO                VARCHAR (128),
    ACCOUNT_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    PAYEE_ID            INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TRANS_GROUP_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    TAG_ID              INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    FOREIGN_AMOUNT      INTEGER (13),
    FOREIGN_SCALE       INTEGER (2),
    FOREIGN_CURRENCY_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
)    �  � � �                                                                                                                                                           -A indexsqlite_autoindex_Account_1Account   �!%%�tableTransactionsTransactionsCREATE TABLE Transactions (ID INTEGER NOT NULL CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT, Date DATE NOT NULL, Effective_Date DATE NOT NULL, Amount INTEGER (13, 0) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Status CHAR (1) NOT NULL DEFAULT N, Number VARCHAR (12), Memo VARCHAR (128), Account_ID INTEGER CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID), Payee_ID INTEGER CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID), TransGroup_ID INTEGER CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID), tag_ID INTEGER CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID), ForeignAmount INTEGER (13), ForeignScale INTEGER (2), ForeignCurrency_ID INTEGER CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID))    � �� �                                                                                                                                                                                   �M�tableTagTagCREATE TABLE Tag (ID INTEGER NOT NULL CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT, Name VARCHAR (32) NOT NULL, TagGroup_ID INTEGER CONSTRAINT FK_TAGGROUP_TAG REFERENCES TagGroup (ID))-A indexsqlite_autoindex_Account_1Account�=�QtableAccountAccountCREATE TABLE Account (ID INTEGER NOT NULL CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT, Name VARCHAR (32) NOT NULL, Descr VARCHAR (128), Type VARCHAR (4) NOT NULL, Notes VARCHAR (128), CreditLimit INTEGER, StatDay INTEGER, Hidden BOOLEAN DEFAULT (0), Balance INTEGER (13) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Currency_ID INTEGER CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID), Parent_ID INTEGER REFERENCES Account (ID), CONSTRAINT ID UNIQUE (ID), CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (Parent_ID) REFERENCES Account (ID))
*** end *** end ***
***$$$@@@ /wimm/src/main/resources/schema-export2.sql
--
-- File generated with SQLiteStudio v3.0.7 on Fri Feb 5 20:48:14 2016
--
-- Text encoding used: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Account
DROP TABLE IF EXISTS Account;

CREATE TABLE Account (
    ID          INTEGER       NOT NULL
                              CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    Name   Fic     VARCHAR (32)  NOT NULL,
    Descr       VARCHAR (128),
    Type        VARCHAR (4)   NOT NULL,
    Notes       VARCHAR (128),
    CreditLimit INTEGER,
    StatDay     INTEGER,
    Hidden      BOOLEAN       DEFAULT (0),
    Balance     INTEGER (13)  DEFAULT (0),
    Scale       INTEGER (2)   DEFAULT (2),
    Currency_ID INTEGER       CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID),
    Parent_ID   INTEGER       REFERENCES Account (ID),
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        Parent_ID
    )
    REFERENCES Account (ID) 
);


-- Table: Currency
DROP TABLE IF EXISTS Currency;

CREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL
);

INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (228, 'ZMK', 'Zambian Kwacha', 'Currency', 'ZMK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (229, 'KRW', 'South Korean Won', 'Currency', 'KRW', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (230, 'BDT', 'Bangladeshi Taka', 'Currency', 'BDT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (231, 'UZS', 'Uzbekistan Som', 'Currency', 'UZS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (232, 'UYU', 'Uruguayan Peso', 'Currency', 'UYU', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (233, 'GNF', 'Guinean Franc', 'Currency', 'GNF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (234, 'AZM', 'Azerbaijani Manat (1993-2006)', 'Currency', 'AZM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (235, 'XUA', 'ADB Unit of Account', 'Currency', 'XUA', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (236, 'TND', 'Tunisian Dinar', 'Currency', 'TND', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (237, 'CLF', 'Chilean Unit of Account (UF)', 'Currency', 'CLF', 4);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (239, 'VEB', 'Venezuelan Bolívar (1871-2008)', 'Currency', 'VEB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (240, 'XSU', 'Sucre', 'Currency', 'XSU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (241, 'BRL', 'Brazilian Real', 'Currency', 'BRL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (242, 'XOF', 'CFA Franc BCEAO', 'Currency', 'XOF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (243, 'YUM', 'Yugoslavian New Dinar (1994-2002)', 'Currency', 'YUM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (244, 'PEN', 'Peruvian Nuevo Sol', 'Currency', 'PEN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (245, 'VUV', 'Vanuatu Vatu', 'Currency', 'VUV', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (246, 'GIP', 'Gibraltar Pound', 'Currency', 'GIP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (247, 'AFA', 'Afghan Afghani (1927-2002)', 'Currency', 'AFA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (248, 'INR', 'Indian Rupee', 'Currency', 'INR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (249, 'SYP', 'Syrian Pound', 'Currency', 'SYP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (250, 'CHW', 'CHW', 'Currency', 'CHW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (251, 'MRO', 'Mauritanian Ouguiya', 'Currency', 'MRO', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (252, 'FKP', 'Falkland Islands Pound', 'Currency', 'FKP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (253, 'TZS', 'Tanzanian Shilling', 'Currency', 'TZS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (254, 'LYD', 'Libyan Dinar', 'Currency', 'LYD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (255, 'TPE', 'Timorese Escudo', 'Currency', 'TPE', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (256, 'HUF', 'Hungarian Forint', 'Currency', 'HUF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (257, 'BGL', 'Bulgarian Hard Lev', 'Currency', 'BGL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (258, 'FIM', 'Finnish Markka', 'Currency', 'FIM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (259, 'FRF', 'French Franc', 'Currency', 'FRF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (260, 'CDF', 'Congolese Franc', 'Currency', 'CDF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (262, 'PGK', 'Papua New Guinean Kina', 'Currency', 'PGK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (263, 'PHP', 'Philippine Peso', 'Currency', 'PHP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (264, 'SSP', 'South Sudanese Pound', 'Currency', 'SSP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (265, 'IRR', 'Iranian Rial', 'Currency', 'IRR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (266, 'ZWN', 'ZWN', 'Currency', 'ZWN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (267, 'CUC', 'Cuban Convertible Peso', 'Currency', 'CUC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (268, 'SZL', 'Swazi Lilangeni', 'Currency', 'SZL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (269, 'NAD', 'Namibian Dollar', 'Currency', 'NAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (270, 'ATS', 'Austrian Schilling', 'Currency', 'ATS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (271, 'LUF', 'Luxembourgian Franc', 'Currency', 'LUF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (272, 'DKK', 'Danish Krone', 'Currency', 'DKK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (273, 'MNT', 'Mongolian Tugrik', 'Currency', 'MNT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (274, 'THB', 'Thai Baht', 'Currency', 'THB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (275, 'MMK', 'Myanma Kyat', 'Currency', 'MMK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (276, 'CYP', 'Cypriot Pound', 'Currency', 'CYP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (277, 'UGX', 'Ugandan Shilling', 'Currency', 'UGX', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (278, 'XBB', 'European Monetary Unit', 'Currency', 'XBB', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (279, 'IEP', 'Irish Pound', 'Currency', 'IEP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (280, 'JOD', 'Jordanian Dinar', 'Currency', 'JOD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (281, 'XBA', 'European Composite Unit', 'Currency', 'XBA', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (282, 'BHD', 'Bahraini Dinar', 'Currency', 'BHD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (283, 'SVC', 'Salvadoran Colón', 'Currency', 'SVC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (284, 'AYM', 'AYM', 'Currency', 'AYM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (285, 'XPD', 'Palladium', 'Currency', 'XPD', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (286, 'MAD', 'Moroccan Dirham', 'Currency', 'MAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (287, 'ARS', 'Argentine Peso', 'Currency', 'ARS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (288, 'MXN', 'Mexican Peso', 'Currency', 'MXN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (289, 'RON', 'Romanian Leu', 'Currency', 'RON', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (290, 'VEF', 'Venezuelan Bolívar', 'Currency', 'VEF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (291, 'RUR', 'Russian Ruble (1991-1998)', 'Currency', 'RUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (292, 'HNL', 'Honduran Lempira', 'Currency', 'HNL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (293, 'AZN', 'Azerbaijani Manat', 'Currency', 'AZN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (294, 'LRD', 'Liberian Dollar', 'Currency', 'LRD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (295, 'SKK', 'Slovak Koruna', 'Currency', 'SKK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (296, 'XDR', 'Special Drawing Rights', 'Currency', 'XDR', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (297, 'GMD', 'Gambian Dalasi', 'Currency', 'GMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (298, 'ISK', 'Icelandic Króna', 'Currency', 'ISK', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (300, 'ZAR', 'South African Rand', 'Currency', 'ZAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (301, 'KHR', 'Cambodian Riel', 'Currency', 'KHR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (302, 'CLP', 'Chilean Peso', 'Currency', 'CLP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (303, 'STD', 'São Tomé and Príncipe Dobra', 'Currency', 'STD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (304, 'BZD', 'Belize Dollar', 'Currency', 'BZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (305, 'YER', 'Yemeni Rial', 'Currency', 'YER', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (306, 'GHC', 'Ghanaian Cedi (1979-2007)', 'Currency', 'GHC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (307, 'TMT', 'Turkmenistani Manat', 'Currency', 'TMT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (308, 'BOB', 'Bolivian Boliviano', 'Currency', 'BOB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (309, 'HTG', 'Haitian Gourde', 'Currency', 'HTG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (310, 'BWP', 'Botswanan Pula', 'Currency', 'BWP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (311, 'SLL', 'Sierra Leonean Leone', 'Currency', 'SLL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (312, 'MVR', 'Maldivian Rufiyaa', 'Currency', 'MVR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (313, 'NLG', 'Dutch Guilder', 'Currency', 'NLG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (314, 'USS', 'US Dollar (Same day)', 'Currency', 'USS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (315, 'BYR', 'Belarusian Ruble', 'Currency', 'BYR', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (316, 'ADP', 'Andorran Peseta', 'Currency', 'ADP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (317, 'ANG', 'Netherlands Antillean Guilder', 'Currency', 'ANG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (318, 'BTN', 'Bhutanese Ngultrum', 'Currency', 'BTN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (319, 'TJS', 'Tajikistani Somoni', 'Currency', 'TJS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (320, 'DJF', 'Djiboutian Franc', 'Currency', 'DJF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (321, 'KGS', 'Kyrgystani Som', 'Currency', 'KGS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (322, 'ETB', 'Ethiopian Birr', 'Currency', 'ETB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (323, 'OMR', 'Omani Rial', 'Currency', 'OMR', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (324, 'NGN', 'Nigerian Naira', 'Currency', 'NGN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (325, 'BOV', 'Bolivian Mvdol', 'Currency', 'BOV', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (326, 'SCR', 'Seychellois Rupee', 'Currency', 'SCR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (327, 'LBP', 'Lebanese Pound', 'Currency', 'LBP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (328, 'MXV', 'Mexican Investment Unit', 'Currency', 'MXV', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (329, 'UYI', 'UYI', 'Currency', 'UYI', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (330, 'PLN', 'Polish Zloty', 'Currency', 'PLN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (331, 'ZWD', 'Zimbabwean Dollar (1980-2008)', 'Currency', 'ZWD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (332, 'ERN', 'Eritrean Nakfa', 'Currency', 'ERN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (333, 'MGF', 'Malagasy Franc', 'Currency', 'MGF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (334, 'XPF', 'CFP Franc', 'Currency', 'XPF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (335, 'BND', 'Brunei Dollar', 'Currency', 'BND', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (336, 'IDR', 'Indonesian Rupiah', 'Currency', 'IDR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (337, 'ROL', 'Romanian Leu (1952-2006)', 'Currency', 'ROL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (338, 'XCD', 'East Caribbean Dollar', 'Currency', 'XCD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (339, 'TOP', 'Tongan Paʻanga', 'Currency', 'TOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (340, 'NOK', 'Norwegian Krone', 'Currency', 'NOK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (341, 'SDG', 'Sudanese Pound', 'Currency', 'SDG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (342, 'COU', 'COU', 'Currency', 'COU', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (343, 'EUR', 'Euro', 'Currency', 'EUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (344, 'SAR', 'Saudi Riyal', 'Currency', 'SAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (345, 'MGA', 'Malagasy Ariary', 'Currency', 'MGA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (346, 'SOS', 'Somali Shilling', 'Currency', 'SOS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (347, 'ITL', 'Italian Lira', 'Currency', 'ITL', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (348, 'KMF', 'Comorian Franc', 'Currency', 'KMF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (349, 'TRL', 'Turkish Lira (1922-2005)', 'Currency', 'TRL', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (350, 'PAB', 'Panamanian Balboa', 'Currency', 'PAB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (351, 'XBC', 'European Unit of Account (XBC)', 'Currency', 'XBC', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (352, 'HRK', 'Croatian Kuna', 'Currency', 'HRK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (353, 'KES', 'Kenyan Shilling', 'Currency', 'KES', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (354, 'BYB', 'Belarusian New Ruble (1994-1999)', 'Currency', 'BYB', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (355, 'MTL', 'Maltese Lira', 'Currency', 'MTL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (356, 'KYD', 'Cayman Islands Dollar', 'Currency', 'KYD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (357, 'BIF', 'Burundian Franc', 'Currency', 'BIF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (358, 'MYR', 'Malaysian Ringgit', 'Currency', 'MYR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (359, 'USD', 'US Dollar', 'Currency', '$', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (360, 'BMD', 'Bermudan Dollar', 'Currency', 'BMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (361, 'BBD', 'Barbadian Dollar', 'Currency', 'BBD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (362, 'LAK', 'Laotian Kip', 'Currency', 'LAK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (363, 'GYD', 'Guyanaese Dollar', 'Currency', 'GYD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (364, 'MZM', 'Mozambican Metical (1980-2006)', 'Currency', 'MZM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (365, 'WST', 'Samoan Tala', 'Currency', 'WST', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (366, 'XBD', 'European Unit of Account (XBD)', 'Currency', 'XBD', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (367, 'GWP', 'Guinea-Bissau Peso', 'Currency', 'GWP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (368, 'USN', 'US Dollar (Next day)', 'Currency', 'USN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (369, 'AMD', 'Armenian Dram', 'Currency', 'AMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (370, 'VND', 'Vietnamese Dong', 'Currency', 'VND', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (371, 'FJD', 'Fijian Dollar', 'Currency', 'FJD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (372, 'TRY', 'Turkish Lira', 'Currency', 'TRY', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (373, 'KZT', 'Kazakhstani Tenge', 'Currency', 'KZT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (374, 'SIT', 'Slovenian Tolar', 'Currency', 'SIT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (375, 'MDL', 'Moldovan Leu', 'Currency', 'MDL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (376, 'JMD', 'Jamaican Dollar', 'Currency', 'JMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (377, 'RUB', 'Russian Ruble', 'Currency', 'RUB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (378, 'MOP', 'Macanese Pataca', 'Currency', 'MOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (379, 'CRC', 'Costa Rican Colón', 'Currency', 'CRC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (380, 'MWK', 'Malawian Kwacha', 'Currency', 'MWK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (381, 'CHF', 'Swiss Franc', 'Currency', 'CHF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (382, 'GBP', 'British Pound Sterling', 'Currency', 'GBP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (383, 'TMM', 'Turkmenistani Manat (1993-2009)', 'Currency', 'TMM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (384, 'PTE', 'Portuguese Escudo', 'Currency', 'PTE', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (385, 'JPY', 'Japanese Yen', 'Currency', 'JPY', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (386, 'TWD', 'New Taiwan Dollar', 'Currency', 'TWD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (387, 'COP', 'Colombian Peso', 'Currency', 'COP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (388, 'UAH', 'Ukrainian Hryvnia', 'Currency', 'UAH', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (389, 'XFO', 'French Gold Franc', 'Currency', 'XFO', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (390, 'CVE', 'Cape Verdean Escudo', 'Currency', 'CVE', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (391, 'EGP', 'Egyptian Pound', 'Currency', 'EGP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (392, 'PKR', 'Pakistani Rupee', 'Currency', 'PKR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (393, 'PYG', 'Paraguayan Guarani', 'Currency', 'PYG', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (394, 'CHE', 'CHE', 'Currency', 'CHE', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (395, 'XAU', 'Gold', 'Currency', 'XAU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (396, 'AOA', 'Angolan Kwanza', 'Currency', 'AOA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (397, 'EEK', 'Estonian Kroon', 'Currency', 'EEK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (398, 'BGN', 'Bulgarian Lev', 'Currency', 'BGN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (399, 'HKD', 'Hong Kong Dollar', 'Currency', 'HKD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (400, 'ZWL', 'Zimbabwean Dollar (2009)', 'Currency', 'ZWL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (401, 'BSD', 'Bahamian Dollar', 'Currency', 'BSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (402, 'GEL', 'Georgian Lari', 'Currency', 'GEL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (403, 'NPR', 'Nepalese Rupee', 'Currency', 'NPR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (404, 'CUP', 'Cuban Peso', 'Currency', 'CUP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (405, 'MUR', 'Mauritian Rupee', 'Currency', 'MUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (406, 'SDD', 'Sudanese Dinar (1992-2007)', 'Currency', 'SDD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (407, 'QAR', 'Qatari Rial', 'Currency', 'QAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (408, 'CNY', 'Chinese Yuan', 'Currency', 'CNY', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (409, 'GHS', 'Ghanaian Cedi', 'Currency', 'GHS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (410, 'GTQ', 'Guatemalan Quetzal', 'Currency', 'GTQ', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (411, 'MKD', 'Macedonian Denar', 'Currency', 'MKD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (412, 'XAG', 'Silver', 'Currency', 'XAG', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (413, 'DZD', 'Algerian Dinar', 'Currency', 'DZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (414, 'GRD', 'Greek Drachma', 'Currency', 'GRD', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (415, 'CSD', 'Serbian Dinar (2002-2006)', 'Currency', 'CSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (416, 'XXX', 'Unknown Currency', 'Currency', 'XXX', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (417, 'NZD', 'New Zealand Dollar', 'Currency', 'NZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (418, 'LKR', 'Sri Lankan Rupee', 'Currency', 'LKR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (419, 'ZWR', 'Zimbabwean Dollar (2008)', 'Currency', 'ZWR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (420, 'AED', 'United Arab Emirates Dirham', 'Currency', 'AED', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (421, 'DOP', 'Dominican Peso', 'Currency', 'DOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (422, 'BEF', 'Belgian Franc', 'Currency', 'BEF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (423, 'SBD', 'Solomon Islands Dollar', 'Currency', 'SBD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (424, 'SGD', 'Singapore Dollar', 'Currency', 'SGD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (425, 'XTS', 'Testing Currency Code', 'Currency', 'XTS', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (426, 'RSD', 'Serbian Dinar', 'Currency', 'RSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (427, 'LSL', 'Lesotho Loti', 'Currency', 'LSL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (428, 'XPT', 'Platinum', 'Currency', 'XPT', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (429, 'KWD', 'Kuwaiti Dinar', 'Currency', 'KWD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (430, 'IQD', 'Iraqi Dinar', 'Currency', 'IQD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (431, 'TTD', 'Trinidad and Tobago Dollar', 'Currency', 'TTD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (432, 'SRD', 'Surinamese Dollar', 'Currency', 'SRD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (433, 'LTL', 'Lithuanian Litas', 'Currency', 'LTL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (434, 'ESP', 'Spanish Peseta', 'Currency', 'ESP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (435, 'XFU', 'French UIC-Franc', 'Currency', 'XFU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (436, 'NIO', 'Nicaraguan Córdoba', 'Currency', 'NIO', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (437, 'BAM', 'Bosnia-Herzegovina Convertible Mark', 'Currency', 'BAM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (438, 'SRG', 'Surinamese Guilder', 'Currency', 'SRG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (439, 'AUD', 'Australian Dollar', 'Currency', 'AUD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (440, 'SEK', 'Swedish Krona', 'Currency', 'SEK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (441, 'KPW', 'North Korean Won', 'Currency', 'KPW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (442, 'XAF', 'CFA Franc BEAC', 'Currency', 'XAF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (443, 'CAD', 'Canadian Dollar', 'Currency', 'CAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (444, 'CZK', 'Czech Republic Koruna', 'Currency', 'CZK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (445, 'LVL', 'Latvian Lats', 'Currency', 'LVL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (446, 'AFN', 'Afghan Afghani', 'Currency', 'AFN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (447, 'AWG', 'Aruban Florin', 'Currency', 'AWG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (448, 'MZN', 'Mozambican Metical', 'Currency', 'MZN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (449, 'RWF', 'Rwandan Franc', 'Currency', 'RWF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (450, 'ZMW', 'ZMW', 'Currency', 'ZMW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (451, 'DEM', 'German Mark', 'Currency', 'DEM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (452, 'Shukran', 'Shukran', 'Reward Points', 'Shukran', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (453, 'Qitaf', 'STC Reward Points', 'Reward Points', 'Qitaf', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (454, 'ICSAB', 'SABB ICSAB', 'Reward Points', 'ICSAB', 0);

-- Table: Account_TagGroup
DROP TABLE IF EXISTS Account_TagGroup;

CREATE TABLE Account_TagGroup (
    ACCOUNT_ID  INTEGER REFERENCES Currency (ID) 
                        NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                        NOT NULL
);


-- Table: Tag
DROP TABLE IF EXISTS Tag;

CREATE TABLE Tag (
    ID          INTEGER      NOT NULL
                             CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAGGROUP_TAG REFERENCES TagGroup (ID) 
);


-- Table: Transactions
DROP TABLE IF EXISTS Transactions;

CREATE TABLE Transactions (
    ID                 INTEGER         NOT NULL
                                       CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    Date               DATE            NOT NULL,
    Effective_Date     DATE            NOT NULL,
    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Number             VARCHAR (12),
    Memo               VARCHAR (128),
    Account_ID         INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
);


-- Table: TagGroup
DROP TABLE IF EXISTS TagGroup;

CREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
);

INSERT INTO TagGroup (ID, Name) VALUES (1, 'Default');

-- Table: TransactionGroup
DROP TABLE IF EXISTS TransactionGroup;

CREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);


-- Table: Payee
DROP TABLE IF EXISTS Payee;

CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/TODO
Features:
    Backup files are automatically generated when appropriate.

Terminology:
    Account registers
    Hierarchy of accounts
    Type of Accounts:
        Asset: Cash, Bank, Stock, Mutual Fund, Accounts Receivable
        Liability: Credit Card, Accounts Payable, and Liability
        Equity
        Income
        Expense

Transaction:
    Date : Num : Description : Transfer (Budget : transfer Account) : R Deposit : Withdrawal : Balance

    R : When you write a check for something, you should enter the transaction 
    into GnuCash. The reconciliation R field of the transaction will initially 
    contain n (new). Your new entry will contribute to the total balance, but not to 
    the cleared and reconciled balance. Later, if you think that the check has been 
    cashed, you might click on the transaction’s R field to change it to c (cleared).
    When you do this, the cleared balance will change to include this amount. When 
    the bank statement arrives, you can then compare it to what you’ve recorded in 
    GnuCash by opening the reconciliation window. There, you will be able to change 
    the R field to y (reconciled).

Scheduled Transactions
    start date, frequency and a little description
*** end *** end ***
***$$$@@@ /wimm/src/main/resources/Mapping.hbm.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.almatarm.p.budget.model">
  <!-- Payee Class -->
  <class name="com.almatarm.wimm.domain.Payee" table="payees">
    <id column="payee_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name" not-null="true"/>
    <property length="128" name="address"/>
  </class>
  <!-- Category Class -->
  <class name="Category" table="categories">
    <id column="cat_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="master" not-null="true"/>
    <property length="48" name="category" not-null="true"/>
  </class>
  <!-- Account
  <class name="Account" table="accounts">
    <id column="account_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name"        not-null="true"/>
    <property length="128" name="description" column="desc"/>
    <property length="128" name="note"/>
    <property name="limit"/>
    <property name="balance"/>
    
  </class>
    
    /**
     * Type of account
     */
    Type type;
     -->
  <!--  
    Book Class  
  <class name="Book" table="books">
    <id column="book_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="64" name="author"/>
  
     constraints 
    <bag name="recipes" lazy="false">
      <key column="book_id"/>
      <one-to-many class="Recipe"/>
    </bag>
    
  </class>
  
    Recipe Class 
  <class name="Recipe" table="recipes">
    <id column="recipe_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="32" name="chapter"/>
    <property column="prep_time" name="preperationTime"/>
    <property column="cooking_time" name="cookingTime"/>
    <property column="ready_in" name="readyIn"/>
    <property name="servings"/>
    <property length="96" name="source"/>
    <property length="32" name="yield"/>
    <property name="rating"/>
    <property name="description"/>
    <property length="1024" name="directions"/>
    <property name="note"/>
    <property name="tags"/>
    
     constraints 
    <many-to-one cascade="save-update" class="Book" column="book_id" name="book" not-null="true" lazy="false"/>
    
    <many-to-one class="Recipe" column="master_recipe_id" name="master"/>
    
    <bag name="recipeIngredients" table="recipe_ingds"  lazy="false">
      <key column="recipe_id"/>
      <composite-element class="RecipeIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredient"  lazy="false"/>
        <property name="quantity" not-null="true"/>
        <many-to-one class="Unit" column="unit" name="unit" not-null="true"  lazy="false"/>
      </composite-element>
    </bag>
    
  </class>
  
    Ingredient Class 
  <class name="Ingredient" table="ingredients">
    <id column="ingredient_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="32" name="name" not-null="true"/>
    <property column="name_ext" length="32" name="nameExt"/>
    <property column="brand" length="32" name="brand"/>
    <property column="short_name" length="32" name="shortName" />
    <property name="type"/>
    <property column="cost" name="cost"/>
    <property name="grade"/>
    <property column="cal_from_fat" name="caloriesFromFat"/>
    <property column="total_fat" name="totalFat"/>
    <property column="sat_fat" name="saturatedFat"/>
    <property column="poly_fat" name="polyFat"/>
    <property column="mono_fat" name="monoFlat"/>
    <property name="cholesterol"/>
    <property name="sodium"/>
    <property name="carbohydrates"/>
    <property name="fiber"/>
    <property name="sugars"/>
    <property name="protein"/>
  
    constraints
    <many-to-one class="Unit" column="default_unit" name="defaultUnit" not-null="true"/>

    <set name="units" table="ingd_units" lazy="false">
      <key column="ingd_id"/>
      <composite-element class="IngredientUnits">
        <many-to-one class="Unit" column="unit_id" name="unit" lazy="false"/>
        <property column="gram_per_unit" name="gramPerUnit"/>
        <property column="main_unit" name="mainUnit"/>
      </composite-element>
    </set>

    <set name="substitutions">
      <key column="ingd_id"/>
      <one-to-many class="Substitution"/>
    </set>

  </class>
  
   Substitution Class 
  <class name="Substitution" table="substitution">
    <id column="subst_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <many-to-one class="Ingredient" column="ingd_id" name="ingredient"/>
    <property name="quantity"/>
    <many-to-one class="Unit" column="unit" name="unit"/>
    <set name="substitutions" table="subst_ingd">
      <key column="subst_id"/>
      <composite-element class="SubstitutionIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredientId"/>
        <many-to-one class="Unit" column="unit" name="unit"/>
        <property name="quantity"/>
      </composite-element>
    </set>
  </class>-->
</hibernate-mapping>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <!-- H2 -->
    <!--        
    <property name="connection.driver_class">org.h2.Driver</property>
    <property name="connection.url">jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE</property>
    <property name="connection.username">sa</property>
    <property name="connection.password"/>
    <property name="dialect">org.hibernate.dialect.H2Dialect</property>
-->
    <!-- SQLite -->
    <property name="connection.driver_class">org.sqlite.JDBC</property>
    <property name="connection.url">jdbc:sqlite:D:/Dropbox/utopia/p-budget/budget.db</property>
    <!--<property name="connection.url">jdbc:sqlite:/Users/almatarm/Dropbox/workarea/MasterRecipe.db</property>-->
    <property name="dialect">com.almatarm.p.budget.hibernate.SQLiteDialect</property>
    <!-- MySQl -->
    <!--
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="connection.url">jdbc:mysql://localhost:3306/mysql</property>
    <property name="connection.username">root</property>
    <property name="connection.password"></property>
    <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
 -->
    <!-- JDBC connection pool (use the built-in) -->
    <property name="connection.pool_size">1</property>
    <!-- SQL dialect -->
    <!-- Disable the second-level cache  -->
    <!--<property name="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</property>-->
    <!--<property name="dialect">com.applerao.hibernatesqlite.dialect.SQLiteDialect</property>-->
    <!-- Echo all executed SQL to stdout -->
    <property name="show_sql">true</property>
    <!--Drop and re-create the database schema on startup -->
    <property name="hbm2ddl.auto">create</property>
    <property name="format_sql">true</property>
    <property name="hibernate.use_sql_comments">true</property>
    <mapping resource="Mapping.hbm.xml"/>
    <mapping class="com.almatarm.p.budget.model.Account"/>
  </session-factory>
</hibernate-configuration>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.wimm.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence.mybatis" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>

</beans>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/com/almatarm/wimm/persistence/PayeeMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.PayeeMapper">

    <resultMap  id="payeeResultMap"   type="Payee">
        <id     property="id"         column="ID" />
        <result property="name"       column="Name" />
        <result property="address"    column="Address" />
        <!-- 
            Table: Payee
            Mapper: PayeeMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name, Address
            Select Alone: Name
            Type: Long id; String name, address; 
        -->
    </resultMap>

</mapper>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/com/almatarm/wimm/persistence/TagMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TagMapper">

    <resultMap  id="tagGroupResultMap"   type="TagGroup">
        <id         property="id"       column="ID" />
        <result     property="name"     column="Name" />       
        <collection property="tags"     ofType="Tag" > 
            <id     property="id"       column="Tag_ID" />      
            <result property="name"     column="Tag_Name" />   
        </collection>
        <!-- 
            Table: TagGroup
            Mapper: TagMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name
            Select Alone: Name
            FK: tags, TagGroup_ID
            Type: Long id; String name; Tag tags; 
        -->
    </resultMap>
    
    <resultMap  id="tagResultMap"   type="Tag">
        <id     property="id"       column="ID" />
        <result property="name"     column="Name" />           
        <!-- 
            Table: Tag 
            Unique: ID
            Find By: ID, Name
            Searchable: Name
            Type: Long ID; String Name; 
        -->   
    </resultMap>

<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/com/almatarm/wimm/persistence/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.AccountMapper">
    
    <cache />
    
    <resultMap  id="accountResultMap"   type="Account">
        <id     property="id"           column="ID" />
        <result property="name"         column="Name" />
        <result property="description"  column="Descr" />
        <result property="notes"        column="Notes" />
        <result property="type"         column="Type" />
        <result property="parentID"     column="Parent_ID" />
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID
            Find By: ID, Name
            Searchable: Name, Descr, Notes
            !Select Alone: 
            !FK: tags, TagGroup_ID
            Type: Long id, parentID; String name, description, notes;
        -->
    </resultMap>
    
     <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            ID, Name, Descr, Notes, Type, Parent_ID
        FROM
            Account
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            ID, Name, Descr, Notes, Type, Parent_ID
        FROM
            Account
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            ID, Name, Descr, Notes, Type, Parent_ID
        FROM
            Account
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            ID, Name, Descr, Notes, Type, Parent_ID
        FROM
            Account
        WHERE
            ID = #{id}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID})    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name         = #{name},
            Descr        = #{description},
            Notes        = #{notes},
            Type         = #{type},
            Parent_ID    = #{parentID}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
  
</mapper>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/com/almatarm/wimm/persistence/StoreMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.StoreMapper">

    <resultMap  id="tagGroupResultMap"   type="TagGroup">
        <id         property="id"       column="ID" />
        <result     property="name"     column="Name" />       
        <collection property="tags"     ofType="Tag" > 
            <id     property="id"       column="Tag_ID" />      
            <result property="name"     column="Tag_Name" />   
        </collection>
        <!-- 
            Table: TagGroup
            Mapper: StoreMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name
            Select Alone: Name
            FK: tags, TagGroup_ID
            Type: Long ID; String Name; 
        -->
    </resultMap>
    
    <resultMap  id="tagResultMap"   type="Tag">
        <id     property="id"       column="ID" />
        <result property="name"     column="Name" />           
        <!-- 
            Table: Tag 
            Find By: ID, Name
            Searchable: Name
        -->   
    </resultMap>

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>
    
    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="findTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name = #{name}
            </if>
        </where>
    </select>
    
    <select id="findTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name = #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>
    
    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    


     
</mapper>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/com/almatarm/wimm/persistence/TransactionMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TransactionMapper">

    <resultMap  id="transactionResultMap"   type="Transaction">
        <id         property="id"               column="ID" />
        <result     property="date"             column="Date" />       
        <result     property="effectiveDate"    column="EffectiveDate" />       
        <result     property="number"           column="Number" />       
        <result     property="Memo"             column="Memo" />       
        <result     property="status"           column="Status" /> 
        <result     property="type"             column="Type" /> 
        
        <!-- 
            Table: Transactions
            Mapper: TransactionMapper
            Unique: ID
            Find By: ID, Date
            Searchable: Name, Data, EffectiveDate, Number, Memo, Status
            !Select Alone: 
            !FK: tags, TagGroup_ID
            Type: Long id; Status status;
            Type: Calendar date, effectiveDate;
            Type: TransactionType type;
            Type: String number, memo;
        -->
        
    
    BigDecimal amount;
    Payee payee;
    Account account;
    Tag tag;
    MonetaryAmount foreignAmount;
    TransactionGroup transactionGroup;

    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
    
    
    </resultMap>
    
<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/com/almatarm/wimm/persistence/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
    
    
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>
    
<!--
    <select id="getAll" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>
    
    <select id="findByProvider" parameterType="string" 
            resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            Provider = #{Provider}
    </select>
    
    <select id="findByCodeAndProvider" parameterType="string" 
            resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            Code = #{Code} AND
            Provider = #{Provider}
    </select>
    
    <select id="findCurrencyUnit" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Code = #{code}
            </if>
            <if test="description != null">
                AND Descr = #{description}
            </if>
            <if test="provider != null">
                AND Provider = #{provider}
            </if>
        </where>
    </select>
    
    <select id="findCurrencyUnitLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Code LIKE #{code}
            </if>
            <if test="description != null">
                AND Descr like #{description}
            </if>
            <if test="provider != null">
                AND Provider like #{provider}
            </if>
        </where>
    </select>
    
    <select id="getProviders" resultType="string">
        SELECT DISTINCT Provider FROM Currency
    </select>
    
    <insert id="insert" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>
     
    <update id="update" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code      = #{code},
            Descr     = #{description},
            Symbol    = #{symbol},
            Provider  = #{provider},
            FractDigt = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 
        
    <delete id="delete" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>
    -->
</mapper>

*** end *** end ***
***$$$@@@ /wimm/src/main/resources/log4j.properties
# Root logger option
log4j.rootLogger=Info, stdout

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %40.40C:%4L - %m%n
*** end *** end ***
***$$$@@@ /wimm/src/main/resources/javamoney.properties
#Currency Conversion
conversion.default-chain=Static,xChange
*** end *** end ***
***$$$@@@ /wimm/src/main/resources/schema-export.sql
--
-- File generated with SQLiteStudio v3.0.7 on Sat Feb 6 13:07:44 2016
--
-- Text encoding used: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Payee
DROP TABLE IF EXISTS Payee;

CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
);


-- Table: Tag
DROP TABLE IF EXISTS Tag;

CREATE TABLE Tag (
    ID          INTEGER      NOT NULL
                             CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAG_GROUP_TAG REFERENCES TagGroup (ID) ON DELETE CASCADE
                                                                                  ON UPDATE CASCADE
);


-- Table: TagGroup
DROP TABLE IF EXISTS TagGroup;

CREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
);


-- Table: Account
DROP TABLE IF EXISTS Account;

CREATE TABLE Account (
    ID          INTEGER       NOT NULL
                              CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32)  NOT NULL,
    Descr       VARCHAR (128),
    Type        VARCHAR (4)   NOT NULL,
    Notes       TEXT,
    CreditLimit INTEGER,
    StatDay     INTEGER,
    Hidden      BOOLEAN       DEFAULT (0),
    Balance     INTEGER (13)  DEFAULT (0),
    Scale       INTEGER (2)   DEFAULT (2),
    Currency_ID INTEGER       CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID),
    Parent_ID   INTEGER       REFERENCES Account (ID),
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        Parent_ID
    )
    REFERENCES Account (ID),
    CONSTRAINT UQ_ACCOUNT_NAME UNIQUE (
        Name COLLATE BINARY
    )
);


-- Table: TransactionGroup
DROP TABLE IF EXISTS TransactionGroup;

CREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);


-- Table: Account_TagGroup
DROP TABLE IF EXISTS Account_TagGroup;

CREATE TABLE Account_TagGroup (
    Account_ID  INTEGER REFERENCES Currency (ID) 
                        NOT NULL,
    TagGroup_ID INTEGER REFERENCES TagGroup (ID) 
                        NOT NULL
);


-- Table: Transactions
DROP TABLE IF EXISTS Transactions;

CREATE TABLE Transactions (
    ID                 INTEGER         NOT NULL
                                       CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    Date               DATE            NOT NULL,
    EffectiveDate      DATE            NOT NULL,
    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Number             VARCHAR (12),
    Memo               VARCHAR (128),
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
);


-- Table: Currency
DROP TABLE IF EXISTS Currency;

CREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL,
    CONSTRAINT UQC_CODE_PROVIDER UNIQUE (
        Code COLLATE BINARY,
        Provider COLLATE BINARY
    )
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/persistence/mybatis/MonetaryAmountTypeHandler.java
package com.almatarm.wimm.persistence.mybatis;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.money.MonetaryAmount;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(MonetaryAmount.class)
public class MonetaryAmountTypeHandler implements TypeHandler<MonetaryAmount> {

    @Override
    public void setParameter(PreparedStatement ps, int i, MonetaryAmount t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null;//MonetaryAmount.toMonetaryAmount(rs.getString(columnLabel));
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(rs.getString(i));
    }

    @Override
    public MonetaryAmount getResult(CallableStatement cs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/persistence/mybatis/CurrencyTypeHandler.java
package com.almatarm.wimm.persistence.mybatis;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Currency;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(Currency.class)
public class CurrencyTypeHandler implements TypeHandler<Currency>{

    @Override
    public void setParameter(PreparedStatement ps, int i, Currency t, JdbcType jt) 
            throws SQLException {
        ps.setString(i, t.getCurrencyCode());
    }

    @Override
    public Currency getResult(ResultSet rs, String columnLabel) 
            throws SQLException {
        return Currency.getInstance(rs.getString(columnLabel));
    }

    @Override
    public Currency getResult(ResultSet rs, int i) 
            throws SQLException {
        return Currency.getInstance(rs.getString(i));
    }

    @Override
    public Currency getResult(CallableStatement cs, int i) 
            throws SQLException {
        return Currency.getInstance(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/persistence/mybatis/CurrencyUnitDoTypeHandler.java
package com.almatarm.wimm.persistence.mybatis;

import com.almatarm.wimm.domain.CurrencyUnitDO;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(CurrencyUnitDO.class)
public class CurrencyUnitDoTypeHandler implements TypeHandler<CurrencyUnitDO> {

    @Override
    public void setParameter(PreparedStatement ps, int i, CurrencyUnitDO t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null; //CurrencyUnitDO.toCurrencyUnitDO(rs.getString(columnLabel));
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(rs.getString(i));
    }

    @Override
    public CurrencyUnitDO getResult(CallableStatement cs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/persistence/mybatis/AccountTypeTypeHandler.java
package com.almatarm.wimm.persistence.mybatis;

import com.almatarm.wimm.domain.AccountType;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(AccountType.class)
public class AccountTypeTypeHandler implements TypeHandler<AccountType> {

    @Override
    public void setParameter(PreparedStatement ps, int i, AccountType t, 
            JdbcType jt) throws SQLException {
        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public AccountType getResult(ResultSet rs, String columnLabel) throws SQLException {
        return AccountType.toAccountType(rs.getString(columnLabel));
    }

    @Override
    public AccountType getResult(ResultSet rs, int i) throws SQLException {
        return AccountType.toAccountType(rs.getString(i));
    }

    @Override
    public AccountType getResult(CallableStatement cs, int i) throws SQLException {
        return AccountType.toAccountType(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/persistence/AccountMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.wimm.domain.Account;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountMapper {
    

    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public void insertAccount(Account account);

    public void updateAccount(Account account);

    public void deleteAccount(Long id);

}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/domain/Account.java
package com.almatarm.wimm.domain;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.money.CurrencyUnit;
import javax.money.MonetaryAmount;
import javax.money.convert.CurrencyConversion;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.MonetaryConversions;
import org.javamoney.moneta.Money;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class Account implements Serializable, PropertyChangeListener {
    public static final String PROP_BALANCE     = "balance";
    
    /**
     * id
     */
    Long id;
    
    /**
     * Account name
     */
    String name;
    
    /**
     * Description
     */
    String description;
   
    /**
     * Type of account
     */
    AccountType type;
    
    /**
     * Notes
     */
    String notes;
    
    /**
     * Current Balance of account
     */
    MonetaryAmount balance;
    
    /**
     * Parent Account
     */
    Account parent;
    
    Long parentID;
    
    /**
     * Children Account
     */
    List<Account> children = new ArrayList<>();

    /**
     * Hidden Account
     */
    boolean hidden;

    //TODO: Make this implmenets a list with fires events when items added or 
    //deleted, then modifes add and remove transaction
    List<Transaction> transactions = new ArrayList<>();
 
    transient TransactionManager transactionMgr = new TransactionManager(transactions);
 
    
    transient ExchangeRateProvider rateProvider;
    transient CurrencyConversion conversion;

    static int counter = 0;
    public int count;
    
    public Account() {
        type = AccountType.PLACE_HOLDER;
        rateProvider = MonetaryConversions.getExchangeRateProvider("Static", "xChange");
        conversion = rateProvider.getCurrencyConversion("USD");    
        count = counter++;
    }

    public Account(Long id) {
        this.id = id;
    }

    public Account(Long id, Account parent) {
        this.id = id;
        this.parent = parent;
        this.parentID = parent == null? null : parent.getId();
    }

    public Account(String name, String description, String currency, 
            String notes, AccountType type, float balanceAmount) {
        this();
        this.name = name;
        this.description = description;
        this.notes = notes;
        this.type = type;
        this.balance = Money.of(balanceAmount, currency);
        conversion = rateProvider.getCurrencyConversion(currency);
    }
    
    public Account(String name, String currency) {
        this(name, Money.of(0, currency));
        this.transactions = new ArrayList<>();
    }

    public Account(String name,  MonetaryAmount balance) {
        this();
        this.name = name;
        this.balance = balance;
        conversion = rateProvider.getCurrencyConversion(balance.getCurrency());
    }
    
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
    
    public AccountType getType() {
        return type;
    }

    public void setType(AccountType type) {
        this.type = type;
    }

    public MonetaryAmount getBalance() {
        return balance;
    }

    public void setBalance(MonetaryAmount newBalance) {
        MonetaryAmount oldBalance = this.balance;
        this.balance = newBalance;
        propertyChangeSupport.firePropertyChange(PROP_BALANCE, 
                oldBalance, newBalance);
    }

    public float getBalanceAmount() {
        return balance.getNumber().floatValue();
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }
    
    public boolean isHidden() {
        return hidden;
    }

    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }
    
    public Account getParent() {
        return parent;
    }

    public void setParent(Account parent) {
        this.parent = parent;
        if(parent != null) {
            parentID = parent.getId();
            parent.addChild(this);
        }
    }

    public List<Account> getChildren() {
        return children;
    }

    public void setChildren(List<Account> children) {
        this.children = children;
    }
    
    public void addChild(Account account) {
        children.add(account);
        account.addPropertyChangeListener(this);
    }
    
    public void removeChild(Account account) {
        children.remove(account);
        account.removePropertyChangeListener(this);
    }

    public String getQualifiedName() {
        return getParentQualifiedName(parent, name);
    }
    
    public CurrencyUnit getCurrency() {
        return balance.getCurrency();
    }

    public TransactionManager getTransactionMgr() {
        return transactionMgr;
    }
    
    public TransactionRange getTransactions(final Period period) {
        //PLACE_HOLDER ACCOUNT
        TransactionRange tr;
        if(type == AccountType.PLACE_HOLDER) {
            tr = new TransactionRange(period);
            for(Account child: children){ 
                tr.join(child.getTransactions(period));
            }
            return tr;
        }
        
        //CHILD ACCOUNT
        tr = transactionMgr.getTransactionRanage(period);
        if(tr == null) {
            tr = new TransactionRange(period);
        }
        return tr;
    }
    
    private String getParentQualifiedName(Account account, String qName) {
        if(account == null || account.getType() == AccountType.ROOT) {
            return qName;
        } else {
            qName = getParentQualifiedName(account.getParent(),
                    account.getName() + ":" + qName);
        }
        return qName;
    }

    public Long getParentID() {
        return parentID;
    }

    public void setParentID(Long parentID) {
        this.parentID = parentID;
    }
    
    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }
    
    public void addTransaction(Transaction tran) {
        transactions.add(tran);
        transactionMgr.addTransaction(tran);
        setBalance(balance.add(moneyOf(tran.getAmount())));
    }
    
    public void removeTransaction(Transaction tran) {
        transactions.remove(tran);
        transactionMgr.removeTransaction(tran);
        setBalance(balance.subtract(moneyOf(tran.getAmount())));
    }
    
    private MonetaryAmount moneyOf(BigDecimal n) {
        return Money.of(n, balance.getCurrency());
    }
    
    @Override
    public String toString() {
        return "Account{" + "id=" + id + ", name=" + name + ", description=" 
                + description  + ", notes=" + notes 
                + ", type=" + type + ", balance=" + balance  + '}';
    }
    
    private transient final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }
 
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getPropertyName().equals(PROP_BALANCE)) {
            MonetaryAmount oldBalance = ((MonetaryAmount) evt.getOldValue());
            MonetaryAmount newBalance = ((MonetaryAmount) evt.getNewValue());
            setBalance(balance.add(newBalance.subtract(oldBalance).with(conversion)));
        }
    }
}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/domain/AccountType.java
package com.almatarm.wimm.domain;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public enum AccountType {
    PLACE_HOLDER("PlHd"),
    BANK("Bank"),
    CASH("Cash"),
    CREDIT("Crdt"),
    ASSET("Asst"),
    LIABILITY("Liab"),
    STOCK("Stok"),
    MUTUAL("Mutl"),
    INCOME("Incm"),
    EQUITY("Eqty"),       
    LOAN("Loan"), 
    ROOT("Root"), 
    EXPENSES("Expn"),
    ;
    
    String discriminator;

    private AccountType(String discriminator) {
        this.discriminator = discriminator;
    }

    public String getDiscriminator() {
        return discriminator;
    } 
    
    public static AccountType toAccountType(String discriminator) {
        for(AccountType at : AccountType.values()) {
            if(at.getDiscriminator().equals(discriminator)) {
                return at;
            }
        }
        return null;
    }
}

*** end *** end ***
***$$$@@@ /wimm/src/main/java/com/almatarm/wimm/domain/CreditAccount.java
package com.almatarm.wimm.domain;

import java.util.Currency;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class CreditAccount extends Account {
    /**
     * Account limit for credit cards
     */
    float limit;
    
    /**
     * The day at which statement issued
     */
    int statementDay;   

    public CreditAccount(float limit, int statementDay) {
        this.limit = limit;
        this.statementDay = statementDay;
        this.type = AccountType.CREDIT;
    }

    public CreditAccount(String name, String currency, float limit, 
            int statementDay) {
        super(name, "", currency, "", AccountType.CREDIT, 0);
        this.limit = limit;
        this.statementDay = statementDay;
    }
     
    public CreditAccount(float limit, int statementDay, Long id) {
        super(id);
        this.limit = limit;
        this.statementDay = statementDay;
        this.type = AccountType.CREDIT;
    }
    
    public CreditAccount(float limit, int statementDay, Long id, 
            Account parent) {
        super(id, parent);
        this.limit = limit;
        this.statementDay = statementDay;
        this.type = AccountType.CREDIT;
    }

    public CreditAccount(float limit, int statementDay, String name, 
            String description, String currency, String notes, float balance) {
        super(name, description, currency, notes, AccountType.CREDIT, balance);
        this.limit = limit;
        this.statementDay = statementDay;
    }
    
    

    public float getLimit() {
        return limit;
    }

    public void setLimit(float limit) {
        this.limit = limit;
    }

    public int getStatementDay() {
        return statementDay;
    }

    public void setStatementDay(int statementDay) {
        this.statementDay = statementDay;
    }

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/target/classes/mybatis-config.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <properties resource="sqlite.properties"/>
    
    <settings>
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>
    <!--
        A type alias is simply a shorter name for a Java type. It's only 
        relevant to the XML configuration and simply exists to reduce redundant
        typing of fully qualified classnames.
    -->
    <typeAliases>
        
        <typeAlias type="com.almatarm.money.domain.Account"         alias="Account" />
        <typeAlias type="com.almatarm.money.domain.CreditAccount"   alias="CreditAccount" />
        <typeAlias type="com.almatarm.money.domain.Loan"            alias="Loan" />
        <typeAlias type="com.almatarm.money.domain.AccountType"     alias="AccountType" />
        <typeAlias type="com.almatarm.money.domain.CurrencyUnitDO"  alias="CurrencyUnitDO" />
        <typeAlias type="com.almatarm.money.domain.Payee"           alias="PAyee" />
        <typeAlias type="com.almatarm.money.domain.Tag"             alias="Tag" />
        <typeAlias type="com.almatarm.money.domain.TagGroup"        alias="TagGroup" />
        <typeAlias type="com.almatarm.money.domain.Transaction"     alias="Transaction" />
        
       
        
        <!--<package name="com.almatarm.money.domain" />-->
    </typeAliases>
    
    <typeHandlers>
        <typeHandler handler="com.almatarm.money.mybatis.typehandler.AccountTypeTypeHandler" />
        <!--<typeHandler handler="com.almatarm.money.mybatis.typehandler.CurrencyUnitDoTypeHandler" />--> 
        <!--<package name="com.almatarm.money.mybatis.typehandler" />-->
    </typeHandlers>

    
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">    
                <property name="driver" value="${driverClass}"/>
                <property name="url"    value="${url}"/>
<!--                                
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                -->
            </dataSource>
        </environment>
    </environments>

     <!-- Register all interfaces in a package as mappers -->
    <mappers>
        <mapper resource="com/almatarm/money/mybatis/mapper/AccountMapper.xml" />
        <mapper resource="com/almatarm/money/mybatis/mapper/CurrencyUnitMapper.xml" />
        <!--<package name="com/almatarm.money.mybatis.mapper" />-->
    </mappers>
 
</configuration>
*** end *** end ***
***$$$@@@ /money-service-mybatis/target/classes/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:/Users/almatarm/Dropbox/projects/code/resources/databases/wimm.db
*** end *** end ***
***$$$@@@ /money-service-mybatis/target/classes/com/almatarm/money/mybatis/mapper/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.money.mybatis.mapper.AccountMapper">

    <resultMap  id="accountResultMap"    type="Account">
        <id     property="id"            column="ID" />
        <result property="name"          column="Name" />
        <result property="description"   column="Descr" />
        <result property="notes"         column="Notes" />
        <result property="type"          column="Type" />
        <!--<result property="parentID"      column="Parent_ID" />-->
        <result property="hidden"        column="Hidden" />
        <result property="qualifiedName" column="QName" />
        <association property="parent"      column="Parent_ID"   select="findAccountByID" fetchType="lazy"/>        
        <association property="currency"     column="Currency_ID" javaType="CurrencyUnitDO">
            <id     property="id"             column="CU_ID" />
            <result property="code"           column="CU_Code" />
            <result property="description"    column="CU_Descr" />
            <result property="symbol"         column="CU_Symbol" />
            <result property="provider"       column="CU_Provider" />
            <result property="fractionDigits" column="CU_FractDigt" />
        </association>
        <discriminator column="Type" javaType="AccountType">
            <case value="CREDIT" resultMap="creditResultMap" />
            <case value="LOAN"   resultMap="loanResultMap" />            
        </discriminator>
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID, QName
            Find By: ID, QName, Name, Parent_ID
            Searchable: Name, Descr, Notes, Type, QName
            !Select Alone: 
            !FK: currency, TagGroup_ID
            Type: Long id, parentID; String name, qualifiedName, description, notes;
            Type: String name, qualifiedName, description, notes;
            Type: boolean hidden;
        -->
    </resultMap>

    <resultMap  id="creditResultMap" type="CreditAccount" extends="accountResultMap">
        <result property="limit"            column="CreditLimit" />
        <result property="statementDay"     column="StatDay" />
        <!-- 
            Type: BigDecimal limit; int statementDay;
            Class: com.almatarm.money.domain.CreditAccount
        -->
    </resultMap>
    
    <resultMap  id="loanResultMap" type="Loan" extends="accountResultMap">
        <result property="presentValue"     column="PresentValue" />
        <result property="interestRate"     column="InterestRate" />
        <!-- 
            Type: BigDecimal presentValue, interestRate;
            Class: com.almatarm.money.domain.Loan
        -->
    </resultMap>
    
    <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM 
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID;
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
            <if test="type != null">
                Account.Type = #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName = #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
            <if test="type != null">
                Account.Type LIKE #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName LIKE #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            Account.ID = #{id}
    </select>

    <select id="findAccountByQualifiedName" parameterType="String" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            QName = #{qualifiedName}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID, Hidden, QName, Currency_ID
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, CreditLimit, StatDay</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, PresentValue, InterestRate</if>) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID}, #{hidden}, #{qualifiedName}, #{currency.id}
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, #{limit}, #{statementDay}</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, #{presentValue}, #{interestRate}</if>)    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name           = #{name},
            Descr          = #{description},
            Notes          = #{notes},
            Type           = #{type},
            Parent_ID      = #{parentID},
            Hidden         = #{hidden},
            QName          = #{qualifiedName},
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">
            CreditLimit    = #{limit},
            StatDay        = #{statementDay}
            </if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">
            PresentValue   = #{presentValue},
            InterestRate   = #{interestRate}
            </if>
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
       
</mapper>

*** end *** end ***
***$$$@@@ /money-service-mybatis/target/classes/com/almatarm/money/mybatis/mapper/UserMapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.money.mappers.UserMapper">

  <select id="getUserById" parameterType="int" resultType="com.almatarm.money.domain.User">
     SELECT 
      user_id as userId, 
      email_id as emailId , 
      password, 
      first_name as firstName, 
      last_name as lastName
     FROM USER 
     WHERE USER_ID = #{userId}
  </select>
  <!-- Instead of referencing Fully Qualified Class Names we can register Aliases in mybatis-config.xml and use Alias names. -->
  <resultMap type="User" id="UserResult">
      <id property="userId" column="user_id"/>
      <result property="emailId" column="email_id"/>
      <result property="password" column="password"/>
      <result property="firstName" column="first_name"/>
      <result property="lastName" column="last_name"/>   
  </resultMap>

  <select id="getAllUsers" resultMap="UserResult">
   SELECT * FROM USER
  </select>

  <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="userId">
   INSERT INTO USER(email_id, password, first_name, last_name)
    VALUES(#{emailId}, #{password}, #{firstName}, #{lastName})
  </insert>

  <update id="updateUser" parameterType="User">
    UPDATE USER 
    SET
     PASSWORD= #{password},
     FIRST_NAME = #{firstName},
     LAST_NAME = #{lastName}
    WHERE USER_ID = #{userId}
  </update>

  <delete id="deleteUser" parameterType="int">
    DELETE FROM USER WHERE USER_ID = #{userId}
  </delete>

</mapper>
*** end *** end ***
***$$$@@@ /money-service-mybatis/target/classes/com/almatarm/money/mybatis/mapper/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.money.mybatis.mapper.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
   
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>

</mapper>

*** end *** end ***
***$$$@@@ /money-service-mybatis/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>money-service-mybatis</artifactId>
    <version>0.1</version>
    <packaging>jar</packaging>
    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>money-domain</artifactId>
            <version>1.0</version>
        </dependency>
        
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.1</version>
        </dependency>
        
        <!-- SQLite JDBC library -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.8.11.2</version>
        </dependency>
        
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
</project>
*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/resources/mybatis-config.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <properties resource="sqlite.properties"/>
    
    <settings>
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>
    <!--
        A type alias is simply a shorter name for a Java type. It's only 
        relevant to the XML configuration and simply exists to reduce redundant
        typing of fully qualified classnames.
    -->
    <typeAliases>
        
        <typeAlias type="com.almatarm.money.domain.Account"         alias="Account" />
        <typeAlias type="com.almatarm.money.domain.CreditAccount"   alias="CreditAccount" />
        <typeAlias type="com.almatarm.money.domain.Loan"            alias="Loan" />
        <typeAlias type="com.almatarm.money.domain.AccountType"     alias="AccountType" />
        <typeAlias type="com.almatarm.money.domain.CurrencyUnitDO"  alias="CurrencyUnitDO" />
        <typeAlias type="com.almatarm.money.domain.Payee"           alias="PAyee" />
        <typeAlias type="com.almatarm.money.domain.Tag"             alias="Tag" />
        <typeAlias type="com.almatarm.money.domain.TagGroup"        alias="TagGroup" />
        <typeAlias type="com.almatarm.money.domain.Transaction"     alias="Transaction" />
        
       
        
        <!--<package name="com.almatarm.money.domain" />-->
    </typeAliases>
    
    <typeHandlers>
        <typeHandler handler="com.almatarm.money.mybatis.typehandler.AccountTypeTypeHandler" />
        <!--<typeHandler handler="com.almatarm.money.mybatis.typehandler.CurrencyUnitDoTypeHandler" />--> 
        <!--<package name="com.almatarm.money.mybatis.typehandler" />-->
    </typeHandlers>

    
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">    
                <property name="driver" value="${driverClass}"/>
                <property name="url"    value="${url}"/>
<!--                                
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                -->
            </dataSource>
        </environment>
    </environments>

     <!-- Register all interfaces in a package as mappers -->
    <mappers>
        <mapper resource="com/almatarm/money/mybatis/mapper/AccountMapper.xml" />
        <mapper resource="com/almatarm/money/mybatis/mapper/CurrencyUnitMapper.xml" />
        <!--<package name="com/almatarm.money.mybatis.mapper" />-->
    </mappers>
 
</configuration>
*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/resources/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:/Users/almatarm/Dropbox/projects/code/resources/databases/wimm.db
*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/resources/com/almatarm/money/mybatis/mapper/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.money.mybatis.mapper.AccountMapper">

    <resultMap  id="accountResultMap"    type="Account">
        <id     property="id"            column="ID" />
        <result property="name"          column="Name" />
        <result property="description"   column="Descr" />
        <result property="notes"         column="Notes" />
        <result property="type"          column="Type" />
        <!--<result property="parentID"      column="Parent_ID" />-->
        <result property="hidden"        column="Hidden" />
        <result property="qualifiedName" column="QName" />
        <association property="parent"      column="Parent_ID"   select="findAccountByID" fetchType="lazy"/>        
        <association property="currency"     column="Currency_ID" javaType="CurrencyUnitDO">
            <id     property="id"             column="CU_ID" />
            <result property="code"           column="CU_Code" />
            <result property="description"    column="CU_Descr" />
            <result property="symbol"         column="CU_Symbol" />
            <result property="provider"       column="CU_Provider" />
            <result property="fractionDigits" column="CU_FractDigt" />
        </association>
        <discriminator column="Type" javaType="AccountType">
            <case value="CREDIT" resultMap="creditResultMap" />
            <case value="LOAN"   resultMap="loanResultMap" />            
        </discriminator>
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID, QName
            Find By: ID, QName, Name, Parent_ID
            Searchable: Name, Descr, Notes, Type, QName
            !Select Alone: 
            !FK: currency, TagGroup_ID
            Type: Long id, parentID; String name, qualifiedName, description, notes;
            Type: String name, qualifiedName, description, notes;
            Type: boolean hidden;
        -->
    </resultMap>

    <resultMap  id="creditResultMap" type="CreditAccount" extends="accountResultMap">
        <result property="limit"            column="CreditLimit" />
        <result property="statementDay"     column="StatDay" />
        <!-- 
            Type: BigDecimal limit; int statementDay;
            Class: com.almatarm.money.domain.CreditAccount
        -->
    </resultMap>
    
    <resultMap  id="loanResultMap" type="Loan" extends="accountResultMap">
        <result property="presentValue"     column="PresentValue" />
        <result property="interestRate"     column="InterestRate" />
        <!-- 
            Type: BigDecimal presentValue, interestRate;
            Class: com.almatarm.money.domain.Loan
        -->
    </resultMap>
    
    <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM 
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID;
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
            <if test="type != null">
                Account.Type = #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName = #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
            <if test="type != null">
                Account.Type LIKE #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName LIKE #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            Account.ID = #{id}
    </select>

    <select id="findAccountByQualifiedName" parameterType="String" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            QName = #{qualifiedName}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID, Hidden, QName, Currency_ID
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, CreditLimit, StatDay</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, PresentValue, InterestRate</if>) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID}, #{hidden}, #{qualifiedName}, #{currency.id}
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, #{limit}, #{statementDay}</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, #{presentValue}, #{interestRate}</if>)    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name           = #{name},
            Descr          = #{description},
            Notes          = #{notes},
            Type           = #{type},
            Parent_ID      = #{parentID},
            Hidden         = #{hidden},
            QName          = #{qualifiedName},
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">
            CreditLimit    = #{limit},
            StatDay        = #{statementDay}
            </if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">
            PresentValue   = #{presentValue},
            InterestRate   = #{interestRate}
            </if>
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
       
</mapper>

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/resources/com/almatarm/money/mybatis/mapper/UserMapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.money.mappers.UserMapper">

  <select id="getUserById" parameterType="int" resultType="com.almatarm.money.domain.User">
     SELECT 
      user_id as userId, 
      email_id as emailId , 
      password, 
      first_name as firstName, 
      last_name as lastName
     FROM USER 
     WHERE USER_ID = #{userId}
  </select>
  <!-- Instead of referencing Fully Qualified Class Names we can register Aliases in mybatis-config.xml and use Alias names. -->
  <resultMap type="User" id="UserResult">
      <id property="userId" column="user_id"/>
      <result property="emailId" column="email_id"/>
      <result property="password" column="password"/>
      <result property="firstName" column="first_name"/>
      <result property="lastName" column="last_name"/>   
  </resultMap>

  <select id="getAllUsers" resultMap="UserResult">
   SELECT * FROM USER
  </select>

  <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="userId">
   INSERT INTO USER(email_id, password, first_name, last_name)
    VALUES(#{emailId}, #{password}, #{firstName}, #{lastName})
  </insert>

  <update id="updateUser" parameterType="User">
    UPDATE USER 
    SET
     PASSWORD= #{password},
     FIRST_NAME = #{firstName},
     LAST_NAME = #{lastName}
    WHERE USER_ID = #{userId}
  </update>

  <delete id="deleteUser" parameterType="int">
    DELETE FROM USER WHERE USER_ID = #{userId}
  </delete>

</mapper>
*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/resources/com/almatarm/money/mybatis/mapper/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.money.mybatis.mapper.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
   
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>

</mapper>

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/mapper/StoreMapper.java
package com.almatarm.money.mybatis.mapper;

import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface StoreMapper {
    
    //**************************************************************************
    // TagGroup Mapper
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();
  
    public List<TagGroup> findTagGroups(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);
       
    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);
    
    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);
   
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/mapper/CurrencyUnitMapper.java
package com.almatarm.money.mybatis.mapper;

import com.almatarm.money.domain.CurrencyUnitDO;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface CurrencyUnitMapper {
    
    public List<CurrencyUnitDO> getCurrencyUnits();

    public List<String> getCurrencyUnitCodesList();

    public List<String> getCurrencyUnitProvidersList();

    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit);

    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit);

    public CurrencyUnitDO findCurrencyUnitByID(Long id);

    public void insertCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void updateCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void deleteCurrencyUnit(Long id);

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/mapper/PayeeMapper.java
package com.almatarm.money.mybatis.mapper;

import com.almatarm.money.domain.Payee;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface PayeeMapper {

    public List<Payee> getPayees();

    public List<String> getPayeeNamesList();

    public List<Payee> findPayees(Payee payee);

    public List<Payee> findPayeesLike(Payee payee);

    public Payee findPayeeByID(Long id);

    public Payee findPayeeByName(String name);

    public void insertPayee(Payee payee);

    public void updatePayee(Payee payee);

    public void deletePayee(Long id);
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/mapper/TagMapper.java
package com.almatarm.money.mybatis.mapper;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface TagMapper {
    
    //**************************************************************************
    // Tag Mapper
    //**************************************************************************

    public List<Tag> getTags();

    public List<Tag> findTags(Tag tag);

    public List<Tag> findTagsLike(Tag tag);

    public Tag findTagByID(Long id);

    public List<Tag> findTagByNameRegEx(String name);

    public void insertTag(Tag tag);

    public void updateTag(Tag tag);

    public void deleteTag(Long id);    
    
    //**************************************************************************
    // TagGroup Mapper
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();

    public List<String> getTagGroupNamesList();

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);

    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);

    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);

    public void insertTagGroup(TagGroup tagGroup);

    public void updateTagGroup(TagGroup tagGroup);

    public void deleteTagGroup(Long id);

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/mapper/AccountMapper.java
package com.almatarm.money.mybatis.mapper;

import com.almatarm.money.domain.Account;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountMapper {
    

    //**************************************************************************
    // Account Mapper
    //**************************************************************************

    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public Account findAccountByQualifiedName(String qualifiedName);

    public void insertAccount(Account account);

    public void updateAccount(Account account);

    public void deleteAccount(Long id);

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/mapper/UserMapper.java
package com.almatarm.money.mybatis.mapper;

import com.almatarm.money.domain.User;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface UserMapper {

    public void insertUser(User user);

    public User getUserById(Integer userId);

    public List<User> getAllUsers();

    public void updateUser(User user);

    public void deleteUser(Integer userId);

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/typehandler/MonetaryAmountTypeHandler.java
package com.almatarm.money.mybatis.typehandler;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.money.MonetaryAmount;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(MonetaryAmount.class)
public class MonetaryAmountTypeHandler implements TypeHandler<MonetaryAmount> {

    @Override
    public void setParameter(PreparedStatement ps, int i, MonetaryAmount t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null;//MonetaryAmount.toMonetaryAmount(rs.getString(columnLabel));
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(rs.getString(i));
    }

    @Override
    public MonetaryAmount getResult(CallableStatement cs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/typehandler/CurrencyUnitDoTypeHandler.java
package com.almatarm.money.mybatis.typehandler;


import com.almatarm.money.domain.CurrencyUnitDO;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
//@MappedTypes(CurrencyUnitDO.class)
public class CurrencyUnitDoTypeHandler implements TypeHandler<CurrencyUnitDO> {

    @Override
    public void setParameter(PreparedStatement ps, int i, CurrencyUnitDO t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null; //CurrencyUnitDO.toCurrencyUnitDO(rs.getString(columnLabel));
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(rs.getString(i));
    }

    @Override
    public CurrencyUnitDO getResult(CallableStatement cs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/typehandler/AccountTypeTypeHandler.java
package com.almatarm.money.mybatis.typehandler;


import com.almatarm.money.domain.AccountType;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(AccountType.class)
public class AccountTypeTypeHandler implements TypeHandler<AccountType> {

    @Override
    public void setParameter(PreparedStatement ps, int i, AccountType t, 
            JdbcType jt) throws SQLException {
        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public AccountType getResult(ResultSet rs, String columnLabel) throws SQLException {
        return AccountType.toAccountType(rs.getString(columnLabel));
    }

    @Override
    public AccountType getResult(ResultSet rs, int i) throws SQLException {
        return AccountType.toAccountType(rs.getString(i));
    }

    @Override
    public AccountType getResult(CallableStatement cs, int i) throws SQLException {
        return AccountType.toAccountType(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/service/IUserService.java
package com.almatarm.money.mybatis.service;

import com.almatarm.money.domain.User;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface IUserService {
    public void insertUser(User user);
    public User getUserById(Integer userId);
    public List<User> getAllUsers();
    public void updateUser(User user);
    public void deleteUser(Integer userId);
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/service/UserService.java
package com.almatarm.money.mybatis.service;

import com.almatarm.money.domain.User;
import com.almatarm.money.mybatis.mapper.UserMapper;
import java.util.List;
import org.apache.ibatis.session.SqlSession;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class UserService {

    public User getUserById(Integer userId) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
            return userMapper.getUserById(userId);
        } finally {
            sqlSession.close();
        }
    }

    public List<User> getUsers() {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
            return userMapper.getAllUsers();
	} finally {
            sqlSession.close();
	}
    }
    
    public User saveUser(User user) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class); 
            if(user.getUserId() == null) {
                userMapper.insertUser(user);
            } else {
                userMapper.updateUser(user);
            }
            sqlSession.commit();
            return user;
        } finally {
            sqlSession.close();
	}
    }

    public void deleteUser(Integer id) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class); 
            userMapper.deleteUser(id);
            sqlSession.commit();
        } finally {
            sqlSession.close();
	}
    }    
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/service/MyBatisUtil.java
package com.almatarm.money.mybatis.service;

import java.io.IOException;
import java.io.Reader;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class MyBatisUtil {

    private static SqlSessionFactory factory;

    private MyBatisUtil() {
        
    }

    static {
        Resources.setDefaultClassLoader(Thread.currentThread().getContextClassLoader());
        Reader reader = null;
        try {
            reader = Resources.getResourceAsReader("mybatis-config.xml");
        } catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
        factory = new SqlSessionFactoryBuilder().build(reader);
        
    }

    public static SqlSessionFactory getSqlSessionFactory() {
        return factory;
    }
}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/service/AccountServiceMybatis.java
package com.almatarm.money.mybatis.service;

import com.almatarm.money.domain.Account;
import com.almatarm.money.mybatis.mapper.AccountMapper;
import com.almatarm.money.service.AccountService;
import java.util.List;
import org.apache.ibatis.session.SqlSession;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class AccountServiceMybatis implements AccountService {
    //**************************************************************************
    // Account ServiceImpl
    //**************************************************************************

    @Override
    public List<Account> getAccounts() {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);
            return accountMapper.getAccounts();
	} finally {
            sqlSession.close();
	}
    }

    @Override
    public List<Account> findAccounts(Account account) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);
            return accountMapper.findAccounts(account);
        } finally {
            sqlSession.close();
	}
    }

    @Override
    public List<Account> findAccountsLike(Account account) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);
            return accountMapper.findAccountsLike(account);
        } finally {
            sqlSession.close();
	}
    }

    @Override
    public Account findAccountByID(Long id) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);
            return accountMapper.findAccountByID(id);
        } finally {
            sqlSession.close();
	}
    }

    public List<Account> findAccountsByName(String name) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class); 
            Account account = new Account();
            account.setName(name);
            return findAccounts(account);
        } finally {
            sqlSession.close();
	}
    }

    public List<Account> findAccountsByParentID(Long parentID) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class); 
            Account account = new Account();
            account.setParentID(parentID);
            return findAccounts(account);
        } finally {
            sqlSession.close();
	}
    }

    @Override
    public Account findAccountByQualifiedName(String qualifiedName) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);
            return accountMapper.findAccountByQualifiedName(qualifiedName);
        } finally {
            sqlSession.close();
	}
    }

    public Account saveAccount(Account account) {
        try (SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession()) {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class); 
            if(account.getId() == null) {
                accountMapper.insertAccount(account);
            } else {
                accountMapper.updateAccount(account);
            }
            sqlSession.commit();
            return account;
        }
    }

    @Override
    public void deleteAccount(Long id) {
        try (SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession()) {
            AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class); 
            accountMapper.deleteAccount(id);
            sqlSession.commit();
        }
    }    

    @Override
    public void insertAccount(Account account) {
        saveAccount(account);
    }

    @Override
    public void updateAccount(Account account) {
        saveAccount(account);
    }

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/mybatis/service/NewMain.java
package com.almatarm.money.mybatis.service;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.User;
import com.almatarm.money.service.AccountService;
import com.almatarm.money.service.ServicesORM;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class NewMain {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
//        UserService userSrv = new UserService();
//        User user = userSrv.getUsers().get(0);
//        userSrv.deleteUser(user.getUserId());
        ServicesORM srv = ServicesORM.getInstance();
        List<Account> accounts = srv.getAccounts();
        for(Account account : accounts) {
            System.out.println(account);
        }
        
        List<Account> children = accounts.get(0).getChildren();
        for(Account account : children) {
            System.out.println("--> " + account);
        }
        
        System.out.println(ServicesORM.getInstance().getRootAccount());
    }

}

*** end *** end ***
***$$$@@@ /money-service-mybatis/src/main/java/com/almatarm/money/service/ServicesORM.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.almatarm.money.service;

import com.almatarm.money.domain.Account;
import com.almatarm.money.mybatis.service.AccountServiceMybatis;
import com.almatarm.money.mybatis.service.MyBatisUtil;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class ServicesORM {

    AccountService accountService;
    List<Account> accounts;
    
    private ServicesORM() {
        accountService = new AccountServiceMybatis();
    }

    public static ServicesORM getInstance() {
        return ServicesORMHolder.INSTANCE;
    }

    private static class ServicesORMHolder {
        private static final ServicesORM INSTANCE = new ServicesORM();
    }
    
    //**************************************************************************
    // Accounts
    //**************************************************************************
    
    Map<Long,   Account> accountIdsMap;
    Map<String, Account> qNameMap;
    Map<String, String>  shortNamesMap; //Qualifed Name -> Short Name
    
    public List<Account> getAccounts() {
        if(accounts == null) {
            buildAccountORM();
        }
        return accounts;
    }
    
    public List<Account> getFlatAccounts() {
        List<Account> flatAccounts = new ArrayList<>();
        getAccounts().stream().forEach( (account) -> { 
            if(account.getChildren().isEmpty()) {
                flatAccounts.add(account);
            }
        });
        return flatAccounts;
    }
    
    public Account getRootAccount() {
        if(accounts == null) {
            getAccounts();
        }
        return qNameMap.get("Root");
    }
    
    public String getShortName(Account account) {
        return shortNamesMap.get(account.getQualifiedName());
    }
    
    public void buildAccountORM() {
        qNameMap = new HashMap<>();
        
        //Map Account ID --> Account
        accountIdsMap = new HashMap<>();
        accounts = accountService.getAccounts();
        accounts.stream().forEach((account) -> {
            accountIdsMap.put(account.getId(), account);
        });
        
        //Build Parent Child Relation
        accounts.stream().forEach((account) -> {
            Long parentAccountId  = account.getParentID();
            Account parentAccount = null;
            if(parentAccountId != null && 
                    (parentAccount = accountIdsMap.get(parentAccountId)) != null) {
                account.setParent(parentAccount);
            }
        });
        
        //Build Qualified Name --> Account Map
        accounts.stream().forEach( (account) -> {
            qNameMap.put(account.getQualifiedName(), account);
            System.out.println(account.getQualifiedName());
        });
        
        //Build Short Name Map
        shortNamesMap = new HashMap<>();
        accounts.stream().forEach((Account account) -> {
            if(account.getChildren().isEmpty()) {
                String shortName = account.getName();
                
                //Is the name duplicated
                boolean duplicated = false;
                for(Account a : accounts) {
                    if(shortName.equals(a.getName())) {
                        duplicated = true;
                        break;
                    }
                }
                
                if(duplicated) {
                    shortName = account.getParent() + ":" + shortName;
                }
                
                shortNamesMap.put(account.getQualifiedName(), shortName);
            }
        });
    }
 }

*** end *** end ***
***$$$@@@ /money-service/target/classes/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:wimm.db
*** end *** end ***
***$$$@@@ /money-service/target/classes/META-INF/persistence.xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="com.almatarm_p-budget_jar_1.0-SNAPSHOTPU" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <properties>
      <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sample"/>
      <property name="javax.persistence.jdbc.user" value="app"/>
      <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
      <property name="javax.persistence.jdbc.password" value="app"/>
      <property name="hibernate.cache.provider_class" value="org.hibernate.cache.NoCacheProvider"/>
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
    </properties>
  </persistence-unit>
</persistence>

*** end *** end ***
***$$$@@@ /money-service/target/classes/Mapping.hbm.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.almatarm.p.budget.model">
  <!-- Payee Class -->
  <class name="com.almatarm.wimm.domain3.Payee" table="payees">
    <id column="payee_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name" not-null="true"/>
    <property length="128" name="address"/>
  </class>
  <!-- Category Class -->
  <class name="Category" table="categories">
    <id column="cat_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="master" not-null="true"/>
    <property length="48" name="category" not-null="true"/>
  </class>
  <!-- Account
  <class name="Account" table="accounts">
    <id column="account_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name"        not-null="true"/>
    <property length="128" name="description" column="desc"/>
    <property length="128" name="note"/>
    <property name="limit"/>
    <property name="balance"/>
    
  </class>
    
    /**
     * Type of account
     */
    Type type;
     -->
  <!--  
    Book Class  
  <class name="Book" table="books">
    <id column="book_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="64" name="author"/>
  
     constraints 
    <bag name="recipes" lazy="false">
      <key column="book_id"/>
      <one-to-many class="Recipe"/>
    </bag>
    
  </class>
  
    Recipe Class 
  <class name="Recipe" table="recipes">
    <id column="recipe_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="32" name="chapter"/>
    <property column="prep_time" name="preperationTime"/>
    <property column="cooking_time" name="cookingTime"/>
    <property column="ready_in" name="readyIn"/>
    <property name="servings"/>
    <property length="96" name="source"/>
    <property length="32" name="yield"/>
    <property name="rating"/>
    <property name="description"/>
    <property length="1024" name="directions"/>
    <property name="note"/>
    <property name="tags"/>
    
     constraints 
    <many-to-one cascade="save-update" class="Book" column="book_id" name="book" not-null="true" lazy="false"/>
    
    <many-to-one class="Recipe" column="master_recipe_id" name="master"/>
    
    <bag name="recipeIngredients" table="recipe_ingds"  lazy="false">
      <key column="recipe_id"/>
      <composite-element class="RecipeIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredient"  lazy="false"/>
        <property name="quantity" not-null="true"/>
        <many-to-one class="Unit" column="unit" name="unit" not-null="true"  lazy="false"/>
      </composite-element>
    </bag>
    
  </class>
  
    Ingredient Class 
  <class name="Ingredient" table="ingredients">
    <id column="ingredient_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="32" name="name" not-null="true"/>
    <property column="name_ext" length="32" name="nameExt"/>
    <property column="brand" length="32" name="brand"/>
    <property column="short_name" length="32" name="shortName" />
    <property name="type"/>
    <property column="cost" name="cost"/>
    <property name="grade"/>
    <property column="cal_from_fat" name="caloriesFromFat"/>
    <property column="total_fat" name="totalFat"/>
    <property column="sat_fat" name="saturatedFat"/>
    <property column="poly_fat" name="polyFat"/>
    <property column="mono_fat" name="monoFlat"/>
    <property name="cholesterol"/>
    <property name="sodium"/>
    <property name="carbohydrates"/>
    <property name="fiber"/>
    <property name="sugars"/>
    <property name="protein"/>
  
    constraints
    <many-to-one class="Unit" column="default_unit" name="defaultUnit" not-null="true"/>

    <set name="units" table="ingd_units" lazy="false">
      <key column="ingd_id"/>
      <composite-element class="IngredientUnits">
        <many-to-one class="Unit" column="unit_id" name="unit" lazy="false"/>
        <property column="gram_per_unit" name="gramPerUnit"/>
        <property column="main_unit" name="mainUnit"/>
      </composite-element>
    </set>

    <set name="substitutions">
      <key column="ingd_id"/>
      <one-to-many class="Substitution"/>
    </set>

  </class>
  
   Substitution Class 
  <class name="Substitution" table="substitution">
    <id column="subst_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <many-to-one class="Ingredient" column="ingd_id" name="ingredient"/>
    <property name="quantity"/>
    <many-to-one class="Unit" column="unit" name="unit"/>
    <set name="substitutions" table="subst_ingd">
      <key column="subst_id"/>
      <composite-element class="SubstitutionIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredientId"/>
        <many-to-one class="Unit" column="unit" name="unit"/>
        <property name="quantity"/>
      </composite-element>
    </set>
  </class>-->
</hibernate-mapping>

*** end *** end ***
***$$$@@@ /money-service/target/classes/hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <!-- H2 -->
    <!--        
    <property name="connection.driver_class">org.h2.Driver</property>
    <property name="connection.url">jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE</property>
    <property name="connection.username">sa</property>
    <property name="connection.password"/>
    <property name="dialect">org.hibernate.dialect.H2Dialect</property>
-->
    <!-- SQLite -->
    <property name="connection.driver_class">org.sqlite.JDBC</property>
    <property name="connection.url">jdbc:sqlite:D:/Dropbox/utopia/p-budget/budget.db</property>
    <!--<property name="connection.url">jdbc:sqlite:/Users/almatarm/Dropbox/workarea/MasterRecipe.db</property>-->
    <property name="dialect">com.almatarm.p.budget.hibernate.SQLiteDialect</property>
    <!-- MySQl -->
    <!--
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="connection.url">jdbc:mysql://localhost:3306/mysql</property>
    <property name="connection.username">root</property>
    <property name="connection.password"></property>
    <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
 -->
    <!-- JDBC connection pool (use the built-in) -->
    <property name="connection.pool_size">1</property>
    <!-- SQL dialect -->
    <!-- Disable the second-level cache  -->
    <!--<property name="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</property>-->
    <!--<property name="dialect">com.applerao.hibernatesqlite.dialect.SQLiteDialect</property>-->
    <!-- Echo all executed SQL to stdout -->
    <property name="show_sql">true</property>
    <!--Drop and re-create the database schema on startup -->
    <property name="hbm2ddl.auto">create</property>
    <property name="format_sql">true</property>
    <property name="hibernate.use_sql_comments">true</property>
    <mapping resource="Mapping.hbm.xml"/>
    <mapping class="com.almatarm.p.budget.model.Account"/>
  </session-factory>
</hibernate-configuration>

*** end *** end ***
***$$$@@@ /money-service/target/classes/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>

</beans>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/app-context2.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/persistence/PayeeMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.PayeeMapper">

    <resultMap  id="payeeResultMap"   type="Payee">
        <id     property="id"         column="ID" />
        <result property="name"       column="Name" />
        <result property="address"    column="Address" />
        <!-- 
            Table: Payee
            Mapper: PayeeMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name, Address
            Select Alone: Name
            Type: Long id; String name, address; 
        -->
    </resultMap>

</mapper>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/persistence/TagMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TagMapper">

    <resultMap  id="tagGroupResultMap"   type="TagGroup">
        <id         property="id"       column="ID" />
        <result     property="name"     column="Name" />       
        <collection property="tags"     ofType="Tag" > 
            <id     property="id"       column="Tag_ID" />      
            <result property="name"     column="Tag_Name" />   
        </collection>
        <!-- 
            Table: TagGroup
            Mapper: TagMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name
            Select Alone: Name
            FK: tags, TagGroup_ID
            Type: Long id; String name; Tag tags; 
        -->
    </resultMap>
    
    <resultMap  id="tagResultMap"   type="Tag">
        <id     property="id"       column="ID" />
        <result property="name"     column="Name" />           
        <!-- 
            Table: Tag 
            Unique: ID
            Find By: ID, Name
            Searchable: Name
            Type: Long ID; String Name; 
        -->   
    </resultMap>

<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/persistence/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.AccountMapper">

    <resultMap  id="accountResultMap"    type="Account">
        <id     property="id"            column="ID" />
        <result property="name"          column="Name" />
        <result property="description"   column="Descr" />
        <result property="notes"         column="Notes" />
        <result property="type"          column="Type" />
        <!--<result property="parentID"      column="Parent_ID" />-->
        <result property="hidden"        column="Hidden" />
        <result property="qualifiedName" column="QName" />
        <association property="parent"      column="Parent_ID"   select="findAccountByID" fetchType="lazy"/>        
        <association property="currency"     column="Currency_ID" javaType="CurrencyUnitDO">
            <id     property="id"             column="CU_ID" />
            <result property="code"           column="CU_Code" />
            <result property="description"    column="CU_Descr" />
            <result property="symbol"         column="CU_Symbol" />
            <result property="provider"       column="CU_Provider" />
            <result property="fractionDigits" column="CU_FractDigt" />
        </association>
        <discriminator column="Type" javaType="AccountType">
            <case value="CREDIT" resultMap="creditResultMap" />
            <case value="LOAN"   resultMap="loanResultMap" />            
        </discriminator>
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID, QName
            Find By: ID, QName, Name, Parent_ID
            Searchable: Name, Descr, Notes, Type, QName
            !Select Alone: 
            !FK: currency, TagGroup_ID
            Type: Long id, parentID; String name, qualifiedName, description, notes;
            Type: String name, qualifiedName, description, notes;
            Type: boolean hidden;
        -->
    </resultMap>

    <resultMap  id="creditResultMap" type="CreditAccount" extends="accountResultMap">
        <result property="limit"            column="CreditLimit" />
        <result property="statementDay"     column="StatDay" />
        <!-- 
            Type: BigDecimal limit; int statementDay;
            Class: com.almatarm.money.domain.CreditAccount
        -->
    </resultMap>
    
    <resultMap  id="loanResultMap" type="Loan" extends="accountResultMap">
        <result property="presentValue"     column="PresentValue" />
        <result property="interestRate"     column="InterestRate" />
        <!-- 
            Type: BigDecimal presentValue, interestRate;
            Class: com.almatarm.money.domain.Loan
        -->
    </resultMap>
    
    <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM 
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID;
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
            <if test="type != null">
                Account.Type = #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName = #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
            <if test="type != null">
                Account.Type LIKE #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName LIKE #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            Account.ID = #{id}
    </select>

    <select id="findAccountByQualifiedName" parameterType="String" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            QName = #{qualifiedName}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID, Hidden, QName, Currency_ID
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, CreditLimit, StatDay</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, PresentValue, InterestRate</if>) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID}, #{hidden}, #{qualifiedName}, #{currency.id}
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, #{limit}, #{statementDay}</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, #{presentValue}, #{interestRate}</if>)    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name           = #{name},
            Descr          = #{description},
            Notes          = #{notes},
            Type           = #{type},
            Parent_ID      = #{parentID},
            Hidden         = #{hidden},
            QName          = #{qualifiedName},
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">
            CreditLimit    = #{limit},
            StatDay        = #{statementDay}
            </if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">
            PresentValue   = #{presentValue},
            InterestRate   = #{interestRate}
            </if>
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
       
</mapper>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/persistence/TransactionMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TransactionMapper">

    <resultMap  id="transactionResultMap"   type="Transaction">
        <id         property="id"               column="ID" />
        <result     property="date"             column="Date" />       
        <result     property="effectiveDate"    column="EffectiveDate" />       
        <result     property="number"           column="Number" />       
        <result     property="Memo"             column="Memo" />       
        <result     property="status"           column="Status" /> 
        <result     property="type"             column="Type" /> 
        
        <!-- 
            Table: Transactions
            Mapper: TransactionMapper
            Unique: ID
            Find By: ID, Date
            Searchable: Name, Data, EffectiveDate, Number, Memo, Status
            !Select Alone: 
            !FK: tags, TagGroup_ID
            Type: Long id; Status status;
            Type: Calendar date, effectiveDate;
            Type: TransactionType type;
            Type: String number, memo;
        -->
        
    
    BigDecimal amount;
    Payee payee;
    Account account;
    Tag tag;
    MonetaryAmount foreignAmount;
    TransactionGroup transactionGroup;

    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
    
    
    </resultMap>
    
<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/persistence/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
   
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>

</mapper>

*** end *** end ***
***$$$@@@ /money-service/target/classes/com/almatarm/wimm/App.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Menu class="javax.swing.JMenuBar" name="menuBar">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="fileMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="102"/>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="openMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="111"/>
                <Property name="text" type="java.lang.String" value="Open"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="115"/>
                <Property name="text" type="java.lang.String" value="Save"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveAsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="Save As ..."/>
                <Property name="displayedMnemonicIndex" type="int" value="5"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="exitMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="120"/>
                <Property name="text" type="java.lang.String" value="Exit"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="exitMenuItemActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="editMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="101"/>
            <Property name="text" type="java.lang.String" value="Edit"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="cutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="116"/>
                <Property name="text" type="java.lang.String" value="Cut"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="copyMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="121"/>
                <Property name="text" type="java.lang.String" value="Copy"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="pasteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="112"/>
                <Property name="text" type="java.lang.String" value="Paste"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="deleteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="100"/>
                <Property name="text" type="java.lang.String" value="Delete"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="helpMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="104"/>
            <Property name="text" type="java.lang.String" value="Help"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="contentsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="99"/>
                <Property name="text" type="java.lang.String" value="Contents"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="aboutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="About"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="menuBar"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-56,0,0,3,-127"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Container class="javax.swing.JSplitPane" name="jSplitPane1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
      <SubComponents>
        <Container class="javax.swing.JSplitPane" name="jSplitPane2">
          <Properties>
            <Property name="orientation" type="int" value="0"/>
          </Properties>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
              <JSplitPaneConstraints position="left"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
          <SubComponents>
            <Container class="javax.swing.JScrollPane" name="jScrollPane1">
              <AuxValues>
                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
              </AuxValues>
              <Constraints>
                <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
                  <JSplitPaneConstraints position="top"/>
                </Constraint>
              </Constraints>

              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
              <SubComponents>
                <Component class="javax.swing.JList" name="jList1">
                  <Properties>
                    <Property name="model" type="javax.swing.ListModel" editor="org.netbeans.modules.form.editors2.ListModelEditor">
                      <StringArray count="5">
                        <StringItem index="0" value="Item 1"/>
                        <StringItem index="1" value="Item 2"/>
                        <StringItem index="2" value="Item 3"/>
                        <StringItem index="3" value="Item 4"/>
                        <StringItem index="4" value="Item 5"/>
                      </StringArray>
                    </Property>
                  </Properties>
                  <AuxValues>
                    <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
                  </AuxValues>
                </Component>
              </SubComponents>
            </Container>
          </SubComponents>
        </Container>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>

*** end *** end ***
***$$$@@@ /money-service/target/classes/log4j.properties
# Root logger option
log4j.rootLogger=Debug, stdout

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %40.40C:%4L - %m%n
*** end *** end ***
***$$$@@@ /money-service/target/classes/javamoney.properties
#Currency Conversion
conversion.default-chain=Static,xChange
*** end *** end ***
***$$$@@@ /money-service/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>money-service</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    
    <repositories>
        <!--
        Repository hosting NetBeans modules, especially APIs.
        Versions are based on IDE releases, e.g.: RELEASE691
        To create your own repository, use: nbm:populate-repository
        -->
        <repository>
            <id>netbeans</id>
            <name>NetBeans</name>
            <url>http://bits.netbeans.org/nexus/content/groups/netbeans/</url>
        </repository>
    </repositories>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>net.sf</groupId>
                    <artifactId>stat-scm</artifactId>
                    <version>1.2.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
       
        <plugins>
            <plugin>
                <groupId>net.sf</groupId>
                <artifactId>stat-scm</artifactId>
            </plugin>
        </plugins>
    </build>
    
    <reporting>
        <plugins>
            <plugin>
                <groupId>net.sf</groupId>
                <artifactId>stat-scm</artifactId>
                <version>1.2.0</version>
            </plugin>
        </plugins>
    </reporting>
    
    <dependencies>
<!--        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>HibernateHelper</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>4.2.3.Final</version>
            <type>jar</type>
        </dependency>
                <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>4.3.1.Final</version>
        </dependency>
        
-->
        
        <!-- SQLite JDBC library -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.8.11.2</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>  
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>            
        
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.14</version>
        </dependency>
        
<!--         H2 
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.190</version>
        </dependency>        -->
        
        <!-- MyBatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.3</version>
        </dependency>         
        
        <dependency> 
            <groupId>com.tunyk.currencyconverter</groupId> 
            <artifactId>currency-converter-api</artifactId> 
            <version>1.0</version> 
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>money-domain</artifactId>
            <version>1.0</version>
        </dependency>
        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>SmallUtil</artifactId>
            <version>1.0.1</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>money-qif</artifactId>
            <version>1.0</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>money-import</artifactId>
            <version>1.0</version>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <spring.framework.version>4.2.4.RELEASE</spring.framework.version>
    </properties>
    <name>money-service</name>
</project>
*** end *** end ***
***$$$@@@ /money-service/nbactions.xml
<?xml version="1.0" encoding="UTF-8"?>
<actions>
        <action>
            <actionName>CUSTOM-stat-scm:stats</actionName>
            <displayName>stat-scm:stats</displayName>
            <goals>
                <goal>stat-scm:stats</goal>
            </goals>
        </action>
    </actions>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/data.sql
INSERT INTO TagGroup (ID, Name) VALUES (1, 'Default');

INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (1, 'Orange', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (2, 'Yellow', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (3, 'Green', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (4, 'Blue', 1);
INSERT INTO Tag (ID, Name, TagGroup_ID) VALUES (5, 'Red', 1);

INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (1, 'Shukran', 'Shukran', 'Reward Points', 'Shukran', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (2, 'Qitaf', 'STC Reward Points', 'Reward Points', 'Qitaf', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (3, 'ICSAB', 'SABB ICSAB', 'Reward Points', 'ICSAB', 0);

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/sqlite.properties
driverClass =org.sqlite.JDBC
url = jdbc:sqlite:wimm.db
*** end *** end ***
***$$$@@@ /money-service/src/main/resources/schema.sql
CREATE TABLE Account (
    ID                INTEGER       NOT NULL
                                    CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    NAME              VARCHAR (32)  NOT NULL,
    DESCR             VARCHAR (128),
    TYPE              VARCHAR (4)   NOT NULL,
    NOTES             TEXT,
    CURRENCY          VARCHAR (12)  NOT NULL,
    CURRENCY_PROVIDER VARCHAR (32),
    BALANCE           REAL          DEFAULT 0,
    HIDDEN            BOOLEAN,
    CREDIT_LIMIT      REAL,
    STAT_DAY          INTEGER,
    PARENT_ID         INTEGER,
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        PARENT_ID
    )
    REFERENCES Account (ID) 
);


CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    NAME    VARCHAR (64)  UNIQUE
                          NOT NULL,
    ADDRESS VARCHAR (256) 
);

CREATE TABLE Transaction_Group (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);

CREATE TABLE Transactions (
    ID             INTEGER       NOT NULL
                                 CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE           DATE          NOT NULL,
    EFFECTIVE_DATE DATE,
    AMOUNT         REAL          DEFAULT (0),
    STATUS         CHAR (1)      NOT NULL
                                 DEFAULT N,
    NUMBER         VARCHAR (12),
    MEMO           VARCHAR (128),
    ACCOUNT_ID     INTEGER       CONSTRAINT FK_ACCOUNT_TRANSACTION REFERENCES Account (ID),
    PAYEE_ID       INTEGER       CONSTRAINT FK_PAYEE_TRANSACTION REFERENCES Payee (ID) 
);

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/META-INF/persistence.xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="com.almatarm_p-budget_jar_1.0-SNAPSHOTPU" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <properties>
      <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sample"/>
      <property name="javax.persistence.jdbc.user" value="app"/>
      <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
      <property name="javax.persistence.jdbc.password" value="app"/>
      <property name="hibernate.cache.provider_class" value="org.hibernate.cache.NoCacheProvider"/>
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
    </properties>
  </persistence-unit>
</persistence>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/wimm.db
SQLite format 3   @                                                                   -�	� �    �����                                                                  �]�tableTagGroupTagGroupCREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
)/C indexsqlite_autoindex_TagGroup_1TagGroup�|�WtablePayeePayeeCREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
))= indexsqlite_autoindex_Payee_1Payee   P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�0--�tableTransactionGroupTransactionGroupCREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMEN      
   	   
   	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 � ������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ;sqlitestudio_temp_table
Account%TransactionsTagCurrency �	TagGroup                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
 Default
   � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
	Default      �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #�c )ESPSpanish PesetaCurrencyESP�  � M��� ���                                                                  �]�tableTagGroupTagGroup                                                                    �]�tableTagGroupTagGroupCREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
)/C indexsqlite_autoindex_TagGroup_1TagGroup�|�WtablePayeePayeeCREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
))= indexsqlite_autoindex_Payee_1Payee   P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�0--�tableTransactionGroupTransactionGroupCREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
)6  : � : : G                                        �y--�%tableAccount_TagGroupAccount_TagGroupCREATE TABLE Account_TagGroup (
    ACCOUNT_ID   INTEGER REFERENCES Currency (ID) 
                         NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                         NOT NULL
)  X;;�Atablesqlitestudio_temp_tablesqlitestudio_temp_tableCREATE TABLE "sqlitestudio_temp_table" (
    ID           INTEGER      NOT NULL
                              CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name         VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAG_GROUP_TAG REFERENCES TagGroup (ID) 
)�o�1tableCurrencyCurrencyCREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL
)      �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              	Red   � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              	Red
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  �  �� !               �%%�tableTransactionsTransactionsCREATE TABLE Transactions (
    ID                  INTEGER         NOT NULL
              �Y	;;�Itablesqlitestudio_temp_tablesqlitestudio_temp_�!%%�tableTransactionsTransactionsCREATE TABLE Transactions (ID INTEGER NOT NULL CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT, Date DATE NOT NULL, Effective_Date DATE NOT NULL, Amount INTEGER (13, 0) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Status CHAR (1) NOT NULL DEFAULT N, Number VARCHAR (12), Memo VARCHAR (128), Account_ID INTEGER CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID), Payee_ID INTEGER CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID), TransGroup_ID INTEGER CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID), tag_ID INTEGER CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID), ForeignAmount INTEGER (13), ForeignScale INTEGER (2), ForeignCurrency_ID INTEGER CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE                DATE            NOT NULL,
    EFFECTIVE_DATE      DATE            NOT NULL,
    AMOUNT              INTEGER (13, 0) DEFAULT (0),
    SCALE               INTEGER (2)     DEFAULT (2),
    STATUS              CHAR (1)        NOT NULL
                                        DEFAULT N,
    NUMBER              VARCHAR (12),
    MEMO                VARCHAR (128),
    ACCOUNT_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    PAYEE_ID            INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TRANS_GROUP_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    TAG_ID              INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    FOREIGN_AMOUNT      INTEGER (13),
    FOREIGN_SCALE       INTEGER (2),
    FOREIGN_CURRENCY_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        �B;;�tablesqlitestudio_temp_tablesqlitestudio_temp_tableCREATE TABLE "sqlitestudio_temp_table" (
    ID                  INTEGER         NOT NULL
                                        CONSTRAIN   �y--�%tableAccount_TagGroupAccount_TagGroupCREATE TABLE Account_TagGroup (
    ACCOUNT_ID   INTEGER REFERENCES Currency (ID) 
                         NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                         NOT NULL
)   �%%�tableTransactionsTransactionsCREATE TABLE Transactions (
    ID                  INTEGER         NOT NULL
                     M
a; indexsqlite_autoindex_sqlitestudio_temp_table_1sqlitestudio_temp_table
         NSACTION_ID PRIMARY KEY AUTOINCREMENT,
    DATE                DATE            NOT NULL,
    EFFECTIVE_DATE      DATE            NOT NULL,
    AMOUNT              INTEGER (13, 0) DEFAULT (0),
    SCALE               INTEGER (2)     DEFAULT (2),
    STATUS              CHAR (1)        NOT NULL
                                        DEFAULT N,
    NUMBER              VARCHAR (12),
    MEMO                VARCHAR (128),
    ACCOUNT_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    PAYEE_ID            INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TRANS_GROUP_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    TAG_ID              INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    FOREIGN_AMOUNT      INTEGER (13),
    FOREIGN_SCALE       INTEGER (2),
    FOREIGN_CURRENCY_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
)    �  � � �                                                                                                                                                           -A indexsqlite_autoindex_Account_1Account   �!%%�tableTransactionsTransactionsCREATE TABLE Transactions (ID INTEGER NOT NULL CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT, Date DATE NOT NULL, Effective_Date DATE NOT NULL, Amount INTEGER (13, 0) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Status CHAR (1) NOT NULL DEFAULT N, Number VARCHAR (12), Memo VARCHAR (128), Account_ID INTEGER CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID), Payee_ID INTEGER CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID), TransGroup_ID INTEGER CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID), tag_ID INTEGER CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID), ForeignAmount INTEGER (13), ForeignScale INTEGER (2), ForeignCurrency_ID INTEGER CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID))    � �� �                                                                                                                                                                                   �M�tableTagTagCREATE TABLE Tag (ID INTEGER NOT NULL CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT, Name VARCHAR (32) NOT NULL, TagGroup_ID INTEGER CONSTRAINT FK_TAGGROUP_TAG REFERENCES TagGroup (ID))-A indexsqlite_autoindex_Account_1Account�=�QtableAccountAccountCREATE TABLE Account (ID INTEGER NOT NULL CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT, Name VARCHAR (32) NOT NULL, Descr VARCHAR (128), Type VARCHAR (4) NOT NULL, Notes VARCHAR (128), CreditLimit INTEGER, StatDay INTEGER, Hidden BOOLEAN DEFAULT (0), Balance INTEGER (13) DEFAULT (0), Scale INTEGER (2) DEFAULT (2), Currency_ID INTEGER CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID), Parent_ID INTEGER REFERENCES Account (ID), CONSTRAINT ID UNIQUE (ID), CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (Parent_ID) REFERENCES Account (ID))
*** end *** end ***
***$$$@@@ /money-service/src/main/resources/schema-export2.sql
--
-- File generated with SQLiteStudio v3.0.7 on Fri Feb 5 20:48:14 2016
--
-- Text encoding used: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Account
DROP TABLE IF EXISTS Account;

CREATE TABLE Account (
    ID          INTEGER       NOT NULL
                              CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    Name   Fic     VARCHAR (32)  NOT NULL,
    Descr       VARCHAR (128),
    Type        VARCHAR (4)   NOT NULL,
    Notes       VARCHAR (128),
    CreditLimit INTEGER,
    StatDay     INTEGER,
    Hidden      BOOLEAN       DEFAULT (0),
    Balance     INTEGER (13)  DEFAULT (0),
    Scale       INTEGER (2)   DEFAULT (2),
    Currency_ID INTEGER       CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID),
    Parent_ID   INTEGER       REFERENCES Account (ID),
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        Parent_ID
    )
    REFERENCES Account (ID) 
);


-- Table: Currency
DROP TABLE IF EXISTS Currency;

CREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL
);

INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (228, 'ZMK', 'Zambian Kwacha', 'Currency', 'ZMK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (229, 'KRW', 'South Korean Won', 'Currency', 'KRW', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (230, 'BDT', 'Bangladeshi Taka', 'Currency', 'BDT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (231, 'UZS', 'Uzbekistan Som', 'Currency', 'UZS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (232, 'UYU', 'Uruguayan Peso', 'Currency', 'UYU', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (233, 'GNF', 'Guinean Franc', 'Currency', 'GNF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (234, 'AZM', 'Azerbaijani Manat (1993-2006)', 'Currency', 'AZM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (235, 'XUA', 'ADB Unit of Account', 'Currency', 'XUA', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (236, 'TND', 'Tunisian Dinar', 'Currency', 'TND', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (237, 'CLF', 'Chilean Unit of Account (UF)', 'Currency', 'CLF', 4);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (239, 'VEB', 'Venezuelan Bolívar (1871-2008)', 'Currency', 'VEB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (240, 'XSU', 'Sucre', 'Currency', 'XSU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (241, 'BRL', 'Brazilian Real', 'Currency', 'BRL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (242, 'XOF', 'CFA Franc BCEAO', 'Currency', 'XOF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (243, 'YUM', 'Yugoslavian New Dinar (1994-2002)', 'Currency', 'YUM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (244, 'PEN', 'Peruvian Nuevo Sol', 'Currency', 'PEN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (245, 'VUV', 'Vanuatu Vatu', 'Currency', 'VUV', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (246, 'GIP', 'Gibraltar Pound', 'Currency', 'GIP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (247, 'AFA', 'Afghan Afghani (1927-2002)', 'Currency', 'AFA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (248, 'INR', 'Indian Rupee', 'Currency', 'INR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (249, 'SYP', 'Syrian Pound', 'Currency', 'SYP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (250, 'CHW', 'CHW', 'Currency', 'CHW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (251, 'MRO', 'Mauritanian Ouguiya', 'Currency', 'MRO', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (252, 'FKP', 'Falkland Islands Pound', 'Currency', 'FKP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (253, 'TZS', 'Tanzanian Shilling', 'Currency', 'TZS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (254, 'LYD', 'Libyan Dinar', 'Currency', 'LYD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (255, 'TPE', 'Timorese Escudo', 'Currency', 'TPE', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (256, 'HUF', 'Hungarian Forint', 'Currency', 'HUF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (257, 'BGL', 'Bulgarian Hard Lev', 'Currency', 'BGL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (258, 'FIM', 'Finnish Markka', 'Currency', 'FIM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (259, 'FRF', 'French Franc', 'Currency', 'FRF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (260, 'CDF', 'Congolese Franc', 'Currency', 'CDF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (262, 'PGK', 'Papua New Guinean Kina', 'Currency', 'PGK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (263, 'PHP', 'Philippine Peso', 'Currency', 'PHP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (264, 'SSP', 'South Sudanese Pound', 'Currency', 'SSP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (265, 'IRR', 'Iranian Rial', 'Currency', 'IRR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (266, 'ZWN', 'ZWN', 'Currency', 'ZWN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (267, 'CUC', 'Cuban Convertible Peso', 'Currency', 'CUC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (268, 'SZL', 'Swazi Lilangeni', 'Currency', 'SZL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (269, 'NAD', 'Namibian Dollar', 'Currency', 'NAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (270, 'ATS', 'Austrian Schilling', 'Currency', 'ATS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (271, 'LUF', 'Luxembourgian Franc', 'Currency', 'LUF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (272, 'DKK', 'Danish Krone', 'Currency', 'DKK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (273, 'MNT', 'Mongolian Tugrik', 'Currency', 'MNT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (274, 'THB', 'Thai Baht', 'Currency', 'THB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (275, 'MMK', 'Myanma Kyat', 'Currency', 'MMK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (276, 'CYP', 'Cypriot Pound', 'Currency', 'CYP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (277, 'UGX', 'Ugandan Shilling', 'Currency', 'UGX', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (278, 'XBB', 'European Monetary Unit', 'Currency', 'XBB', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (279, 'IEP', 'Irish Pound', 'Currency', 'IEP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (280, 'JOD', 'Jordanian Dinar', 'Currency', 'JOD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (281, 'XBA', 'European Composite Unit', 'Currency', 'XBA', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (282, 'BHD', 'Bahraini Dinar', 'Currency', 'BHD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (283, 'SVC', 'Salvadoran Colón', 'Currency', 'SVC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (284, 'AYM', 'AYM', 'Currency', 'AYM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (285, 'XPD', 'Palladium', 'Currency', 'XPD', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (286, 'MAD', 'Moroccan Dirham', 'Currency', 'MAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (287, 'ARS', 'Argentine Peso', 'Currency', 'ARS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (288, 'MXN', 'Mexican Peso', 'Currency', 'MXN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (289, 'RON', 'Romanian Leu', 'Currency', 'RON', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (290, 'VEF', 'Venezuelan Bolívar', 'Currency', 'VEF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (291, 'RUR', 'Russian Ruble (1991-1998)', 'Currency', 'RUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (292, 'HNL', 'Honduran Lempira', 'Currency', 'HNL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (293, 'AZN', 'Azerbaijani Manat', 'Currency', 'AZN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (294, 'LRD', 'Liberian Dollar', 'Currency', 'LRD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (295, 'SKK', 'Slovak Koruna', 'Currency', 'SKK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (296, 'XDR', 'Special Drawing Rights', 'Currency', 'XDR', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (297, 'GMD', 'Gambian Dalasi', 'Currency', 'GMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (298, 'ISK', 'Icelandic Króna', 'Currency', 'ISK', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (300, 'ZAR', 'South African Rand', 'Currency', 'ZAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (301, 'KHR', 'Cambodian Riel', 'Currency', 'KHR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (302, 'CLP', 'Chilean Peso', 'Currency', 'CLP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (303, 'STD', 'São Tomé and Príncipe Dobra', 'Currency', 'STD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (304, 'BZD', 'Belize Dollar', 'Currency', 'BZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (305, 'YER', 'Yemeni Rial', 'Currency', 'YER', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (306, 'GHC', 'Ghanaian Cedi (1979-2007)', 'Currency', 'GHC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (307, 'TMT', 'Turkmenistani Manat', 'Currency', 'TMT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (308, 'BOB', 'Bolivian Boliviano', 'Currency', 'BOB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (309, 'HTG', 'Haitian Gourde', 'Currency', 'HTG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (310, 'BWP', 'Botswanan Pula', 'Currency', 'BWP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (311, 'SLL', 'Sierra Leonean Leone', 'Currency', 'SLL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (312, 'MVR', 'Maldivian Rufiyaa', 'Currency', 'MVR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (313, 'NLG', 'Dutch Guilder', 'Currency', 'NLG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (314, 'USS', 'US Dollar (Same day)', 'Currency', 'USS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (315, 'BYR', 'Belarusian Ruble', 'Currency', 'BYR', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (316, 'ADP', 'Andorran Peseta', 'Currency', 'ADP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (317, 'ANG', 'Netherlands Antillean Guilder', 'Currency', 'ANG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (318, 'BTN', 'Bhutanese Ngultrum', 'Currency', 'BTN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (319, 'TJS', 'Tajikistani Somoni', 'Currency', 'TJS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (320, 'DJF', 'Djiboutian Franc', 'Currency', 'DJF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (321, 'KGS', 'Kyrgystani Som', 'Currency', 'KGS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (322, 'ETB', 'Ethiopian Birr', 'Currency', 'ETB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (323, 'OMR', 'Omani Rial', 'Currency', 'OMR', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (324, 'NGN', 'Nigerian Naira', 'Currency', 'NGN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (325, 'BOV', 'Bolivian Mvdol', 'Currency', 'BOV', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (326, 'SCR', 'Seychellois Rupee', 'Currency', 'SCR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (327, 'LBP', 'Lebanese Pound', 'Currency', 'LBP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (328, 'MXV', 'Mexican Investment Unit', 'Currency', 'MXV', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (329, 'UYI', 'UYI', 'Currency', 'UYI', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (330, 'PLN', 'Polish Zloty', 'Currency', 'PLN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (331, 'ZWD', 'Zimbabwean Dollar (1980-2008)', 'Currency', 'ZWD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (332, 'ERN', 'Eritrean Nakfa', 'Currency', 'ERN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (333, 'MGF', 'Malagasy Franc', 'Currency', 'MGF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (334, 'XPF', 'CFP Franc', 'Currency', 'XPF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (335, 'BND', 'Brunei Dollar', 'Currency', 'BND', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (336, 'IDR', 'Indonesian Rupiah', 'Currency', 'IDR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (337, 'ROL', 'Romanian Leu (1952-2006)', 'Currency', 'ROL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (338, 'XCD', 'East Caribbean Dollar', 'Currency', 'XCD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (339, 'TOP', 'Tongan Paʻanga', 'Currency', 'TOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (340, 'NOK', 'Norwegian Krone', 'Currency', 'NOK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (341, 'SDG', 'Sudanese Pound', 'Currency', 'SDG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (342, 'COU', 'COU', 'Currency', 'COU', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (343, 'EUR', 'Euro', 'Currency', 'EUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (344, 'SAR', 'Saudi Riyal', 'Currency', 'SAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (345, 'MGA', 'Malagasy Ariary', 'Currency', 'MGA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (346, 'SOS', 'Somali Shilling', 'Currency', 'SOS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (347, 'ITL', 'Italian Lira', 'Currency', 'ITL', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (348, 'KMF', 'Comorian Franc', 'Currency', 'KMF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (349, 'TRL', 'Turkish Lira (1922-2005)', 'Currency', 'TRL', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (350, 'PAB', 'Panamanian Balboa', 'Currency', 'PAB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (351, 'XBC', 'European Unit of Account (XBC)', 'Currency', 'XBC', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (352, 'HRK', 'Croatian Kuna', 'Currency', 'HRK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (353, 'KES', 'Kenyan Shilling', 'Currency', 'KES', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (354, 'BYB', 'Belarusian New Ruble (1994-1999)', 'Currency', 'BYB', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (355, 'MTL', 'Maltese Lira', 'Currency', 'MTL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (356, 'KYD', 'Cayman Islands Dollar', 'Currency', 'KYD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (357, 'BIF', 'Burundian Franc', 'Currency', 'BIF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (358, 'MYR', 'Malaysian Ringgit', 'Currency', 'MYR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (359, 'USD', 'US Dollar', 'Currency', '$', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (360, 'BMD', 'Bermudan Dollar', 'Currency', 'BMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (361, 'BBD', 'Barbadian Dollar', 'Currency', 'BBD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (362, 'LAK', 'Laotian Kip', 'Currency', 'LAK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (363, 'GYD', 'Guyanaese Dollar', 'Currency', 'GYD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (364, 'MZM', 'Mozambican Metical (1980-2006)', 'Currency', 'MZM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (365, 'WST', 'Samoan Tala', 'Currency', 'WST', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (366, 'XBD', 'European Unit of Account (XBD)', 'Currency', 'XBD', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (367, 'GWP', 'Guinea-Bissau Peso', 'Currency', 'GWP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (368, 'USN', 'US Dollar (Next day)', 'Currency', 'USN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (369, 'AMD', 'Armenian Dram', 'Currency', 'AMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (370, 'VND', 'Vietnamese Dong', 'Currency', 'VND', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (371, 'FJD', 'Fijian Dollar', 'Currency', 'FJD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (372, 'TRY', 'Turkish Lira', 'Currency', 'TRY', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (373, 'KZT', 'Kazakhstani Tenge', 'Currency', 'KZT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (374, 'SIT', 'Slovenian Tolar', 'Currency', 'SIT', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (375, 'MDL', 'Moldovan Leu', 'Currency', 'MDL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (376, 'JMD', 'Jamaican Dollar', 'Currency', 'JMD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (377, 'RUB', 'Russian Ruble', 'Currency', 'RUB', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (378, 'MOP', 'Macanese Pataca', 'Currency', 'MOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (379, 'CRC', 'Costa Rican Colón', 'Currency', 'CRC', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (380, 'MWK', 'Malawian Kwacha', 'Currency', 'MWK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (381, 'CHF', 'Swiss Franc', 'Currency', 'CHF', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (382, 'GBP', 'British Pound Sterling', 'Currency', 'GBP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (383, 'TMM', 'Turkmenistani Manat (1993-2009)', 'Currency', 'TMM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (384, 'PTE', 'Portuguese Escudo', 'Currency', 'PTE', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (385, 'JPY', 'Japanese Yen', 'Currency', 'JPY', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (386, 'TWD', 'New Taiwan Dollar', 'Currency', 'TWD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (387, 'COP', 'Colombian Peso', 'Currency', 'COP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (388, 'UAH', 'Ukrainian Hryvnia', 'Currency', 'UAH', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (389, 'XFO', 'French Gold Franc', 'Currency', 'XFO', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (390, 'CVE', 'Cape Verdean Escudo', 'Currency', 'CVE', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (391, 'EGP', 'Egyptian Pound', 'Currency', 'EGP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (392, 'PKR', 'Pakistani Rupee', 'Currency', 'PKR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (393, 'PYG', 'Paraguayan Guarani', 'Currency', 'PYG', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (394, 'CHE', 'CHE', 'Currency', 'CHE', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (395, 'XAU', 'Gold', 'Currency', 'XAU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (396, 'AOA', 'Angolan Kwanza', 'Currency', 'AOA', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (397, 'EEK', 'Estonian Kroon', 'Currency', 'EEK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (398, 'BGN', 'Bulgarian Lev', 'Currency', 'BGN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (399, 'HKD', 'Hong Kong Dollar', 'Currency', 'HKD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (400, 'ZWL', 'Zimbabwean Dollar (2009)', 'Currency', 'ZWL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (401, 'BSD', 'Bahamian Dollar', 'Currency', 'BSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (402, 'GEL', 'Georgian Lari', 'Currency', 'GEL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (403, 'NPR', 'Nepalese Rupee', 'Currency', 'NPR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (404, 'CUP', 'Cuban Peso', 'Currency', 'CUP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (405, 'MUR', 'Mauritian Rupee', 'Currency', 'MUR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (406, 'SDD', 'Sudanese Dinar (1992-2007)', 'Currency', 'SDD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (407, 'QAR', 'Qatari Rial', 'Currency', 'QAR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (408, 'CNY', 'Chinese Yuan', 'Currency', 'CNY', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (409, 'GHS', 'Ghanaian Cedi', 'Currency', 'GHS', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (410, 'GTQ', 'Guatemalan Quetzal', 'Currency', 'GTQ', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (411, 'MKD', 'Macedonian Denar', 'Currency', 'MKD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (412, 'XAG', 'Silver', 'Currency', 'XAG', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (413, 'DZD', 'Algerian Dinar', 'Currency', 'DZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (414, 'GRD', 'Greek Drachma', 'Currency', 'GRD', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (415, 'CSD', 'Serbian Dinar (2002-2006)', 'Currency', 'CSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (416, 'XXX', 'Unknown Currency', 'Currency', 'XXX', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (417, 'NZD', 'New Zealand Dollar', 'Currency', 'NZD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (418, 'LKR', 'Sri Lankan Rupee', 'Currency', 'LKR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (419, 'ZWR', 'Zimbabwean Dollar (2008)', 'Currency', 'ZWR', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (420, 'AED', 'United Arab Emirates Dirham', 'Currency', 'AED', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (421, 'DOP', 'Dominican Peso', 'Currency', 'DOP', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (422, 'BEF', 'Belgian Franc', 'Currency', 'BEF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (423, 'SBD', 'Solomon Islands Dollar', 'Currency', 'SBD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (424, 'SGD', 'Singapore Dollar', 'Currency', 'SGD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (425, 'XTS', 'Testing Currency Code', 'Currency', 'XTS', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (426, 'RSD', 'Serbian Dinar', 'Currency', 'RSD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (427, 'LSL', 'Lesotho Loti', 'Currency', 'LSL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (428, 'XPT', 'Platinum', 'Currency', 'XPT', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (429, 'KWD', 'Kuwaiti Dinar', 'Currency', 'KWD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (430, 'IQD', 'Iraqi Dinar', 'Currency', 'IQD', 3);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (431, 'TTD', 'Trinidad and Tobago Dollar', 'Currency', 'TTD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (432, 'SRD', 'Surinamese Dollar', 'Currency', 'SRD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (433, 'LTL', 'Lithuanian Litas', 'Currency', 'LTL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (434, 'ESP', 'Spanish Peseta', 'Currency', 'ESP', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (435, 'XFU', 'French UIC-Franc', 'Currency', 'XFU', -1);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (436, 'NIO', 'Nicaraguan Córdoba', 'Currency', 'NIO', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (437, 'BAM', 'Bosnia-Herzegovina Convertible Mark', 'Currency', 'BAM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (438, 'SRG', 'Surinamese Guilder', 'Currency', 'SRG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (439, 'AUD', 'Australian Dollar', 'Currency', 'AUD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (440, 'SEK', 'Swedish Krona', 'Currency', 'SEK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (441, 'KPW', 'North Korean Won', 'Currency', 'KPW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (442, 'XAF', 'CFA Franc BEAC', 'Currency', 'XAF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (443, 'CAD', 'Canadian Dollar', 'Currency', 'CAD', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (444, 'CZK', 'Czech Republic Koruna', 'Currency', 'CZK', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (445, 'LVL', 'Latvian Lats', 'Currency', 'LVL', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (446, 'AFN', 'Afghan Afghani', 'Currency', 'AFN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (447, 'AWG', 'Aruban Florin', 'Currency', 'AWG', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (448, 'MZN', 'Mozambican Metical', 'Currency', 'MZN', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (449, 'RWF', 'Rwandan Franc', 'Currency', 'RWF', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (450, 'ZMW', 'ZMW', 'Currency', 'ZMW', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (451, 'DEM', 'German Mark', 'Currency', 'DEM', 2);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (452, 'Shukran', 'Shukran', 'Reward Points', 'Shukran', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (453, 'Qitaf', 'STC Reward Points', 'Reward Points', 'Qitaf', 0);
INSERT INTO Currency (ID, Code, Descr, Provider, Symbol, FractDigt) VALUES (454, 'ICSAB', 'SABB ICSAB', 'Reward Points', 'ICSAB', 0);

-- Table: Account_TagGroup
DROP TABLE IF EXISTS Account_TagGroup;

CREATE TABLE Account_TagGroup (
    ACCOUNT_ID  INTEGER REFERENCES Currency (ID) 
                        NOT NULL,
    TagGroup_ID INTEGER REFERENCES TAG_GROUP (ID) 
                        NOT NULL
);


-- Table: Tag
DROP TABLE IF EXISTS Tag;

CREATE TABLE Tag (
    ID          INTEGER      NOT NULL
                             CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAGGROUP_TAG REFERENCES TagGroup (ID) 
);


-- Table: Transactions
DROP TABLE IF EXISTS Transactions;

CREATE TABLE Transactions (
    ID                 INTEGER         NOT NULL
                                       CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    Date               DATE            NOT NULL,
    Effective_Date     DATE            NOT NULL,
    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Number             VARCHAR (12),
    Memo               VARCHAR (128),
    Account_ID         INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
);


-- Table: TagGroup
DROP TABLE IF EXISTS TagGroup;

CREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
);

INSERT INTO TagGroup (ID, Name) VALUES (1, 'Default');

-- Table: TransactionGroup
DROP TABLE IF EXISTS TransactionGroup;

CREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);


-- Table: Payee
DROP TABLE IF EXISTS Payee;

CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/TODO
Features:
    Backup files are automatically generated when appropriate.

Terminology:
    Account registers
    Hierarchy of accounts
    Type of Accounts:
        Asset: Cash, Bank, Stock, Mutual Fund, Accounts Receivable
        Liability: Credit Card, Accounts Payable, and Liability
        Equity
        Income
        Expense

Transaction:
    Date : Num : Description : Transfer (Budget : transfer Account) : R Deposit : Withdrawal : Balance

    R : When you write a check for something, you should enter the transaction 
    into GnuCash. The reconciliation R field of the transaction will initially 
    contain n (new). Your new entry will contribute to the total balance, but not to 
    the cleared and reconciled balance. Later, if you think that the check has been 
    cashed, you might click on the transaction’s R field to change it to c (cleared).
    When you do this, the cleared balance will change to include this amount. When 
    the bank statement arrives, you can then compare it to what you’ve recorded in 
    GnuCash by opening the reconciliation window. There, you will be able to change 
    the R field to y (reconciled).

Scheduled Transactions
    start date, frequency and a little description
*** end *** end ***
***$$$@@@ /money-service/src/main/resources/Mapping.hbm.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.almatarm.p.budget.model">
  <!-- Payee Class -->
  <class name="com.almatarm.wimm.domain3.Payee" table="payees">
    <id column="payee_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name" not-null="true"/>
    <property length="128" name="address"/>
  </class>
  <!-- Category Class -->
  <class name="Category" table="categories">
    <id column="cat_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="master" not-null="true"/>
    <property length="48" name="category" not-null="true"/>
  </class>
  <!-- Account
  <class name="Account" table="accounts">
    <id column="account_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="48" name="name"        not-null="true"/>
    <property length="128" name="description" column="desc"/>
    <property length="128" name="note"/>
    <property name="limit"/>
    <property name="balance"/>
    
  </class>
    
    /**
     * Type of account
     */
    Type type;
     -->
  <!--  
    Book Class  
  <class name="Book" table="books">
    <id column="book_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="64" name="author"/>
  
     constraints 
    <bag name="recipes" lazy="false">
      <key column="book_id"/>
      <one-to-many class="Recipe"/>
    </bag>
    
  </class>
  
    Recipe Class 
  <class name="Recipe" table="recipes">
    <id column="recipe_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="64" name="title" not-null="true"/>
    <property length="32" name="chapter"/>
    <property column="prep_time" name="preperationTime"/>
    <property column="cooking_time" name="cookingTime"/>
    <property column="ready_in" name="readyIn"/>
    <property name="servings"/>
    <property length="96" name="source"/>
    <property length="32" name="yield"/>
    <property name="rating"/>
    <property name="description"/>
    <property length="1024" name="directions"/>
    <property name="note"/>
    <property name="tags"/>
    
     constraints 
    <many-to-one cascade="save-update" class="Book" column="book_id" name="book" not-null="true" lazy="false"/>
    
    <many-to-one class="Recipe" column="master_recipe_id" name="master"/>
    
    <bag name="recipeIngredients" table="recipe_ingds"  lazy="false">
      <key column="recipe_id"/>
      <composite-element class="RecipeIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredient"  lazy="false"/>
        <property name="quantity" not-null="true"/>
        <many-to-one class="Unit" column="unit" name="unit" not-null="true"  lazy="false"/>
      </composite-element>
    </bag>
    
  </class>
  
    Ingredient Class 
  <class name="Ingredient" table="ingredients">
    <id column="ingredient_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <property length="32" name="name" not-null="true"/>
    <property column="name_ext" length="32" name="nameExt"/>
    <property column="brand" length="32" name="brand"/>
    <property column="short_name" length="32" name="shortName" />
    <property name="type"/>
    <property column="cost" name="cost"/>
    <property name="grade"/>
    <property column="cal_from_fat" name="caloriesFromFat"/>
    <property column="total_fat" name="totalFat"/>
    <property column="sat_fat" name="saturatedFat"/>
    <property column="poly_fat" name="polyFat"/>
    <property column="mono_fat" name="monoFlat"/>
    <property name="cholesterol"/>
    <property name="sodium"/>
    <property name="carbohydrates"/>
    <property name="fiber"/>
    <property name="sugars"/>
    <property name="protein"/>
  
    constraints
    <many-to-one class="Unit" column="default_unit" name="defaultUnit" not-null="true"/>

    <set name="units" table="ingd_units" lazy="false">
      <key column="ingd_id"/>
      <composite-element class="IngredientUnits">
        <many-to-one class="Unit" column="unit_id" name="unit" lazy="false"/>
        <property column="gram_per_unit" name="gramPerUnit"/>
        <property column="main_unit" name="mainUnit"/>
      </composite-element>
    </set>

    <set name="substitutions">
      <key column="ingd_id"/>
      <one-to-many class="Substitution"/>
    </set>

  </class>
  
   Substitution Class 
  <class name="Substitution" table="substitution">
    <id column="subst_id" name="id" type="int">
      <generator class="native"/>
    </id>
    <many-to-one class="Ingredient" column="ingd_id" name="ingredient"/>
    <property name="quantity"/>
    <many-to-one class="Unit" column="unit" name="unit"/>
    <set name="substitutions" table="subst_ingd">
      <key column="subst_id"/>
      <composite-element class="SubstitutionIngredients">
        <many-to-one class="Ingredient" column="ingd_id" name="ingredientId"/>
        <many-to-one class="Unit" column="unit" name="unit"/>
        <property name="quantity"/>
      </composite-element>
    </set>
  </class>-->
</hibernate-mapping>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <!-- H2 -->
    <!--        
    <property name="connection.driver_class">org.h2.Driver</property>
    <property name="connection.url">jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE</property>
    <property name="connection.username">sa</property>
    <property name="connection.password"/>
    <property name="dialect">org.hibernate.dialect.H2Dialect</property>
-->
    <!-- SQLite -->
    <property name="connection.driver_class">org.sqlite.JDBC</property>
    <property name="connection.url">jdbc:sqlite:D:/Dropbox/utopia/p-budget/budget.db</property>
    <!--<property name="connection.url">jdbc:sqlite:/Users/almatarm/Dropbox/workarea/MasterRecipe.db</property>-->
    <property name="dialect">com.almatarm.p.budget.hibernate.SQLiteDialect</property>
    <!-- MySQl -->
    <!--
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="connection.url">jdbc:mysql://localhost:3306/mysql</property>
    <property name="connection.username">root</property>
    <property name="connection.password"></property>
    <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
 -->
    <!-- JDBC connection pool (use the built-in) -->
    <property name="connection.pool_size">1</property>
    <!-- SQL dialect -->
    <!-- Disable the second-level cache  -->
    <!--<property name="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</property>-->
    <!--<property name="dialect">com.applerao.hibernatesqlite.dialect.SQLiteDialect</property>-->
    <!-- Echo all executed SQL to stdout -->
    <property name="show_sql">true</property>
    <!--Drop and re-create the database schema on startup -->
    <property name="hbm2ddl.auto">create</property>
    <property name="format_sql">true</property>
    <property name="hibernate.use_sql_comments">true</property>
    <mapping resource="Mapping.hbm.xml"/>
    <mapping class="com.almatarm.p.budget.model.Account"/>
  </session-factory>
</hibernate-configuration>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/app-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>

</beans>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/com/almatarm/wimm/app-context2.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/com/almatarm/wimm/persistence/PayeeMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.PayeeMapper">

    <resultMap  id="payeeResultMap"   type="Payee">
        <id     property="id"         column="ID" />
        <result property="name"       column="Name" />
        <result property="address"    column="Address" />
        <!-- 
            Table: Payee
            Mapper: PayeeMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name, Address
            Select Alone: Name
            Type: Long id; String name, address; 
        -->
    </resultMap>

</mapper>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/com/almatarm/wimm/persistence/TagMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TagMapper">

    <resultMap  id="tagGroupResultMap"   type="TagGroup">
        <id         property="id"       column="ID" />
        <result     property="name"     column="Name" />       
        <collection property="tags"     ofType="Tag" > 
            <id     property="id"       column="Tag_ID" />      
            <result property="name"     column="Tag_Name" />   
        </collection>
        <!-- 
            Table: TagGroup
            Mapper: TagMapper
            Unique: ID, Name
            Find By: ID, Name
            Searchable: Name
            Select Alone: Name
            FK: tags, TagGroup_ID
            Type: Long id; String name; Tag tags; 
        -->
    </resultMap>
    
    <resultMap  id="tagResultMap"   type="Tag">
        <id     property="id"       column="ID" />
        <result property="name"     column="Name" />           
        <!-- 
            Table: Tag 
            Unique: ID
            Find By: ID, Name
            Searchable: Name
            Type: Long ID; String Name; 
        -->   
    </resultMap>

<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/com/almatarm/wimm/persistence/AccountMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.AccountMapper">

    <resultMap  id="accountResultMap"    type="Account">
        <id     property="id"            column="ID" />
        <result property="name"          column="Name" />
        <result property="description"   column="Descr" />
        <result property="notes"         column="Notes" />
        <result property="type"          column="Type" />
        <!--<result property="parentID"      column="Parent_ID" />-->
        <result property="hidden"        column="Hidden" />
        <result property="qualifiedName" column="QName" />
        <association property="parent"      column="Parent_ID"   select="findAccountByID" fetchType="lazy"/>        
        <association property="currency"     column="Currency_ID" javaType="CurrencyUnitDO">
            <id     property="id"             column="CU_ID" />
            <result property="code"           column="CU_Code" />
            <result property="description"    column="CU_Descr" />
            <result property="symbol"         column="CU_Symbol" />
            <result property="provider"       column="CU_Provider" />
            <result property="fractionDigits" column="CU_FractDigt" />
        </association>
        <discriminator column="Type" javaType="AccountType">
            <case value="CREDIT" resultMap="creditResultMap" />
            <case value="LOAN"   resultMap="loanResultMap" />            
        </discriminator>
        <!-- 
            Table: Account
            Mapper: AccountMapper
            Unique: ID, QName
            Find By: ID, QName, Name, Parent_ID
            Searchable: Name, Descr, Notes, Type, QName
            !Select Alone: 
            !FK: currency, TagGroup_ID
            Type: Long id, parentID; String name, qualifiedName, description, notes;
            Type: String name, qualifiedName, description, notes;
            Type: boolean hidden;
        -->
    </resultMap>

    <resultMap  id="creditResultMap" type="CreditAccount" extends="accountResultMap">
        <result property="limit"            column="CreditLimit" />
        <result property="statementDay"     column="StatDay" />
        <!-- 
            Type: BigDecimal limit; int statementDay;
            Class: com.almatarm.money.domain.CreditAccount
        -->
    </resultMap>
    
    <resultMap  id="loanResultMap" type="Loan" extends="accountResultMap">
        <result property="presentValue"     column="PresentValue" />
        <result property="interestRate"     column="InterestRate" />
        <!-- 
            Type: BigDecimal presentValue, interestRate;
            Class: com.almatarm.money.domain.Loan
        -->
    </resultMap>
    
    <select id="getAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM 
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID;
    </select>

    <select id="findAccounts" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name = #{name}
            </if>
            <if test="description != null">
                Account.Descr = #{description}
            </if>
            <if test="notes != null">
                Account.Notes = #{notes}
            </if>
            <if test="type != null">
                Account.Type = #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName = #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountsLike" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        <where>
            <if test="name != null">
                Account.Name LIKE #{name}
            </if>
            <if test="description != null">
                Account.Descr LIKE #{description}
            </if>
            <if test="notes != null">
                Account.Notes LIKE #{notes}
            </if>
            <if test="type != null">
                Account.Type LIKE #{type}
            </if>
            <if test="qualifiedName != null">
                Account.QName LIKE #{qualifiedName}
            </if>
        </where>
    </select>

    <select id="findAccountByID" parameterType="Long" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            Account.ID = #{id}
    </select>

    <select id="findAccountByQualifiedName" parameterType="String" resultMap="accountResultMap">
        SELECT
            Account.ID,
            Account.Name,
            Account.Descr,
            Account.Notes,
            Account.Type,
            Account.Parent_ID,
            Account.Hidden,
            Account.QName,
            Account.CreditLimit,
            Account.StatDay,
            Account.PresentValue,
            Account.InterestRate,
            Currency.ID                    AS CU_ID,
            Currency.Code                  AS CU_Code,
            Currency.Descr                 AS CU_Descr,
            Currency.Symbol                AS CU_Symbol,
            Currency.Provider              AS CU_Provider,
            Currency.FractDigt             AS CU_FractDigt
        FROM
            Account
        LEFT OUTER JOIN Currency ON Account.Currency_ID = Currency.ID 
        WHERE
            QName = #{qualifiedName}
    </select>

    <insert id="insertAccount" parameterType="Account" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Account (Name, Descr, Notes, Type, Parent_ID, Hidden, QName, Currency_ID
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, CreditLimit, StatDay</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, PresentValue, InterestRate</if>) 
        VALUES 
            (#{name}, #{description}, #{notes}, #{type}, #{parentID}, #{hidden}, #{qualifiedName}, #{currency.id}
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">, #{limit}, #{statementDay}</if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">, #{presentValue}, #{interestRate}</if>)    
    </insert>

    <update id="updateAccount" parameterType="Account">
        UPDATE Account SET
            Name           = #{name},
            Descr          = #{description},
            Notes          = #{notes},
            Type           = #{type},
            Parent_ID      = #{parentID},
            Hidden         = #{hidden},
            QName          = #{qualifiedName},
            <if test="_parameter instanceof com.almatarm.money.domain.CreditAccount">
            CreditLimit    = #{limit},
            StatDay        = #{statementDay}
            </if>
            <if test="_parameter instanceof com.almatarm.money.domain.Loan">
            PresentValue   = #{presentValue},
            InterestRate   = #{interestRate}
            </if>
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteAccount" parameterType="long">
        DELETE FROM Account WHERE ID = #{id}
    </delete>
       
</mapper>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/com/almatarm/wimm/persistence/TransactionMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.TransactionMapper">

    <resultMap  id="transactionResultMap"   type="Transaction">
        <id         property="id"               column="ID" />
        <result     property="date"             column="Date" />       
        <result     property="effectiveDate"    column="EffectiveDate" />       
        <result     property="number"           column="Number" />       
        <result     property="Memo"             column="Memo" />       
        <result     property="status"           column="Status" /> 
        <result     property="type"             column="Type" /> 
        
        <!-- 
            Table: Transactions
            Mapper: TransactionMapper
            Unique: ID
            Find By: ID, Date
            Searchable: Name, Data, EffectiveDate, Number, Memo, Status
            !Select Alone: 
            !FK: tags, TagGroup_ID
            Type: Long id; Status status;
            Type: Calendar date, effectiveDate;
            Type: TransactionType type;
            Type: String number, memo;
        -->
        
    
    BigDecimal amount;
    Payee payee;
    Account account;
    Tag tag;
    MonetaryAmount foreignAmount;
    TransactionGroup transactionGroup;

    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
    
    
    </resultMap>
    
<!--
    //**************************************************************************
    // Tag Mapper XML
    //**************************************************************************
-->

    <select id="getTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
    </select>

    <select id="findTags" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name = #{name}
            </if>
        </where>
    </select>

    <select id="findTagsLike" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        <where>
            <if test="name != null">
                Tag.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagByID" parameterType="Long" resultMap="tagResultMap">
        SELECT
            ID, Name
        FROM
            Tag
        WHERE
            ID = #{id}
    </select>

    <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Tag (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTag" parameterType="Tag">
        UPDATE Tag SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTag" parameterType="long">
        DELETE FROM Tag WHERE ID = #{id}
    </delete>
    
<!--    
    //**************************************************************************
    // TagGroup Mapper XML
    //**************************************************************************
-->

    <select id="getTagGroups" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
    </select>

    <select id="getTagGroupsWithTags" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID;
    </select>    

    <select id="getTagGroupNamesList"  resultType="String">
        SELECT DISTINCT 
            Name
        FROM 
            TagGroup    
    </select>

    <select id="findTagGroupsLike" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>

    <select id="findTagGroupsWithTagsLike" resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        <where>
            <if test="name != null">
                TagGroup.Name LIKE #{name}
            </if>
        </where>
    </select>    

    <select id="findTagGroupByID" parameterType="Long" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            ID = #{id}
    </select>

    <select id="findTagGroupWithTagsByID" parameterType="Long" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.ID = #{id}
    </select>    

    <select id="findTagGroupByName" parameterType="String" resultMap="tagGroupResultMap">
        SELECT
            ID, Name
        FROM
            TagGroup
        WHERE
            Name = #{name}
    </select>

    <select id="findTagGroupWithTagsByName" parameterType="String" 
        resultMap="tagGroupResultMap">
        SELECT
            TagGroup.ID,
            TagGroup.Name,
            Tag.ID           AS Tag_ID,
            Tag.Name         AS Tag_Name
        FROM 
            TagGroup
        LEFT OUTER JOIN 
            Tag 
        ON 
            TagGroup.ID = Tag.TagGroup_ID
        WHERE
            TagGroup.Name = #{name}
    </select>    

    <insert id="insertTagGroup" parameterType="TagGroup" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            TagGroup (Name) 
        VALUES 
            (#{name})    
    </insert>

    <update id="updateTagGroup" parameterType="TagGroup">
        UPDATE TagGroup SET
            Name  = #{name}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteTagGroup" parameterType="long">
        DELETE FROM TagGroup WHERE ID = #{id}
    </delete>
</mapper>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/com/almatarm/wimm/persistence/CurrencyUnitMapper.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.almatarm.wimm.persistence.CurrencyUnitMapper">

    <resultMap  id="currencyUnitResultMap"   type="CurrencyUnitDO">
        <id     property="id"             column="ID" />
        <result property="code"           column="Code" />
        <result property="description"    column="Descr" />
        <result property="symbol"         column="Symbol" />
        <result property="provider"       column="Provider" />
        <result property="fractionDigits" column="FractDigt" />
        <!-- 
            Table: Currency
            Mapper: currencyMapper
            Unique: ID, Code
            Find By: ID, Name, Descr, Symbol, Provider
            Searchable: Code, Descr, Symbol, Provider
            Select Alone: Code, Provider
            Type: Long id; 
        -->
    </resultMap>
   
    <select id="getCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
    </select>

    <select id="getCurrencyUnitCodesList"  resultType="String">
        SELECT DISTINCT 
            Code
        FROM 
            Currency    
    </select>

    <select id="getCurrencyUnitProvidersList"  resultType="String">
        SELECT DISTINCT 
            Provider
        FROM 
            Currency    
    </select>

    <select id="findCurrencyUnits" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code = #{code}
            </if>
            <if test="description != null">
                Currency.Descr = #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol = #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider = #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitsLike" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        <where>
            <if test="code != null">
                Currency.Code LIKE #{code}
            </if>
            <if test="description != null">
                Currency.Descr LIKE #{description}
            </if>
            <if test="symbol != null">
                Currency.Symbol LIKE #{symbol}
            </if>
            <if test="provider != null">
                Currency.Provider LIKE #{provider}
            </if>
        </where>
    </select>

    <select id="findCurrencyUnitByID" parameterType="Long" resultMap="currencyUnitResultMap">
        SELECT
            ID, Code, Descr, Symbol, Provider, FractDigt
        FROM
            Currency
        WHERE
            ID = #{id}
    </select>

    <insert id="insertCurrencyUnit" parameterType="CurrencyUnitDO" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            Currency (Code, Descr, Symbol, Provider, FractDigt) 
        VALUES 
            (#{code}, #{description}, #{symbol}, #{provider}, #{fractionDigits})    
    </insert>

    <update id="updateCurrencyUnit" parameterType="CurrencyUnitDO">
        UPDATE Currency SET
            Code            = #{code},
            Descr           = #{description},
            Symbol          = #{symbol},
            Provider        = #{provider},
            FractDigt       = #{fractionDigits}
        WHERE 
            ID = #{id}
    </update> 

    <delete id="deleteCurrencyUnit" parameterType="long">
        DELETE FROM Currency WHERE ID = #{id}
    </delete>

</mapper>

*** end *** end ***
***$$$@@@ /money-service/src/main/resources/log4j.properties
# Root logger option
log4j.rootLogger=Debug, stdout

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %40.40C:%4L - %m%n
*** end *** end ***
***$$$@@@ /money-service/src/main/resources/javamoney.properties
#Currency Conversion
conversion.default-chain=Static,xChange
*** end *** end ***
***$$$@@@ /money-service/src/main/resources/schema-export.sql
--
-- File generated with SQLiteStudio v3.0.7 on Sat Feb 6 13:07:44 2016
--
-- Text encoding used: UTF-8
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Payee
DROP TABLE IF EXISTS Payee;

CREATE TABLE Payee (
    ID      INTEGER       CONSTRAINT PK_PAYEE_ID PRIMARY KEY AUTOINCREMENT
                          NOT NULL,
    Name    VARCHAR (64)  UNIQUE
                          NOT NULL,
    Address VARCHAR (256) 
);


-- Table: Tag
DROP TABLE IF EXISTS Tag;

CREATE TABLE Tag (
    ID          INTEGER      NOT NULL
                             CONSTRAINT PK_TAG_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32) NOT NULL,
    TagGroup_ID INTEGER      CONSTRAINT FK_TAG_GROUP_TAG REFERENCES TagGroup (ID) ON DELETE CASCADE
                                                                                  ON UPDATE CASCADE
);


-- Table: TagGroup
DROP TABLE IF EXISTS TagGroup;

CREATE TABLE TagGroup (
    ID   INTEGER      CONSTRAINT PK_TAG_GROUP_ID PRIMARY KEY AUTOINCREMENT
                      NOT NULL,
    Name VARCHAR (32) UNIQUE
                      NOT NULL
);


-- Table: Account
DROP TABLE IF EXISTS Account;

CREATE TABLE Account (
    ID          INTEGER       NOT NULL
                              CONSTRAINT PK_ACCOUNT_ID PRIMARY KEY AUTOINCREMENT,
    Name        VARCHAR (32)  NOT NULL,
    Descr       VARCHAR (128),
    Type        VARCHAR (4)   NOT NULL,
    Notes       TEXT,
    CreditLimit INTEGER,
    StatDay     INTEGER,
    Hidden      BOOLEAN       DEFAULT (0),
    Balance     INTEGER (13)  DEFAULT (0),
    Scale       INTEGER (2)   DEFAULT (2),
    Currency_ID INTEGER       CONSTRAINT FK_CURRENCY_ACCOUNT REFERENCES Currency (ID),
    Parent_ID   INTEGER       REFERENCES Account (ID),
    CONSTRAINT ID UNIQUE (
        ID
    ),
    CONSTRAINT FK_ACCOUNT_PARENT FOREIGN KEY (
        Parent_ID
    )
    REFERENCES Account (ID),
    CONSTRAINT UQ_ACCOUNT_NAME UNIQUE (
        Name COLLATE BINARY
    )
);


-- Table: TransactionGroup
DROP TABLE IF EXISTS TransactionGroup;

CREATE TABLE TransactionGroup (
    ID INTEGER CONSTRAINT PK_TRANSACTION_GROUP_ID PRIMARY KEY AUTOINCREMENT
             NOT NULL
);


-- Table: Account_TagGroup
DROP TABLE IF EXISTS Account_TagGroup;

CREATE TABLE Account_TagGroup (
    Account_ID  INTEGER REFERENCES Currency (ID) 
                        NOT NULL,
    TagGroup_ID INTEGER REFERENCES TagGroup (ID) 
                        NOT NULL
);


-- Table: Transactions
DROP TABLE IF EXISTS Transactions;

CREATE TABLE Transactions (
    ID                 INTEGER         NOT NULL
                                       CONSTRAINT PK_TRANSACTION_ID PRIMARY KEY AUTOINCREMENT,
    Date               DATE            NOT NULL,
    EffectiveDate      DATE            NOT NULL,
    Amount             INTEGER (13, 0) DEFAULT (0),
    Scale              INTEGER (2)     DEFAULT (2),
    Status             CHAR (1)        NOT NULL
                                       DEFAULT N,
    Number             VARCHAR (12),
    Memo               VARCHAR (128),
    Acount_ID          INTEGER         CONSTRAINT FK_ACCOUNT_TRANSACTIONS REFERENCES Currency (ID),
    Payee_ID           INTEGER         CONSTRAINT FK_PAYEE_TRANSACTIONS REFERENCES Payee (ID),
    TransGroup_ID      INTEGER         CONSTRAINT FK_TRANSACTION_GROUP_TRANSACTIONS REFERENCES TransactionGroup (ID),
    Tag_ID             INTEGER         CONSTRAINT FK_TAG_TRANSACTIONS REFERENCES TagGroup (ID),
    ForeignAmount      INTEGER (13),
    ForeignScale       INTEGER (2),
    ForeignCurrency_ID INTEGER         CONSTRAINT FK_CURRENCY_TRANSACTION REFERENCES Currency (ID) 
);


-- Table: Currency
DROP TABLE IF EXISTS Currency;

CREATE TABLE Currency (
    ID        INTEGER      CONSTRAINT PK_CURRENCY_ID PRIMARY KEY AUTOINCREMENT
                           NOT NULL,
    Code      VARCHAR (16) NOT NULL,
    Descr     VARCHAR (64),
    Provider  VARCHAR (64),
    Symbol    VARCHAR (16),
    FractDigt INTEGER (2)  DEFAULT (2) 
                           NOT NULL,
    CONSTRAINT UQC_CODE_PROVIDER UNIQUE (
        Code COLLATE BINARY,
        Provider COLLATE BINARY
    )
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/TestIt.java
package com.almatarm.wimm;

import java.math.BigDecimal;
import org.apache.ibatis.type.BigDecimalTypeHandler;

/**
 *
 * @author almatarm
 */
public class TestIt {
    public static void main(String[] args) {
        BigDecimalTypeHandler t;
        BigDecimal n = new BigDecimal("1542.2");
        System.out.println(n.setScale(2));
        System.out.println(n.unscaledValue() + "\t" + n.scale());
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/Util.java
package com.almatarm.wimm;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class Util {
    public static <T extends Comparable<? super T>> List<T> asSortedList(Collection<T> c) {
        List<T> list = new ArrayList<T>(c);
        Collections.sort(list);
        return list;
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/app-context2.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- H2 data source
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:schema.sql" />
        <jdbc:script location="classpath:test-data.sql" />
    </jdbc:embedded-database>
    -->
    
    <context:property-placeholder location="classpath:sqlite.properties"/>

    <!--sqlite JDBC datasource--> 
    <bean id="dataSource" 
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="${driverClass}" />
        <property name="url"         value="${url}" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven />

    <context:component-scan base-package="com.almatarm.wimm.service.mybatis" />

    <!--Define the SqlSessionFactory--> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage"  value="com.almatarm.money.domain" />
        <property name="typeHandlersPackage" value="com.almatarm.wimm.persistence" />
    </bean>

     <!--Scan for mappers and let them be autowired--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.almatarm.wimm.persistence" />
    </bean>
<!--
<settings>

	         changes from the defaults 

	       <setting name="lazyLoadingEnabled" value="false" />

	    </settings>-->
</beans>

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/StaticExchange.java
package com.almatarm.wimm.monetary;

import com.almatarm.xchange.ExchangeException;
import java.math.BigDecimal;

/**
 *
 * @author almatarm
 */
public class StaticExchange {
    
    private static String[][] exchangeTable = {
        {"SAR", "CAD", "0.37", null},
        {"CAD", "SAR", "2.70", null},
        {"USD", "SAR", "3.75", null},
        {"SAR", "USD", "0.27", null},
        
        {"ICSAB", "SAR", "1", "100"},
        
    };
    
    public static BigDecimal exchange(String from, String to, BigDecimal amount) 
            throws ExchangeNotSupportedException, ExchangeException {
        if(!isExchangeSupported(from, to)) {
            throw new ExchangeNotSupportedException("Exchanging from " + from 
                    + " to " + to + " is not supported!");
        }
        
        for (String[] exchangeRow : exchangeTable) {
            if(exchangeRow[0].equals(from) && exchangeRow[1].equals(to)) {
                BigDecimal exRate =  new BigDecimal(exchangeRow[2]).multiply(amount);
                return exRate;
            }
        }
        
        throw new ExchangeException("Could not connect to get an update for "
                    + "exchange rate from " + from + " to " + to);
    }
    
    public static boolean isExchangeSupported(String from, String to) {
        for (String[] exchangeRow : exchangeTable) {
            if(exchangeRow[0].equals(from) && exchangeRow[1].equals(to))
                return true;
        }
        return false;
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/XChangeRateProvider.java
package com.almatarm.wimm.monetary;

import com.almatarm.xchange.ExchangeException;
import com.almatarm.xchange.XChange;
import java.math.BigDecimal;
import java.util.Currency;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.CurrencyUnit;
import javax.money.convert.ConversionContext;
import javax.money.convert.ConversionQuery;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.ProviderContext;
import javax.money.convert.ProviderContextBuilder;
import javax.money.convert.RateType;
import org.javamoney.moneta.ExchangeRateBuilder;
import org.javamoney.moneta.spi.AbstractRateProvider;
import org.javamoney.moneta.spi.DefaultNumberValue;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@ServiceProvider(service=ExchangeRateProvider.class)
public class XChangeRateProvider extends AbstractRateProvider {

    private final static ProviderContext CONTEXT = ProviderContextBuilder
            .of("xChange", RateType.REALTIME)
            .set("providerDescription", "Yahoo!").build();
    
    public XChangeRateProvider() {
        super(CONTEXT);
        
    }

    @Override
    public ExchangeRate getExchangeRate(ConversionQuery conversionQuery) {
        try {
            if (!isAvailable(conversionQuery)) {
                return null;
            }
            
            CurrencyUnit base = conversionQuery.getBaseCurrency();
            CurrencyUnit term = conversionQuery.getCurrency();
            
            BigDecimal exchangeRateFactor = XChange.getExchangeRate(
                    Currency.getInstance(base.getCurrencyCode()),
                    Currency.getInstance(term.getCurrencyCode()));
            
            ExchangeRateBuilder builder = new ExchangeRateBuilder(
                    ConversionContext.of(CONTEXT.getProviderName(), 
                            RateType.REALTIME));
            builder.setBase(base);
            builder.setTerm(term);
            builder.setFactor(DefaultNumberValue.of(exchangeRateFactor));
            return builder.build();
        } catch (ExchangeException ex) {
            Logger.getLogger(XChangeRateProvider.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/ExchangeRateException.java
package com.almatarm.wimm.monetary;

/**
 *
 * @author almatarm
 */
public class ExchangeRateException extends Exception {

    /**
     * Creates a new instance of <code>ExchangeRateException</code> without
     * detail message.
     */
    public ExchangeRateException() {
    }

    /**
     * Constructs an instance of <code>ExchangeRateException</code> with the
     * specified detail message.
     *
     * @param msg the detail message.
     */
    public ExchangeRateException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/RewardPointsProvider.java
package com.almatarm.wimm.monetary;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.money.CurrencyContext;
import javax.money.CurrencyContextBuilder;
import javax.money.CurrencyQuery;
import javax.money.CurrencyUnit;
import javax.money.spi.CurrencyProviderSpi;
import org.javamoney.moneta.CurrencyUnitBuilder;
import org.openide.util.lookup.ServiceProvider;

@ServiceProvider(service = CurrencyProviderSpi.class)
public final class RewardPointsProvider implements CurrencyProviderSpi {
    public static final String NAME = "Reward Points";
    
    private Set<CurrencyUnit> currencies = new HashSet<>();
    private final CurrencyContext context = CurrencyContextBuilder.of(NAME).build();
    
    private final List<String> currencyCodes = new ArrayList<String>(
            Arrays.asList(new String[]{ "ICSAB", "Shukran", "Qitaf" }));
    private final Map<String, CurrencyUnit> currenciesMap = new HashMap<>();
    
    public RewardPointsProvider() {
        for(String code : currencyCodes) {
            CurrencyUnit cu = CurrencyUnitBuilder.of(code, context).build();
            currenciesMap.put(code, cu);
            currencies.add(cu);
        }
        currencies = Collections.unmodifiableSet(currencies);
    }

    @Override
    public Set<CurrencyUnit> getCurrencies(CurrencyQuery query) {
        Set<CurrencyUnit> foundCurrencies = new HashSet<>();
        query.getCurrencyCodes().stream().forEach( (code) -> { 
            if(currencyCodes.contains(code)) {
                foundCurrencies.add(currenciesMap.get(code));
            }
        });
        return foundCurrencies;
    } 
       
}

   
*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/ExchangeNotSupportedException.java
package com.almatarm.wimm.monetary;

/**
 *
 * @author almatarm
 */
public class ExchangeNotSupportedException extends Exception {

    /**
     * Creates a new instance of <code>ExchangeNotSupportedException</code>
     * without detail message.
     */
    public ExchangeNotSupportedException() {
    }

    /**
     * Constructs an instance of <code>ExchangeNotSupportedException</code> with
     * the specified detail message.
     *
     * @param msg the detail message.
     */
    public ExchangeNotSupportedException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/NewMain.java
package com.almatarm.wimm.monetary;

import java.util.Collection;
import java.util.Locale;
import java.util.ServiceLoader;
import javax.money.CurrencyUnit;
import javax.money.Monetary;
import javax.money.MonetaryAmount;
import javax.money.convert.CurrencyConversion;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.MonetaryConversions;
import javax.money.format.AmountFormatQueryBuilder;
import javax.money.format.MonetaryAmountFormat;
import javax.money.format.MonetaryFormats;
import org.javamoney.moneta.Money;
import org.openide.util.Lookup;


/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class NewMain {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        CurrencyUnit euro = Monetary.getCurrency("EUR");

        Monetary.getCurrencyProviderNames().stream().forEach( (name) -> {
            System.out.println(name);
        });
        
        
        Monetary.getCurrency("ICSAB");
        System.out.println(Monetary.getCurrency("Qitaf"));
        
        System.out.println("-----------------");
        System.out.println(Monetary.getCurrency("ICSAB", RewardPointsProvider.NAME));
        
//        MonetaryAmountFormat formatQueried = MonetaryFormats.getAmountFormat(
//                AmountFormatQueryBuilder.of(Locale.GERMANY)
//                .set("pattern", "####,####")
//                .build()
//        );
//
        Collection<? extends ExchangeRateProvider> results = Lookup.getDefault().lookupAll(ExchangeRateProvider.class);
        results.stream().forEach( (erp) -> { 
            System.out.println(erp.getContext().getProviderName());
        });
        
        System.out.println("-------------------------------------------------");
        ExchangeRateProvider rateProvider = MonetaryConversions.getExchangeRateProvider("Static", "xChange");
        CurrencyConversion conversion = rateProvider.getCurrencyConversion("SAR");

        MonetaryAmount amountInCAD   = Money.of(100, "CAD");
        
        MonetaryAmount amountInICSAB = Money.of(120, "ICSAB");
        MonetaryAmount amountInSAR = amountInICSAB.with(conversion);
        System.out.println(amountInICSAB + " --> " + amountInSAR);

    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/monetary/StaticChangeRateProvider.java
package com.almatarm.wimm.monetary;

import com.almatarm.xchange.ExchangeException;
import java.math.BigDecimal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.CurrencyUnit;
import javax.money.convert.ConversionContext;
import javax.money.convert.ConversionQuery;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.ProviderContext;
import javax.money.convert.ProviderContextBuilder;
import javax.money.convert.RateType;
import org.javamoney.moneta.ExchangeRateBuilder;
import org.javamoney.moneta.spi.AbstractRateProvider;
import org.javamoney.moneta.spi.DefaultNumberValue;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@ServiceProvider(service=ExchangeRateProvider.class)
public class StaticChangeRateProvider extends AbstractRateProvider {

    private final static ProviderContext CONTEXT = ProviderContextBuilder
            .of("Static", RateType.OTHER).build();
    
    public StaticChangeRateProvider() {
        super(CONTEXT);
    }

    @Override
    public ExchangeRate getExchangeRate(ConversionQuery conversionQuery) {
        try {
            if (!isAvailable(conversionQuery)) {
                return null;
            }
            
            CurrencyUnit base = conversionQuery.getBaseCurrency();
            CurrencyUnit term = conversionQuery.getCurrency();
            
            BigDecimal exchangeRateFactor = StaticExchange.exchange(
                    base.getCurrencyCode(), term.getCurrencyCode(), BigDecimal.ONE);
            
            ExchangeRateBuilder builder = new ExchangeRateBuilder(
                    ConversionContext.of(CONTEXT.getProviderName(), 
                            RateType.REALTIME));
            builder.setBase(base);
            builder.setTerm(term);
            builder.setFactor(DefaultNumberValue.of(exchangeRateFactor));
            return builder.build();
        } catch (ExchangeException | ExchangeNotSupportedException ex) {
            Logger.getLogger(StaticChangeRateProvider.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        return null;
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/StoreMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface StoreMapper {
    
    //**************************************************************************
    // TagGroup Mapper
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();
  
    public List<TagGroup> findTagGroups(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);
       
    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);
    
    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);
   
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/CurrencyUnitMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.CurrencyUnitDO;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface CurrencyUnitMapper {
    
    public List<CurrencyUnitDO> getCurrencyUnits();

    public List<String> getCurrencyUnitCodesList();

    public List<String> getCurrencyUnitProvidersList();

    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit);

    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit);

    public CurrencyUnitDO findCurrencyUnitByID(Long id);

    public void insertCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void updateCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void deleteCurrencyUnit(Long id);

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/PayeeMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.Payee;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface PayeeMapper {

    public List<Payee> getPayees();

    public List<String> getPayeeNamesList();

    public List<Payee> findPayees(Payee payee);

    public List<Payee> findPayeesLike(Payee payee);

    public Payee findPayeeByID(Long id);

    public Payee findPayeeByName(String name);

    public void insertPayee(Payee payee);

    public void updatePayee(Payee payee);

    public void deletePayee(Long id);
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/TagMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface TagMapper {
    
    //**************************************************************************
    // Tag Mapper
    //**************************************************************************

    public List<Tag> getTags();

    public List<Tag> findTags(Tag tag);

    public List<Tag> findTagsLike(Tag tag);

    public Tag findTagByID(Long id);

    public List<Tag> findTagByNameRegEx(String name);

    public void insertTag(Tag tag);

    public void updateTag(Tag tag);

    public void deleteTag(Long id);    
    
    //**************************************************************************
    // TagGroup Mapper
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();

    public List<String> getTagGroupNamesList();

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);

    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);

    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);

    public void insertTagGroup(TagGroup tagGroup);

    public void updateTagGroup(TagGroup tagGroup);

    public void deleteTagGroup(Long id);

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/AccountMapper.java
package com.almatarm.wimm.persistence;

import com.almatarm.money.domain.Account;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountMapper {
    

    //**************************************************************************
    // Account Mapper
    //**************************************************************************

    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public Account findAccountByQualifiedName(String qualifiedName);

    public void insertAccount(Account account);

    public void updateAccount(Account account);

    public void deleteAccount(Long id);

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/MonetaryAmountTypeHandler.java
package com.almatarm.wimm.persistence;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.money.MonetaryAmount;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(MonetaryAmount.class)
public class MonetaryAmountTypeHandler implements TypeHandler<MonetaryAmount> {

    @Override
    public void setParameter(PreparedStatement ps, int i, MonetaryAmount t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null;//MonetaryAmount.toMonetaryAmount(rs.getString(columnLabel));
    }

    @Override
    public MonetaryAmount getResult(ResultSet rs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(rs.getString(i));
    }

    @Override
    public MonetaryAmount getResult(CallableStatement cs, int i) throws SQLException {
        return null; //MonetaryAmount.toMonetaryAmount(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/CurrencyUnitDoTypeHandler.java
package com.almatarm.wimm.persistence;


import com.almatarm.money.domain.CurrencyUnitDO;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
//@MappedTypes(CurrencyUnitDO.class)
public class CurrencyUnitDoTypeHandler implements TypeHandler<CurrencyUnitDO> {

    @Override
    public void setParameter(PreparedStatement ps, int i, CurrencyUnitDO t, 
            JdbcType jt) throws SQLException {
//        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, String columnLabel) throws SQLException {
        return null; //CurrencyUnitDO.toCurrencyUnitDO(rs.getString(columnLabel));
    }

    @Override
    public CurrencyUnitDO getResult(ResultSet rs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(rs.getString(i));
    }

    @Override
    public CurrencyUnitDO getResult(CallableStatement cs, int i) throws SQLException {
        return null; // CurrencyUnitDO.toCurrencyUnitDO(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence/AccountTypeTypeHandler.java
package com.almatarm.wimm.persistence;


import com.almatarm.money.domain.AccountType;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(AccountType.class)
public class AccountTypeTypeHandler implements TypeHandler<AccountType> {

    @Override
    public void setParameter(PreparedStatement ps, int i, AccountType t, 
            JdbcType jt) throws SQLException {
        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public AccountType getResult(ResultSet rs, String columnLabel) throws SQLException {
        return AccountType.toAccountType(rs.getString(columnLabel));
    }

    @Override
    public AccountType getResult(ResultSet rs, int i) throws SQLException {
        return AccountType.toAccountType(rs.getString(i));
    }

    @Override
    public AccountType getResult(CallableStatement cs, int i) throws SQLException {
        return AccountType.toAccountType(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence2/CurrencyTypeHandler.java
package com.almatarm.wimm.persistence2;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Currency;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(Currency.class)
public class CurrencyTypeHandler implements TypeHandler<Currency>{

    @Override
    public void setParameter(PreparedStatement ps, int i, Currency t, JdbcType jt) 
            throws SQLException {
        ps.setString(i, t.getCurrencyCode());
    }

    @Override
    public Currency getResult(ResultSet rs, String columnLabel) 
            throws SQLException {
        return Currency.getInstance(rs.getString(columnLabel));
    }

    @Override
    public Currency getResult(ResultSet rs, int i) 
            throws SQLException {
        return Currency.getInstance(rs.getString(i));
    }

    @Override
    public Currency getResult(CallableStatement cs, int i) 
            throws SQLException {
        return Currency.getInstance(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/persistence2/AccountTypeTypeHandler.java
package com.almatarm.wimm.persistence2;

import com.almatarm.money.domain.AccountType;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@MappedTypes(AccountType.class)
public class AccountTypeTypeHandler implements TypeHandler<AccountType> {

    @Override
    public void setParameter(PreparedStatement ps, int i, AccountType t, 
            JdbcType jt) throws SQLException {
        ps.setString(i, t.getDiscriminator());
    }

    @Override
    public AccountType getResult(ResultSet rs, String columnLabel) throws SQLException {
        return AccountType.toAccountType(rs.getString(columnLabel));
    }

    @Override
    public AccountType getResult(ResultSet rs, int i) throws SQLException {
        return AccountType.toAccountType(rs.getString(i));
    }

    @Override
    public AccountType getResult(CallableStatement cs, int i) throws SQLException {
        return AccountType.toAccountType(cs.getString(i));
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/App.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Menu class="javax.swing.JMenuBar" name="menuBar">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="fileMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="102"/>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="openMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="111"/>
                <Property name="text" type="java.lang.String" value="Open"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="115"/>
                <Property name="text" type="java.lang.String" value="Save"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveAsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="Save As ..."/>
                <Property name="displayedMnemonicIndex" type="int" value="5"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="exitMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="120"/>
                <Property name="text" type="java.lang.String" value="Exit"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="exitMenuItemActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="editMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="101"/>
            <Property name="text" type="java.lang.String" value="Edit"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="cutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="116"/>
                <Property name="text" type="java.lang.String" value="Cut"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="copyMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="121"/>
                <Property name="text" type="java.lang.String" value="Copy"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="pasteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="112"/>
                <Property name="text" type="java.lang.String" value="Paste"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="deleteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="100"/>
                <Property name="text" type="java.lang.String" value="Delete"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="helpMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="104"/>
            <Property name="text" type="java.lang.String" value="Help"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="contentsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="99"/>
                <Property name="text" type="java.lang.String" value="Contents"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="aboutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="About"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="menuBar"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-56,0,0,3,-127"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Container class="javax.swing.JSplitPane" name="jSplitPane1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
      <SubComponents>
        <Container class="javax.swing.JSplitPane" name="jSplitPane2">
          <Properties>
            <Property name="orientation" type="int" value="0"/>
          </Properties>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
              <JSplitPaneConstraints position="left"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout"/>
          <SubComponents>
            <Container class="javax.swing.JScrollPane" name="jScrollPane1">
              <AuxValues>
                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
              </AuxValues>
              <Constraints>
                <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout" value="org.netbeans.modules.form.compat2.layouts.support.JSplitPaneSupportLayout$JSplitPaneConstraintsDescription">
                  <JSplitPaneConstraints position="top"/>
                </Constraint>
              </Constraints>

              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
              <SubComponents>
                <Component class="javax.swing.JList" name="jList1">
                  <Properties>
                    <Property name="model" type="javax.swing.ListModel" editor="org.netbeans.modules.form.editors2.ListModelEditor">
                      <StringArray count="5">
                        <StringItem index="0" value="Item 1"/>
                        <StringItem index="1" value="Item 2"/>
                        <StringItem index="2" value="Item 3"/>
                        <StringItem index="3" value="Item 4"/>
                        <StringItem index="4" value="Item 5"/>
                      </StringArray>
                    </Property>
                  </Properties>
                  <AuxValues>
                    <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
                  </AuxValues>
                </Component>
              </SubComponents>
            </Container>
          </SubComponents>
        </Container>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/App.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.wimm;

/**
 *
 * @author almatarm
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jSplitPane2.setTopComponent(jScrollPane1);

        jSplitPane1.setLeftComponent(jSplitPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/Services.java
package com.almatarm.wimm;

import com.almatarm.wimm.service.AccountService;
import com.almatarm.wimm.service.CurrencyUnitService;
import com.almatarm.wimm.service.StoreService;
import com.almatarm.wimm.service.TagService;
import java.io.IOException;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternResolver;

/**
 *
 * @author almatarm
 */
public class Services {
    final GenericApplicationContext ctx;
    AccountService accountService;
    TagService tagService;
    StoreService storeService;
    
    CurrencyUnitService currencyUnitService;
    
    private Services() {
        
        this.ctx = new GenericApplicationContext() {
            @Override
            protected ResourcePatternResolver getResourcePatternResolver() {
                return new PathMatchingResourcePatternResolverEx(this);
            }
        };

        //set Spring's classloader to context classloader
        this.ctx.setClassLoader(Thread.currentThread().getContextClassLoader());

        XmlBeanDefinitionReader xmlReader = new XmlBeanDefinitionReader(ctx);
        xmlReader.loadBeanDefinitions(new ClassPathResource("/app-context.xml", Services.class));
        ctx.refresh();

        //Works alone                                                    
//        ctx = new ClassPathXmlApplicationContext(
//                new String[] {"app-context.xml"}); 
//        ctx.refresh();



//        //Working as standalone
//        ctx = new GenericXmlApplicationContext();
//        ctx.load("classpath:app-context.xml");
//        ctx.refresh();

        accountService = ctx.getBean("accountService", 
                AccountService.class);
        accountService.buildCache();
        
        currencyUnitService = ctx.getBean("currencyUnitService", 
                CurrencyUnitService.class);
    
        tagService = ctx.getBean("tagService", TagService.class);
    
        storeService = ctx.getBean("storeService", StoreService.class);
    
    }

    private static class PathMatchingResourcePatternResolverEx extends PathMatchingResourcePatternResolver {

        public PathMatchingResourcePatternResolverEx(ResourceLoader resourceLoader) {
            super(resourceLoader);
        }

        public PathMatchingResourcePatternResolverEx(ClassLoader classLoader) {
            super(classLoader);
        }

        public PathMatchingResourcePatternResolverEx() {
            super();
        }

        @Override
        protected boolean isJarResource(Resource resource) throws IOException {
            return super.isJarResource(resource) || "nbjcl".equals(resource.getURL().getProtocol());
        }
    }
    
    public static Services getInstance() {
        return ServicesHolder.INSTANCE;
    }
    
    private static class ServicesHolder {
        private static final Services INSTANCE = new Services();
    }
//
//    public GenericXmlApplicationContext getApplicationContext() {
//        return ctx;
//    }

    public AccountService getAccountService() {
        return accountService;
    }

    public CurrencyUnitService getCurrencyUnitService() {
        return currencyUnitService;
    }

    public TagService getTagService() {
        return tagService;
    }

    public StoreService getStoreService() {
        return storeService;
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/NewMain.java
package com.almatarm.wimm;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.AccountType;
import com.almatarm.money.domain.CreditAccount;
import com.almatarm.money.domain.CurrencyUnitDO;
import com.almatarm.money.domain.Loan;
import com.almatarm.money.domain.Period;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionRange;
import com.almatarm.money.importing.ShadowAccount;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.wimm.importing.manipulator.SalaryTGM;
import com.almatarm.wimm.importing.manipulator.SplitBalanceTGM;
import com.almatarm.wimm.importing.manipulator.StartingBalanceTGM;
import com.almatarm.wimm.importing.manipulator.TuningTGM;
import com.almatarm.wimm.importing.qif.ynab.YNABImport;
import com.almatarm.wimm.service.AccountService;
import com.almatarm.wimm.service.CurrencyUnitService;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.Month;
import java.util.Currency;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.smallutil.resource.Utopia;
import org.springframework.context.support.GenericXmlApplicationContext;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class NewMain {

    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
        ctx.load("classpath:app-context.xml");
        ctx.refresh();

//        insertDefaultCurrencyUnit();
//        readCurrencies();
//        if(true) return;
//        
//        System.out.println("------------------------------------------------");
//        Services.getInstance().getTagService().getTagGroupNames().stream().forEach( (name) -> {
//            System.out.println(name);
//        });
        
//        System.out.println("------------------------------------------------");
//        Services.getInstance().getTagService().getTagGroups().stream().forEach( (tagGroup) -> {
//            System.out.println(tagGroup.getName()+ ": " + tagGroup.getTags());
//        });
//        
//        List<TagGroup> tagGroups = Services.getInstance().getTagService().getTagGroups();
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tagGroups = Services.getInstance().getTagService().getTagGroupsWithTags();
//        System.out.println("tagGroups = " + tagGroups);
//        
//        TagGroup tg = new TagGroup();
//        tg.setName("Credit");
//        tagGroups = Services.getInstance().getTagService().findTagGroups(tg);
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tagGroups = Services.getInstance().getTagService().findTagGroupsWithTags(tg);
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tg.setName("%t");
//        tagGroups = Services.getInstance().getTagService().findTagGroupsLike(tg);
//        System.out.println("tagGroups = " + tagGroups);
//        
//        tagGroups = Services.getInstance().getTagService().findTagGroupsWithTagsLike(tg);
//        System.out.println("tagGroups = " + tagGroups);
        
//        System.out.println("------------------------------------------------");  
//        System.out.println(Services.getInstance().getTagService().findTagGroupByID(1L));
//        
//        System.out.println("------------------------------------------------");  
//        TagGroup credit = Services.getInstance().getTagService().findTagGroupByName("Credit");
//        Tag tag = new Tag("Partialy Paid!");
//        tag.setTagGroup(credit);
//        Services.getInstance().getTagService().save(tag);
        System.out.println();
        
        System.out.println("------------------------------------------------");  
//        TagGroup tg = new TagGroup("New Tag Group");
//        tg.addTag(new Tag("Tag1"));
//        tg.addTag(new Tag("Tag2"));
//        Services.getInstance().getTagService().save(tg);
        
//        System.out.println(Services.getInstance().getTagService().findTagByID(5L));

        AccountService accountService = Services.getInstance().getAccountService();
//        setupAccounts(accountService);
//        if(true) return;
//        List<Account> accounts = accountService.getAccounts();
//        accounts.forEach((account) -> {
//            System.out.println(account);
//        });
//        Account a = accountService.findAccountByID(310L);
//        System.out.println(a);
//        System.out.println("----------------------------------");
//        System.out.println(a.getCurrency());
//        setupAccounts(accountService); 
//        readCurrencies();
        
          Account account;
//        Account account = accountService.findAccountByID(106L);
//        account.setDescription("Big Money");
//        accountService.saveAccount(account);
        
        account = accountService.findAccountByQualifiedName("Liability:Credit Cards:SABB VISA");
        ((CreditAccount) account).setLimit(new BigDecimal("47530"));
        accountService.saveAccount(account);
        System.out.println(account);
        System.out.println("--> Get Parent Account");
        System.out.println(account.getParent());
        
//        List<Account> accounts = accountService.getAccounts();
//        Account account1 = accounts.get(0);
//        account1.getCurrency();
//        account1.getQualifiedName();
        if(true) return;
//        
////        print(accountService.findAll().get(0));
        Account rootAccount = accountService.getAccounts().get(0);
        ShadowTree shadowTree = new ShadowTree(rootAccount);
        ShadowAccount root = shadowTree.getRoot();
        print(root, 10);
        
        HashMap<String, ShadowAccount> qualifiedNamesMap = shadowTree.getQualifiedNamesMap();
        
        ShadowAccount importedAccount = importTransaction(rootAccount);
        printDetail(importedAccount, true);
        print(importedAccount, 10);

        
//        System.out.println("##################################################################"
//                + "\n\n\n\n\n\n\n\n\n\n\n");
//        Period p = Period.monthOf(10, 2015);
//        printBudget(importedAccount, p, 3);
    }

    private static void insertDefaultCurrencyUnit() {
        CurrencyUnitService cuService = Services.getInstance().getCurrencyUnitService();
        Set<Currency> availableCurrencies = Currency.getAvailableCurrencies();
        availableCurrencies.stream().forEach((currency) -> {
            CurrencyUnitDO currencyUnit = new CurrencyUnitDO(
                    currency.getCurrencyCode(),
                    currency.getDisplayName(),
                    currency.getSymbol(),
                    "Currency",
                    currency.getDefaultFractionDigits());
//            cuService.save(currencyUnit);
        });
    }
    
    private static void readCurrencies() {
        CurrencyUnitService cuService = Services.getInstance().getCurrencyUnitService();
        
//        CurrencyUnitDO cu2 = new CurrencyUnitDO();
//        cu2.setDescription("%Dollar%");
//        cu2.setCode("%B%");
//        cu2.setProvider("%Cur%c_");
//        List<CurrencyUnitDO> allCurrencies2 = cuService.findCurrencyUnitLike(cu2);
//        allCurrencies2.stream().forEach( (cu) -> { 
//            System.out.println("Currency Unit: " + cu);
//        });
//        
        
     
        List<CurrencyUnitDO> allCurrencies = cuService. getCurrencyUnits();        
        allCurrencies.stream().forEach( (cu) -> { 
            System.out.println(cu);
        });
        
        System.out.println(cuService.findCurrencyUnitByID(159L));
     
        if(true) return;

        System.out.println("----------------------------------------");
//        cuService.delete(261L);

//        cuService.findByProvider("Reward Points").stream().forEach( (cu) -> { 
//            System.out.println(cu);
//        });
        
//        System.out.println("------------------------------------------");
//        cuService.getProviders().stream().forEach( (provider) -> {
//            System.out.println(provider);
//        });
//        
//        System.out.println("------------------------------------------");
//        System.out.println(cuService.findByCodeAndProvider(
//                "INR", "Currency"));
//        
//        System.out.println("------------------------------------------");
//        cuService.findByCode("SAR").stream().forEach( (currency) -> {
//            System.out.println(currency);
//            currency.setFractionDigits(3);
//            cuService.save(currency);
//        });
//        
//        
    }

    private static void deleteCurrency() {
        
    }   

    private static void setupAccounts(AccountService accountService) {
        CurrencyUnitService cuService = Services.getInstance().getCurrencyUnitService();
        
//        CurrencyUnitDO USD = cuService.findCurrencyUnitsBySymbol("USD").get(0);
        CurrencyUnitDO CAD = cuService.findCurrencyUnitByID(222L);
        CurrencyUnitDO SAR = cuService.findCurrencyUnitByID(159L);
        
        Account root = new Account("Root", "The ultimate parent of all account", 
                SAR, "", AccountType.ROOT, BigDecimal.ZERO);
        accountService.saveAccount(root);
        
        //Assets
        Account assets = new Account("Assets", "Assets Account", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        assets.setParent(root);
        accountService.saveAccount(assets);
        
        Account sabb = new Account("SABB", "SABB Bank Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        sabb.setParent(assets);
        accountService.saveAccount(sabb);
        
        Account spring = new Account("Spring", "Main Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        spring.setParent(sabb);
        accountService.saveAccount(spring);
        
        Account springChecking = new Account("Checking", "SABB Bank Accounts", 
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        springChecking.setParent(spring);
        accountService.saveAccount(springChecking);
        
        Account springCash = new Account("Cash", "SABB Bank Accounts", 
                SAR, "", AccountType.CASH, BigDecimal.ZERO);
        springCash.setParent(spring);
        accountService.saveAccount(springCash);
                
        Account rainyDays = new Account("Rainy Days", "Irregular Expenses",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        rainyDays.setParent(sabb);
        accountService.saveAccount(rainyDays);
        
        // |__ Mufeed
        Account home      = new Account("Home", "Regular Expenses",
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        home.setParent(sabb);
        accountService.saveAccount(home);

        Account homeChecking      = new Account("Checking", "Regular Expenses",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        homeChecking.setParent(home);
        accountService.saveAccount(homeChecking);
        
        Account homeCash      = new Account("Cash", "Regular Expenses",
                SAR, "", AccountType.CASH, BigDecimal.ZERO);
        homeCash.setParent(home);
        accountService.saveAccount(homeCash);
        
        // |__ Sea
        Account sea      = new Account("Sea", "Sea Saving Account",
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        sea.setParent(sabb);
        accountService.saveAccount(sea);
        
        Account seaCredit      = new Account("Credit Payback", 
                "Credit Card Payback Saving",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        seaCredit.setParent(sea);
        accountService.saveAccount(seaCredit);
        
        // |__ Mufeed
        Account mufeed      = new Account("Mufeed", "Mufeed's Account",
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        mufeed.setParent(sabb);
        accountService.saveAccount(mufeed);
                
        Account mufeedChecking  = new Account("Checking", "Mufeed's Checking Account",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        mufeedChecking.setParent(mufeed);
        accountService.saveAccount(mufeedChecking);
        
        Account mufeedCash  = new Account("Cash", "Mufeed's Cash Account",
                SAR, "", AccountType.CASH, BigDecimal.ZERO);
        mufeedCash.setParent(mufeed);
        accountService.saveAccount(mufeedCash);
                
        Account ahmad      = new Account("Ahmad", "Ahmad's Saving",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        ahmad.setParent(sabb);
        accountService.saveAccount(ahmad);
        
        Account znz      = new Account("ZnZ", "Zahraa and Zainb's Saving",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        znz.setParent(sabb);
        accountService.saveAccount(znz);

        Account bigSaving      = new Account("Big Savings", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        bigSaving.setParent(sabb);
        accountService.saveAccount(bigSaving);
        
        // |__ Saudi Aramco
        Account sa = new Account("Saudi Aramco", "", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        sa.setParent(assets);
        accountService.saveAccount(sa);
        
        Account thriftPlanSaving      = new Account("Thrift Plan Saving", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        thriftPlanSaving.setParent(sa);
        accountService.saveAccount(thriftPlanSaving);
        
        // |__ NCB
        Account ncb = new Account("NCB Bank", "NCB Bank Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        ncb.setParent(assets);
        accountService.saveAccount(ncb);
        
        Account ncbChecking  = new Account("Checking", "NCB Checking Account",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        ncbChecking.setParent(ncb);
        accountService.saveAccount(ncbChecking);
        
        // |__ Samba
        Account samba = new Account("Samba Bank", "Samba Bank Accounts", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        samba.setParent(assets);
        accountService.saveAccount(samba);
        
        Account sambaChecking  = new Account("Checking", "Samba Checking Account",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        sambaChecking.setParent(samba);
        accountService.saveAccount(sambaChecking);
        
        // |__ Investment
        Account investment = new Account("Investments", "", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        investment.setParent(assets);
        accountService.saveAccount(investment);
        
        Account stocks  = new Account("Stocks", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        stocks.setParent(investment);
        accountService.saveAccount(stocks);
        
        
        // |__ Others
        Account others = new Account("Others", "", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        others.setParent(assets);
        accountService.saveAccount(others);
        
//        Account balancer  = new Account("Balancer", "Balancing CAD to SAR",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        balancer.setParent(others);
//        accountService.saveAccount(balancer);
//        
//        Account homeCredit  = new Account("Home Credit", "Credit for Home Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        homeCredit.setParent(others);
//        accountService.saveAccount(homeCredit);
//        
//        Account lendBorrow  = new Account("Lend-Borrow", "Lend Borrow Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        lendBorrow.setParent(others);
//        accountService.saveAccount(lendBorrow);
//        
//        Account mars  = new Account("Mars", "Mufeed's Credit Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        mars.setParent(others);
//        accountService.saveAccount(mars);
   
        Account wpa306_CAD  = new Account("WPA-306 (CAD)", "",
                CAD, "", AccountType.BANK, BigDecimal.ZERO);
        wpa306_CAD.setParent(others);
        accountService.saveAccount(wpa306_CAD);
        
        Account wpa306Buffer_CAD  = new Account("WPA-306 Buffer (CAD)", "",
                CAD, "", AccountType.BANK, BigDecimal.ZERO);
        wpa306Buffer_CAD.setParent(others);
        accountService.saveAccount(wpa306Buffer_CAD);
        
        Account wpa306Buffer_SAR  = new Account("WPA-306 Buffer (SAR)", "",
                SAR, "", AccountType.BANK, BigDecimal.ZERO);
        wpa306Buffer_SAR.setParent(others);
        accountService.saveAccount(wpa306Buffer_SAR);
  
        
        //liability        
        Account liability = new Account("Liability", "Liability Account", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        liability.setParent(root);
        accountService.saveAccount(liability);
        
        // |__ Credit Cards
        Account creditCards = new Account("Credit Cards", "Credit Cards Account", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        creditCards.setParent(liability);
        accountService.saveAccount(creditCards);
               
        CreditAccount visa = new CreditAccount(new BigDecimal(47500), 15, "SABB VISA", 
                "SABB VISA Card", SAR, "", BigDecimal.ZERO);
        visa.setParent(creditCards);
        accountService.saveAccount(visa);
        
        CreditAccount mastercard = new CreditAccount(new BigDecimal(18000), 10, "SABB MasterCard", 
                "SABB Mastercard", SAR, "", BigDecimal.ZERO);
        mastercard.setParent(creditCards);
        accountService.saveAccount(mastercard);

        // |__ Loans
        Account loans = new Account("Loans", "Loans", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        loans.setParent(liability);
        accountService.saveAccount(loans);
        
        Loan sabbLoan  = new Loan("SABB", "", SAR, "", BigDecimal.ZERO);
        sabbLoan.setParent(loans);
        accountService.saveAccount(sabbLoan);
        
        Loan srtpLoan  = new Loan("SRTP", "", SAR, "", BigDecimal.ZERO);
        srtpLoan.setParent(loans);
        accountService.saveAccount(srtpLoan);
        
        // |__ Equity
        Account equity = new Account("Equity", "Equity", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        equity.setParent(root);
        accountService.saveAccount(equity);
        
        Account openingBalances  = new Account("Opening Balances", "",
                SAR, "", AccountType.EQUITY, BigDecimal.ZERO);
        openingBalances.setParent(equity);
        accountService.saveAccount(openingBalances);
        
        // |__ Income
        Account income = new Account("Income", "Income", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        income.setParent(root);
        accountService.saveAccount(income);
        
        Account salary  = new Account("Salary", "",
                SAR, "", AccountType.INCOME, BigDecimal.ZERO);
        salary.setParent(income);
        accountService.saveAccount(salary);
        
        Account otherIncome  = new Account("Other Income", "",
                SAR, "", AccountType.INCOME, BigDecimal.ZERO);
        otherIncome.setParent(income);
        accountService.saveAccount(otherIncome);
        
        // |__ Expenses
        Account expenses = new Account("Expenses", "Expenses", 
                SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
        expenses.setParent(root);
        accountService.saveAccount(expenses);
    }

    private static void print(Account account, int maxLevel) {
        System.out.println("Account                              Amount ");
        System.out.println("=================                    =======");
        print(account, "", maxLevel);
    }
    
    private final static String SPACE = "  "; 
    private static void print(Account account, final String space, int maxLevel) {
        if(space.length() > maxLevel * SPACE.length()) {
            return;
        }
        System.out.format("%-33s %3s %10.2f     %-50s %-30s %n", 
                fix(space + account.getName(), 33), 
                account.getCurrency().getCode(),
                account.getBalanceAmount(), 
                fix(account.getQualifiedName(), 50), 
                account.getType());
        
        account.getChildren().stream().forEach((a) -> {
            print(a, space +  "  ", maxLevel);
        });
    }

    
    ///////////////////////////////////////////////////////////////////////////
    private static void printBudget(Account account, Period p, int maxLevel) {
        System.out.format("%-33s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s  %n", 
            "Account",
                fix(Month.of(p.previousMonth().previousMonth().previousMonth().previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.previousMonth().previousMonth().previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.previousMonth().previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.previousMonth().getNumber()).toString(), 8),
                fix(Month.of(p.getNumber()).toString(), 8),
                fix(Month.of(p.nextMonth().getNumber()).toString(), 8),
                fix(Month.of(p.nextMonth().nextMonth().getNumber()).toString(), 8),
                fix(Month.of(p.nextMonth().nextMonth().nextMonth().getNumber()).toString(), 8)
                );
        System.out.println("=================               ");
        printBudget(account, p, "", maxLevel);
    }
    
    private static void printBudget(Account account, Period p,final String space, int maxLevel) {
        if(space.length() > maxLevel * SPACE.length()) {
            return;
        }
        System.out.format("%-33s %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %10.2f %n", 
                fix(space + account.getName(), 33), 
                account.getTransactions(p.previousMonth().previousMonth().previousMonth().previousMonth()).getBalance(), 
                account.getTransactions(p.previousMonth().previousMonth().previousMonth()).getBalance(), 
                account.getTransactions(p.previousMonth().previousMonth()).getBalance(), 
                account.getTransactions(p.previousMonth()).getBalance(),
                account.getTransactions(p).getBalance(), 
                account.getTransactions(p.nextMonth()).getBalance(),
                account.getTransactions(p.nextMonth().nextMonth()).getBalance(),
                account.getTransactions(p.nextMonth().nextMonth().nextMonth()).getBalance()
                );
        
        account.getChildren().stream().forEach((a) -> {
            printBudget(a, p, space +  "  ", maxLevel);
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    
    private static ShadowAccount importTransaction(Account root) throws IOException {
        final Map<String, String[]> am = new HashMap<>();
        
        am.put("Ahmad",                  new String[]{"Assets:SABB:Ahmad", "SAR"});
        am.put("Balancer",               new String[]{"Assets:Others:Balancer", "SAR"});
        am.put("Big Savings",            new String[]{"Assets:SABB:Big Savings", "SAR"});
        am.put("Cash",                   new String[]{"Assets:SABB:Home:Cash", "SAR"});
        am.put("Home Credit",            new String[]{"Assets:Others:Home Credit", "SAR"});
        am.put("Home",                   new String[]{"Assets:SABB:Home:Checking", "SAR"});
        am.put("LCash",                  new String[]{"Assets:SABB:Spring:Cash", "SAR"});
        am.put("Lend-Borrow",            new String[]{"Assets:Others:Lend-Borrow", "SAR"});
        am.put("MCash",                  new String[]{"Assets:SABB:Mufeed:Cash", "SAR"});
        am.put("Mars",                   new String[]{"Assets:Others:Mars", "SAR"});
        am.put("Mufeed",                 new String[]{"Assets:SABB:Mufeed:Checking", "SAR"});
        am.put("NCB",                    new String[]{"Assets:NCB Bank:Checking", "SAR"});
        am.put("Portfoilo",              new String[]{"Assets:Investments:Stocks", "SAR"});
        am.put("Rainy Days",             new String[]{"Assets:SABB:Rainy Days", "SAR"});
        am.put("SABB Loan",              new String[]{"Liability:Loans:SABB", "SAR"});
        am.put("SABB MasterCard",        new String[]{"Liability:Credit Cards:SABB MasterCard", "SAR"});
        am.put("SABB VISA",              new String[]{"Liability:Credit Cards:SABB VISA", "SAR"});
        am.put("SRTP Loan",              new String[]{"Liability:Loans:SRTP", "SAR"});
        am.put("Samba",                  new String[]{"Assets:Samba Bank:Checking", "SAR"});
        am.put("Sea",                    new String[]{"Assets:SABB:Sea:Credit Payback", "SAR"});
        am.put("Spring",                 new String[]{"Assets:SABB:Spring:Checking", "SAR"});
        am.put("Thrift Plan Loan (Sep)", new String[]{"Assets:Saudi Aramco:Thrift Plan Saving", "SAR"});
        am.put("Thrift Plan Loan",       new String[]{"Assets:Saudi Aramco:Thrift Plan Saving", "SAR"});
        am.put("Thrift Plan Saving",     new String[]{"Assets:Saudi Aramco:Thrift Plan Saving", "SAR"});
        am.put("WPA-306 (CAD)",          new String[]{"Assets:Others:WPA-306 (CAD)", "SAR"});
        am.put("WPA-306 Buffer (CAD)",   new String[]{"Assets:Others:WPA-306 Buffer (CAD)", "SAR"});
        am.put("WPA-306 Buffer (SAR)",   new String[]{"Assets:Others:WPA-306 Buffer (SAR)", "SAR"});
        am.put("ZnZ",                    new String[]{"Assets:SABB:ZnZ", "SAR"});
        
        final Map<String, String> em = new HashMap<>();
        em.put("Salary Deductions:Thrift Plan Earnings", "Assets:Saudi Aramco:Thrift Plan Earnings");
        
        File qifDir = new File(Utopia.getInstance().getProperty(Utopia.Key.DROPBOX_PATH)
            +  "/YNAB/Exports/01/");

        YNABImport yImport = new YNABImport(qifDir, am, em, root);
        
        SalaryTGM salaryTGM       = new SalaryTGM(yImport.getShadowTree());
        yImport.addTransactionGroupManipulator(salaryTGM);
        
        StartingBalanceTGM  sbTGB = new StartingBalanceTGM(yImport.getShadowTree());
        yImport.addTransactionGroupManipulator(sbTGB);
        
        SplitBalanceTGM splitTGM  = new SplitBalanceTGM();
        yImport.addTransactionGroupManipulator(splitTGM);
        
        TuningTGM tuningTGM  = new TuningTGM(yImport.getShadowTree());
        yImport.addTransactionGroupManipulator(tuningTGM);
        
        return yImport.importTransaction();
    }
    
    public static void printDetail(Account account, boolean monthly) {
        System.out.println("\n\n");
        System.out.println("**************************");
        System.out.println("* " + account.getName());
        System.out.println("**************************");
        
        BigDecimal total = BigDecimal.ZERO;
        
        if(monthly) {
            List<Period> periods = account.getTransactionMgr().getPeriods();
            for(Period period : periods ) {
                System.out.println("## " + period.getStartDate().getTime() 
                        + " - " + period.getEndDate().getTime());
                TransactionRange tpr = account.getTransactionMgr().getTransactionRanage(period);
                total = printAccountTransaction(account.getName(), tpr.getTransactions(), total);
                System.out.println("\t\t Cum. Balance: " + tpr.getCumulativeBalance() 
                        + "\t\t\t\t\t\t Balance: " + tpr.getBalance());

            }
        } else {
                printAccountTransaction(account.getName(), 
                    account.getTransactions(), total);
        }
        
        account.getChildren().stream().forEach((childAccount) -> {
            printDetail(childAccount, monthly);
        });
    }
    
    private static BigDecimal printAccountTransaction(String accountName, 
            List <Transaction> transactions, BigDecimal total) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat sdfShort = new SimpleDateFormat("dd/MM");

        String dFormat = " %-10s  %5d %10s %-6s %-2s %-20s %-50s %10.2f %13.2f %n";
        for (Transaction t : transactions) {
            total = total.add(t.getAmount());
            System.out.format(dFormat,
                    fix(accountName, 12),
                    (t.getId()==null?-1L:t.getId()),
                    sdf.format(t.getDate().getTime()),
                    sdfShort.format(t.getEffectiveDate().getTime()),
                    t.getType().getDiscriminator(),
                    fix(t.getPayee().getName(), 20),
                    fix(t.getMemo(), 50),
                    t.getAmount(),
                    total);
        }
        return total;
    }
    
    public static String fix(String str, int maxLen) {
        if(str == null) return "nnnn";
        String out = isProbablyArabic(str)? "********": str;
        return out.length() > maxLen? out.substring(0, maxLen) : out;
    }
    
    public static boolean isProbablyArabic(String s) {
        String arabicLetters = "ذ د ج ح خ ه ع غ إ ف ق ث ص ض ط ك م ن ت ا ل أ  ب ي س ش ظ ز و ة ى لا ر ؤ ء ئ";
        for (int i = 0; i < s.length();) {
            int c = s.codePointAt(i);
            if (c >= 0x0600 && c <= 0x06E0) {
                return true;
            } else if (arabicLetters.contains(s.charAt(i) + "") && s.charAt(i) != ' ' ) {
                return true;
            }
            i += Character.charCount(c);
        }
        return false;
    }

   
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/TagService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface TagService {
    //**************************************************************************
    // Tag Service
    //**************************************************************************

    public List<Tag> getTags();

    public List<Tag> findTags(Tag tag);

    public List<Tag> findTagsLike(Tag tag);

    public Tag findTagByID(Long id);

    public List<Tag> findTagsByName(String name);

    public Tag saveTag(Tag tag);

    public void deleteTag(Long id);

    //**************************************************************************
    // TagGroup Service
    //**************************************************************************

    public List<TagGroup> getTagGroups();

    public List<TagGroup> getTagGroupsWithTags();

    public List<String> getTagGroupNamesList();

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);

    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);

    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);

    public TagGroup saveTagGroup(TagGroup tagGroup);

    public void deleteTagGroup(Long id);

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/AccountService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Account;
import java.util.List;

/**
 * Accounts are read and cached 
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountService {

    public Account find(String name);    
    public Account findByQualifiedName(String name);
    
    public void buildCache();

    
    //**************************************************************************
    // Account Service
    //**************************************************************************

    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public List<Account> findAccountsByName(String name);

    public List<Account> findAccountsByParentID(Long parentID);

    public Account findAccountByQualifiedName(String qualifiedName);

    public Account saveAccount(Account account);

    public void deleteAccount(Long id);


}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/CurrencyUnitService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.CurrencyUnitDO;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface CurrencyUnitService {

    public List<CurrencyUnitDO> getCurrencyUnits();

    public List<String> getCurrencyUnitCodesList();

    public List<String> getCurrencyUnitProvidersList();

    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit);

    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit);

    public CurrencyUnitDO findCurrencyUnitByID(Long id);

    public List<CurrencyUnitDO> findCurrencyUnitsByDescription(String description);

    public List<CurrencyUnitDO> findCurrencyUnitsBySymbol(String symbol);

    public List<CurrencyUnitDO> findCurrencyUnitsByProvider(String provider);

    public CurrencyUnitDO saveCurrencyUnit(CurrencyUnitDO currencyUnit);

    public void deleteCurrencyUnit(Long id);
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/mybatis/CurrencyUnitServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.CurrencyUnitDO;
import com.almatarm.wimm.persistence.CurrencyUnitMapper;
import com.almatarm.wimm.service.CurrencyUnitService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("currencyUnitService")
@Repository
@Transactional
public class CurrencyUnitServiceImpl implements CurrencyUnitService {
    private final Log log = LogFactory.getLog(CurrencyUnitServiceImpl.class);
        
    @Autowired
    private CurrencyUnitMapper currencyMapper;

    @Override
    public List<CurrencyUnitDO> getCurrencyUnits() {
        return currencyMapper.getCurrencyUnits();
    }

    @Override
    public List<String> getCurrencyUnitCodesList() {
        return currencyMapper.getCurrencyUnitCodesList();
    }

    @Override
    public List<String> getCurrencyUnitProvidersList() {
        return currencyMapper.getCurrencyUnitProvidersList();
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnits(CurrencyUnitDO currencyUnit) {
        return currencyMapper.findCurrencyUnits(currencyUnit);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsLike(CurrencyUnitDO currencyUnit) {
        return currencyMapper.findCurrencyUnitsLike(currencyUnit);
    }

    @Override
    public CurrencyUnitDO findCurrencyUnitByID(Long id) {
        return currencyMapper.findCurrencyUnitByID(id);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsByDescription(String description) {
        CurrencyUnitDO currencyUnit = new CurrencyUnitDO();
        currencyUnit.setDescription(description);
        return findCurrencyUnits(currencyUnit);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsBySymbol(String symbol) {
        CurrencyUnitDO currencyUnit = new CurrencyUnitDO();
        currencyUnit.setSymbol(symbol);
        return findCurrencyUnits(currencyUnit);
    }

    @Override
    public List<CurrencyUnitDO> findCurrencyUnitsByProvider(String provider) {
        CurrencyUnitDO currencyUnit = new CurrencyUnitDO();
        currencyUnit.setProvider(provider);
        return findCurrencyUnits(currencyUnit);
    }

    @Override
    public CurrencyUnitDO saveCurrencyUnit(CurrencyUnitDO currencyUnit) {
        if(currencyUnit.getId() == null) {
            currencyMapper.insertCurrencyUnit(currencyUnit);
        } else {
            currencyMapper.updateCurrencyUnit(currencyUnit);
        }
        return currencyUnit;
    }

    @Override
    public void deleteCurrencyUnit(Long id) {
        currencyMapper.deleteCurrencyUnit(id);
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/mybatis/AccountServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Account;
import com.almatarm.wimm.persistence.AccountMapper;
import com.almatarm.wimm.service.AccountService;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * AccountServiceImpl
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("accountService")
@Repository
@Transactional
public class AccountServiceImpl implements AccountService {
    private final Log log = LogFactory.getLog(AccountServiceImpl.class);

    Map<Long,   Account> accountIdsMap;
    Map<String, Account> qNameMap;
    
    @Override
    public void buildCache() {
        if(true) return;
        System.out.println("buildCache()");
        //Map Account ID --> Account
        accountIdsMap = new HashMap<>();
        List<Account> accounts = getAccounts();
        accounts.stream().forEach((account) -> {
            accountIdsMap.put(account.getId(), account);
        });
        
        //Build Parent Child Rel
        accounts.stream().forEach((account) -> {
            Long parentAccountId  = account.getParentID();
            Account parentAccount = null;
            if(parentAccountId != null && 
                    (parentAccount = accountIdsMap.get(parentAccountId)) != null) {
                account.setParent(parentAccount);
            }
        });
        
        //Build Qualified Name --> Account Map
        qNameMap = new HashMap<>();
        accounts.stream().forEach( (account) -> {
            qNameMap.put(account.getQualifiedName(), account);
            System.out.println(account.getQualifiedName());
        });
        
    }

    @Override
    public Account find(String root) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findByQualifiedName(String qName) {
        return qNameMap.get(qName);
    }

    
    //**************************************************************************
    // Account ServiceImpl
    //**************************************************************************

    @Autowired
    private AccountMapper accountMapper;

    @Override
    public List<Account> getAccounts() {
//        List<Account> result = new ArrayList<>();
//       
//        accountMapper.getAccounts().forEach( (Account account) -> {
//            result.add(AccountProxy.create(account));
//        });
//        
//        return result;
        return accountMapper.getAccounts();
    }

    @Override
    public List<Account> findAccounts(Account account) {
        return accountMapper.findAccounts(account);
    }

    @Override
    public List<Account> findAccountsLike(Account account) {
        return accountMapper.findAccountsLike(account);
    }

    @Override
    public Account findAccountByID(Long id) {
        System.out.println(AccountServiceImpl.class.getName() + ":findAccountByID:" + id );
        return accountMapper.findAccountByID(id);
    }

    @Override
    public List<Account> findAccountsByName(String name) {
        Account account = new Account();
        account.setName(name);
        return findAccounts(account);
    }

    @Override
    public List<Account> findAccountsByParentID(Long parentID) {
        Account account = new Account();
        account.setParentID(parentID);
        return findAccounts(account);
    }

    @Override
    public Account findAccountByQualifiedName(String qualifiedName) {
        return accountMapper.findAccountByQualifiedName(qualifiedName);
    }

    @Override
    public Account saveAccount(Account account) {
        if(account.getId() == null) {
            accountMapper.insertAccount(account);
        } else {
            accountMapper.updateAccount(account);
        }
        return account;
    }

    @Override
    public void deleteAccount(Long id) {
        accountMapper.deleteAccount(id);
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/mybatis/PayeeServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Payee;
import com.almatarm.wimm.persistence.PayeeMapper;
import com.almatarm.wimm.service.PayeeService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("payeeService")
@Repository
@Transactional
public class PayeeServiceImpl implements PayeeService {
    private final Log log = LogFactory.getLog(PayeeServiceImpl.class);

    @Autowired
    private PayeeMapper payeeMapper;

    @Override
    public List<Payee> getPayees() {
        return payeeMapper.getPayees();
    }

    @Override
    public List<String> getPayeeNamesList() {
        return payeeMapper.getPayeeNamesList();
    }

    @Override
    public List<Payee> findPayees(Payee payee) {
        return payeeMapper.findPayees(payee);
    }

    @Override
    public List<Payee> findPayeesLike(Payee payee) {
        return payeeMapper.findPayeesLike(payee);
    }

    @Override
    public Payee findPayeeByID(Long id) {
        return payeeMapper.findPayeeByID(id);
    }

    @Override
    public Payee findPayeeByName(String name) {
        return payeeMapper.findPayeeByName(name);
    }

    @Override
    public Payee savePayee(Payee payee) {
        if(payee.getId() == null) {
            payeeMapper.insertPayee(payee);
        } else {
            payeeMapper.updatePayee(payee);
        }
        return payee;
    }

    @Override
    public void deletePayee(Long id) {
        payeeMapper.deletePayee(id);
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/mybatis/StoreServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.TagGroup;
import com.almatarm.wimm.persistence.PayeeMapper;
import com.almatarm.wimm.persistence.StoreMapper;
import com.almatarm.wimm.service.StoreService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("storeService")
@Repository
@Transactional
public class StoreServiceImpl implements StoreService {
    private final Log log = LogFactory.getLog(StoreServiceImpl.class);

    @Autowired
    private PayeeMapper payeeMapper;

    @Override
    public List<Payee> getPayees() {
        return payeeMapper.getPayees();
    }

    @Override
    public Payee findPayeeByID(Long id) {
        return payeeMapper.findPayeeByID(id);
    }

    @Override
    public Payee findPayeeByName(String name) {
        return payeeMapper.findPayeeByName(name);
    }

    @Override
    public List<Payee> findPayeeByNameRegEx(String name) {
        return null;//payeeMapper.findPayeeByNameRegEx(name);
    }

    @Override
    public Payee savePayee(Payee payee) {
        if(payee.getId() == null) {
            payeeMapper.insertPayee(payee);
        } else {
            payeeMapper.updatePayee(payee);
        }
        return payee;
    }

    @Override
    public void deletePayee(Long id) {
        payeeMapper.deletePayee(id);
    }

    //**************************************************************************
    // TagGroup ServiceImpl
    //**************************************************************************

    @Autowired
    private StoreMapper storeMapper;

   
    @Override
    public List<TagGroup> getTagGroups() {
        return storeMapper.getTagGroups();
    }

    @Override
    public List<TagGroup> getTagGroupsWithTags() {
        return storeMapper.getTagGroupsWithTags();
    }

    @Override
    public List<TagGroup> findTagGroups(TagGroup tagGroup) {
        return storeMapper.findTagGroups(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup) {
        return storeMapper.findTagGroupsWithTags(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup) {
        return storeMapper.findTagGroupsLike(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup) {
        return storeMapper.findTagGroupsWithTagsLike(tagGroup);
    }
      
    @Override
    public TagGroup findTagGroupByID(Long id) {
        return storeMapper.findTagGroupByID(id);
    }

    @Override
    public TagGroup findTagGroupWithTagsByID(Long id) {
        return storeMapper.findTagGroupWithTagsByID(id);
    }

    @Override
    public TagGroup findTagGroupByName(String name) {
        return storeMapper.findTagGroupByName(name);
    }

    @Override
    public TagGroup findTagGroupWithTagsByName(String name) {
        return storeMapper.findTagGroupWithTagsByName(name);
    }


}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/mybatis/Store.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Account;
import com.almatarm.wimm.service.AccountService;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author almatarm
 */
public class Store implements AccountService {
    Map<Long,   Account> accountIdsMap;
    Map<String, Account> qNameMap;
    
    AccountService accountService;

    public Store(AccountService accountService) {
        this.accountService = accountService;
        buildCache();
    }
    
    @Override
    public void buildCache() {
        System.out.println("buildCache()");
        //Map Account ID --> Account
        accountIdsMap = new HashMap<>();
        List<Account> accounts = getAccounts();
        accounts.stream().forEach((account) -> {
            accountIdsMap.put(account.getId(), account);
        });
        
        //Build Parent Child Rel
        accounts.stream().forEach((account) -> {
            Long parentAccountId  = account.getParentID();
            Account parentAccount = null;
            if(parentAccountId != null && 
                    (parentAccount = accountIdsMap.get(parentAccountId)) != null) {
                account.setParent(parentAccount);
            }
        });
        
        //Build Qualified Name --> Account Map
        qNameMap = new HashMap<>();
        accounts.stream().forEach( (account) -> {
            qNameMap.put(account.getQualifiedName(), account);
            System.out.println(account.getQualifiedName());
        });
        
    }


    @Override
    public Account find(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findByQualifiedName(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    

    @Override
    public List<Account> getAccounts() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccounts(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsLike(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findAccountByID(Long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsByName(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsByParentID(Long parentID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findAccountByQualifiedName(String qualifiedName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account saveAccount(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void deleteAccount(Long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/mybatis/TagServiceImpl.java
package com.almatarm.wimm.service.mybatis;

import com.almatarm.money.domain.Tag;
import com.almatarm.money.domain.TagGroup;
import com.almatarm.wimm.persistence.TagMapper;
import com.almatarm.wimm.service.TagService;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */

@Service("tagService")
@Repository
@Transactional
public class TagServiceImpl implements TagService {
    private final Log log = LogFactory.getLog(TagServiceImpl.class);

    
    //**************************************************************************
    // Tag ServiceImpl
    //**************************************************************************

    @Autowired
    private TagMapper tagMapper;

    @Override
    public List<Tag> getTags() {
        return tagMapper.getTags();
    }

    @Override
    public List<Tag> findTags(Tag tag) {
        return tagMapper.findTags(tag);
    }

    @Override
    public List<Tag> findTagsLike(Tag tag) {
        return tagMapper.findTagsLike(tag);
    }

    @Override
    public Tag findTagByID(Long id) {
        return tagMapper.findTagByID(id);
    }

    @Override
    public List<Tag> findTagsByName(String name) {
        Tag tag = new Tag();
        tag.setName(name);
        return findTags(tag);
    }

    @Override
    public Tag saveTag(Tag tag) {
        if(tag.getId() == null) {
            tagMapper.insertTag(tag);
        } else {
            tagMapper.updateTag(tag);
        }
        return tag;
    }

    @Override
    public void deleteTag(Long id) {
        tagMapper.deleteTag(id);
    }
    
    //**************************************************************************
    // TagGroup ServiceImpl
    //**************************************************************************

    @Override
    public List<TagGroup> getTagGroups() {
        return tagMapper.getTagGroups();
    }

    @Override
    public List<TagGroup> getTagGroupsWithTags() {
        List<TagGroup> tagGroups = tagMapper.getTagGroupsWithTags();
        for(TagGroup tagGroup : tagGroups) {
            updateTagGroupTags(tagGroup);
        }
        return tagGroups;
    }

    private void updateTagGroupTags(TagGroup tagGroup) {
        for(Tag tag : tagGroup.getTags()) {
            tag.setTagGroup(tagGroup);
        }
    }

    @Override
    public List<String> getTagGroupNamesList() {
        return tagMapper.getTagGroupNamesList();
    }

    @Override
    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup) {
        return tagMapper.findTagGroupsLike(tagGroup);
    }

    @Override
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup) {
        List<TagGroup> tagGroups = tagMapper.findTagGroupsWithTagsLike(tagGroup);
        for(TagGroup aTagGroup : tagGroups) {
            updateTagGroupTags(aTagGroup);
        }
        return tagGroups;
    }

    @Override
    public TagGroup findTagGroupByID(Long id) {
        return tagMapper.findTagGroupByID(id);
    }

    @Override
    public TagGroup findTagGroupWithTagsByID(Long id) {
        TagGroup tagGroup = tagMapper.findTagGroupWithTagsByID(id);
        updateTagGroupTags(tagGroup);
        return tagGroup;
    }

    @Override
    public TagGroup findTagGroupByName(String name) {
        return tagMapper.findTagGroupByName(name);
    }

    @Override
    public TagGroup findTagGroupWithTagsByName(String name) {
        TagGroup tagGroup = tagMapper.findTagGroupWithTagsByName(name);
        updateTagGroupTags(tagGroup);
        return tagGroup;
    }

    @Override
    public TagGroup saveTagGroup(TagGroup tagGroup) {
        if(tagGroup.getId() == null) {
            tagMapper.insertTagGroup(tagGroup);
        } else {
            tagMapper.updateTagGroup(tagGroup);
        }
        return tagGroup;
    }

    @Override
    public void deleteTagGroup(Long id) {
        tagMapper.deleteTagGroup(id);
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/StoreService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.TagGroup;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface StoreService {
    
    public List<Payee> getPayees();
    
    public Payee findPayeeByID(Long id);
    
    public Payee findPayeeByName(String name);
    
    public List<Payee> findPayeeByNameRegEx(String name);
    
    public Payee savePayee(Payee payee);
    
    public void deletePayee(Long id);
 
    //**************************************************************************
    // TagGroup Service
    //**************************************************************************

    public List<TagGroup> getTagGroups();
    
    public List<TagGroup> getTagGroupsWithTags();

    public List<TagGroup> findTagGroups(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTags(TagGroup tagGroup);

    public List<TagGroup> findTagGroupsLike(TagGroup tagGroup);
    
    public List<TagGroup> findTagGroupsWithTagsLike(TagGroup tagGroup);
     
    public TagGroup findTagGroupByID(Long id);

    public TagGroup findTagGroupWithTagsByID(Long id);
    
    public TagGroup findTagGroupByName(String name);

    public TagGroup findTagGroupWithTagsByName(String name);
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/service/PayeeService.java
package com.almatarm.wimm.service;

import com.almatarm.money.domain.Payee;
import java.util.List;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface PayeeService {
    public List<Payee> getPayees();

    public List<String> getPayeeNamesList();

    public List<Payee> findPayees(Payee payee);

    public List<Payee> findPayeesLike(Payee payee);

    public Payee findPayeeByID(Long id);

    public Payee findPayeeByName(String name);

    public Payee savePayee(Payee payee);

    public void deletePayee(Long id);
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/manipulator/OrignalAmountTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;



/**
 *
 * @author almatarm
 */
public class OrignalAmountTGM implements TransactionGroupManipulator {

    @Override
    public void manipulate(TransactionGroup transGroup) {
        transGroup.getTransactions().stream().forEach((transaction) -> {
            //TODO from memo of each transaction, get the origon amount if exist
        });
    }
    
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/manipulator/TuningTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;

/**
 *
 * @author almatarm
 */
public class TuningTGM implements TransactionGroupManipulator {
    ShadowTree shadowTree;

    public TuningTGM(ShadowTree shadowTree) {
        this.shadowTree = shadowTree;
    }
    
    @Override
    public void manipulate(TransactionGroup transGroup) {
        transGroup.getTransactions().stream().forEach((transaction) -> { 
            extractThriftPlanEarnings(transaction);
            moveLendBorrowExpensesToAssetsMoneyOwnedToYou(transaction);
        });
    }

    private void moveLendBorrowExpensesToAssetsMoneyOwnedToYou(Transaction transaction) {
        if (transaction.getAccount().getQualifiedName().contains(
                "Lend/Borrow (B)")) {
            transaction.setAccount(shadowTree.getOrCreateAccount(
                    transaction.getAccount().getQualifiedName().replace(
                            "Expenses:Lend/Borrow (B)",
                            "Assets:Money owed to you")));
        }
    }

    public void extractThriftPlanEarnings(Transaction transaction) {
        if(transaction.getAccount().getQualifiedName().equals(
                "Assets:Saudi Aramco:Thrift Plan Saving")
                && (transaction.getMemo().equals("Earnings on Regular Savings") ||
                transaction.getMemo().equals("Earning of Regular Savings"))) {
            transaction.setAccount(shadowTree.getOrCreateAccount(
                    "Assets:Saudi Aramco:Thrift Plan Earnings"));
        }
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/manipulator/StartingBalanceTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;


/**
 *
 * @author almatarm
 */
public class StartingBalanceTGM implements TransactionGroupManipulator {
    ShadowTree shadowTree;

    public StartingBalanceTGM(ShadowTree shadowTree) {
        this.shadowTree = shadowTree;
    }
    
    @Override
    public void manipulate(TransactionGroup transGroup) {
         if(!transGroup.getTransactions().isEmpty() 
                && transGroup.getTransactions().get(0).getPayee().getName()
                        .equals("Starting Balance")
                && transGroup.getTransactions().get(1).getAccount().
                        getQualifiedName().equals("Income:Other Income")
                 ) {
             
            transGroup.getTransactions().get(1).setAccount(
                    shadowTree.getOrCreateAccount("Equity:Opening Balances"));
       }
    }
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/manipulator/SalaryTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;

/**
 *
 * @author almatarm
 */
public class SalaryTGM implements TransactionGroupManipulator {
    ShadowTree shadowTree;

    public SalaryTGM(ShadowTree shadowTree) {
        this.shadowTree = shadowTree;
    }
    
    @Override
    public void manipulate(TransactionGroup transGroup) {
        if(!transGroup.getTransactions().isEmpty() 
                && transGroup.getTransactions().get(0).getMemo().equals("Base Salary")
                && transGroup.getTransactions().get(1).getAccount().
                        getQualifiedName().equals("Income:Other Income")) {
            
            transGroup.getTransactions().get(1).setAccount(
                    shadowTree.getOrCreateAccount("Income:Salary"));
        
        }
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/manipulator/SplitBalanceTGM.java
package com.almatarm.wimm.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;
import java.math.BigDecimal;

/**
 *
 * @author almatarm
 */
public class SplitBalanceTGM implements TransactionGroupManipulator {

    @Override
    public void manipulate(TransactionGroup transGroup) {
        if(transGroup.getBalance().compareTo(BigDecimal.ZERO) != 0) {
            transGroup.getTransactions().stream().forEach((t) -> {
                if(t.getAmount().compareTo(BigDecimal.ZERO) == 0) {
                    t.setAmount(transGroup.getBalance().negate());
                }
            });
        }
    }
    
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/qif/QIFTransaction.java
package com.almatarm.wimm.importing.qif;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class QIFTransaction {
    Currency currency;
    List<String> types = new ArrayList<>();
    List<String> values = new ArrayList<>();

    QIFTransaction(List<String> types, List<String> values) {
        this(types, values, Currency.getInstance("USD"));
    }
    
    QIFTransaction(List<String> types, List<String> values, Currency currency) {
        this.types    = types;
        this.values   = values;
        this.currency = currency;
        
        for(int i = 0; i < types.size(); i++) {
            String type = types.get(i);
            switch (type) {
                case "D":
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    try {
                        date.setTime(sdf.parse(values.get(i)));
                    } catch (ParseException ex) {
                        Logger.getLogger(QIFTransaction.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case "T":
                    amount = new BigDecimal(values.get(i).replaceAll("[,$]", ""));
                    break;
                case "P":
                    payee = values.get(i);
                    break;
                case "C":
                    cleared = values.get(i).equalsIgnoreCase("c");
                    break;
                case "N":
                    checkNumber = values.get(i);
                    break;
                case "A":
                    if(address.isEmpty() && !values.get(i).isEmpty()) {
                        address += values.get(i);
                    } else if(!address.isEmpty() && !values.get(i).isEmpty()) {
                        address += "\n" + values.get(i);
                    }
                    break;
                case "M":
                    memo = values.get(i);
                    break;
                case "L":
                    category = values.get(i);
                    break;
                case "S":
                    curSplit = new Split();
                    curSplit.category = values.get(i);
                    splits.add(curSplit);
                    break;
                case "E":
                    curSplit.memo = values.get(i);
                    break;
                case "$":
                    curSplit.amount = new BigDecimal(values.get(i).replaceAll("[,$]", ""));
                    break;    
            }
        }
    }
    
    Calendar date = Calendar.getInstance();
    BigDecimal amount  = BigDecimal.ZERO;
    String checkNumber = "";
    String payee       = "";
    String address     = "";
    String memo        = "";
    String category    = "";
    boolean cleared = false;

    List<Split> splits = new ArrayList<>();
    Split curSplit = null;
    
    public List<String> getTypes() {
        return types;
    }

    public Calendar getDate() {
        return date;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public String getCheckNumber() {
        return checkNumber;
    }

    public String getDescription() {
        return payee;
    }

    public String getAddress() {
        return address;
    }

    public String getMemo() {
        return memo;
    }

    public String getCategory() {
        return category;
    }

    public boolean isCleared() {
        return cleared;
    }

    public String getPayee() {
        return payee;
    }

    public void setPayee(String payee) {
        this.payee = payee;
    }

    public boolean isSplit() {
        return !splits.isEmpty();
    }

    public List<Split> getSplits() {
        return splits;
    }
    
    public class Split {
        String category   = "";
        String memo       = "";
        BigDecimal amount = BigDecimal.ZERO;

        public Split() {
        }

        public String getCategory() {
            return category;
        }

        public String getMemo() {
            return memo;
        }

        public BigDecimal getAmount() {
            return amount;
        }

        @Override
        public String toString() {
            return "Split{"  
                + "\n\tcategory=" + category 
                + "\n\tmemo=" + memo 
                + "\n\tamount=" + amount + '}';
        }
        
        
    };

    public Currency getCurrency() {
        return currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @Override
    public String toString() {
        return "QIFTransaction{" 
                + "\ndate=" + date 
                + "\namount=" + amount 
                + "\ncheckNumber=" + checkNumber 
                + "\ndescription=" + payee 
                + "\naddress=" + address 
                + "\nmemo=" + memo 
                + "\ncategory=" + category 
                + "\ncleared=" + cleared 
                + "\nsplits=" + splits + '}';
    }
    
}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/qif/QIFReader.java
package com.almatarm.wimm.importing.qif;

import java.util.*;
import java.io.*;

public class QIFReader {

    BufferedReader qifin;
    String path;
    String AccountType;

    public QIFReader(String path) {
        this.path = path;
    }

    public void open() throws IOException {
        qifin = new BufferedReader(new InputStreamReader(
                new FileInputStream(path), "UTF-8"));
        AccountType = qifin.readLine();
    }

    public QIFTransaction next() throws IOException {
        return readRecord();
    }

    public boolean hasNext() throws IOException {
        return qifin.ready();
    }

    private QIFTransaction readRecord() throws IOException {
        String attr;
        List<String> types = new ArrayList<>();
        List<String> values = new ArrayList<>();
        
        while (qifin.ready()) {
            attr = qifin.readLine();
            String type = attr.substring(0, 1);
            if (type.startsWith(TRANSACTION_BREAK)) {
                break;
            }
            String value = attr.substring(1, attr.length());
            
            types.add(type);
            values.add(value);
        }
        QIFTransaction trans = new QIFTransaction(types, values);
        return trans;
    }
    private static final String TRANSACTION_BREAK = "^";

    public static void main(String args[]) throws IOException {
        QIFReader in = new QIFReader("D:\\Dropbox\\VISA.qif");
        in.open();
        while (in.hasNext()) {
            QIFTransaction trans = in.next();
            System.out.println(trans);
        }
    }

}

*** end *** end ***
***$$$@@@ /money-service/src/main/java/com/almatarm/wimm/importing/qif/ynab/YNABImport.java
package com.almatarm.wimm.importing.qif.ynab;


import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.domain.TransactionStatus;
import com.almatarm.money.domain.TransactionType;
import static com.almatarm.money.domain.TransactionType.Budget;
import static com.almatarm.money.domain.TransactionType.Transfer;
import com.almatarm.money.importing.ShadowAccount;
import com.almatarm.money.importing.ShadowTransaction;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;
import com.almatarm.money.qif.QIFReader;
import com.almatarm.money.qif.QIFTransaction;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;



/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class YNABImport {
    /**
     * the folder where YNAB QIF files 
     */
    final File importFolder;
    
    /**
     * A Mapping between YNAB account names and WIMM qualified account names.
     */
    final Map<String, String[]> accountMappings;
    
    final Map<String, String> expensesMappings;
    /**
     * Parsing result
     */
    final Set<ShadowAccount> shadowAccounts = new HashSet<>();
    List<TransactionGroupManipulator> tgManipulators = new ArrayList<>(); 
    
    ShadowTree shadowTree;
    
    List<String> proccessedAccount = new ArrayList<>();
    public YNABImport(File importFolder, Map<String, String[]> accountMappings,
           Map<String, String> expensesMappings, Account root) {
        this.importFolder = importFolder;
        this.accountMappings = accountMappings;
        this.expensesMappings = expensesMappings;
        this.shadowTree = new ShadowTree(root);
    }

    public File getImportFolder() {
        return importFolder;
    }

    public void addTransactionGroupManipulator(TransactionGroupManipulator tgm) {
        tgManipulators.add(tgm);
    }

    public ShadowTree getShadowTree() {
        return shadowTree;
    }
    
    public Map<String, String[]> getAccountMappings() {
        return accountMappings;
    }

    public ShadowAccount importTransaction() throws IOException {
        proccessedAccount.clear();
        
        System.out.println("------------------------------------------------------------------------");
        for(File qifFile : importFolder.listFiles((File dir, String name) -> name.endsWith(".qif"))) {
            if(qifFile.getName().contains("Thrift Plan Loan")
                    || qifFile.getName().contains("Balancer")
                    || qifFile.getName().contains("Home Credit")
                    || qifFile.getName().contains("Mars")
                    || qifFile.getName().contains("Lend-Borrow")
                    || qifFile.getName().contains("WPA-306 (CAD)")
                    || qifFile.getName().contains("WPA-306 Buffer (CAD)")
                    ) 
                continue;
//            if(
//                    qifFile.getName().contains("Mufeed")
//                     qifFile.getName().contains("WPA")
//                    || qifFile.getName().contains("VISA")
//                    || qifFile.getName().contains("MCash")
//                    || qifFile.getName().contains("-Home as")
//                    )
            process(qifFile);
        }
        return shadowTree.getRoot();
    }
    
    private void process(File qifFile) throws IOException {
        System.out.format("%-60s %-30s %n", qifFile.getName(), 
                getYNABAccountNameFromFileName(qifFile.getName()));
        
        String ynabFromAccount = getYNABAccountNameFromFileName(qifFile.getName());
        String fromAccountQName = accountMappings.get(ynabFromAccount)[0];
        System.out.println(ynabFromAccount + "/" + fromAccountQName);
        ShadowAccount fromAccount = shadowTree.getOrCreateAccount(fromAccountQName);
        
        List<QIFTransaction> qifTrans = read(qifFile);
        qifTrans.stream().forEach((QIFTransaction qifTran) -> {
            TransactionGroup trnasGroup = toTransaction(qifTran, fromAccount);
            
            tgManipulators.stream().forEach( (manipulator) -> {
                manipulator.manipulate(trnasGroup);
            });
            
            trnasGroup.getTransactions().stream().forEach((t) -> {
                t.getAccount().addTransaction(t);
            });
        });
        
        proccessedAccount.add(fromAccountQName);
    }
    
    private String getYNABAccountNameFromFileName(String fileName) {
        int iDash = fileName.indexOf("-");
        int iAsOf = fileName.lastIndexOf(" as of");
        return fileName.substring(iDash + 1, iAsOf);
    }

    private List<QIFTransaction> read(File qifFile) throws IOException {
        List<QIFTransaction> qifTransaction = new ArrayList<>();
        QIFReader in = new QIFReader(qifFile.getAbsolutePath());
        in.open();
        while (in.hasNext()) {
            qifTransaction.add(in.next());
        }
        return qifTransaction;
    }

    private TransactionGroup toTransaction(QIFTransaction qifTran,
            ShadowAccount fromAccount) {
        TransactionGroup transGroup = new TransactionGroup();
    
        Transaction fromTran = new Transaction();
        
        if(qifTran != null) {
            //Get the type
            TransactionType type = getType(qifTran);
            fromTran.setAmount(qifTran.getAmount());
            fromTran.setStatus(qifTran.isCleared()?TransactionStatus.CLEARED:
                    TransactionStatus.NOT_CLEARED);
            fromTran.setDate(qifTran.getDate());
            fromTran.setMemo(qifTran.getMemo());
            fromTran.setNumber(qifTran.getCheckNumber());
            fromTran.setPayee(new Payee(qifTran.getPayee(), qifTran.getAddress()));
            fromTran.setAccount(fromAccount);
            fromTran.setType(type);
            
            Transaction toTran;
            String ynabToAccountName;
            String toAccountQName;
            ShadowAccount toAccount;
                
            switch(type) {
                case Transfer:
                    
                    fromTran.setPayee(new Payee("Transfer TFX"));
                    fromTran.setType(TransactionType.Transfer);
                    ynabToAccountName = qifTran.getPayee().substring(
                            "Transfer : ".length()).trim();
                    toAccountQName = accountMappings.get(ynabToAccountName)[0];
                    toAccount = shadowTree.getOrCreateAccount(toAccountQName); 
                    
                    toTran = new Transaction(fromTran);                        
                        toTran.setAmount(fromTran.getAmount().negate());
                        toTran.setAccount(toAccount);
                        
                        if(!proccessedAccount.contains(toAccount.getQualifiedName())) {
                            transGroup.addTransaction(new ShadowTransaction(fromTran));
                            transGroup.addTransaction(new ShadowTransaction(toTran));    
                        }
                    break;
                case Budget:
                    
                default:
                    
                    if(qifTran.isSplit()) {
                        transGroup.addTransaction(new ShadowTransaction(fromTran));
                        for(int i = 0; i < qifTran.getSplits().size(); i++) {
                            QIFTransaction.Split qifSplit = qifTran.getSplits().get(i);
                            toAccount = getOrCreateAccount(qifSplit.getCategory());
                            toTran = new Transaction(fromTran);
                            toTran.setMemo(qifSplit.getMemo());
                            toTran.setAmount(qifSplit.getAmount().negate());
                            toTran.setAccount(toAccount);
                            transGroup.addTransaction(new ShadowTransaction(toTran));    
                        }
                    } else { 
                        toAccount = getOrCreateAccount(qifTran.getCategory());
                        
                        switch (qifTran.getCategory()) {
//                            case "Income:Available this month":
//                                toAccount = shadowTree.getOrCreateAccount(
//                                        "Income:Other Income");
//                                break;
                            case "Income:Available next month":
//                                toAccount = shadowTree.getOrCreateAccount(
//                                        "Income:Other Income");
                                fromTran.getEffectiveDate().add(Calendar.MONTH, 1);
                                fromTran.getEffectiveDate().set(Calendar.DAY_OF_MONTH, 1);
                                break;
//                            default:
//                                toAccount = shadowTree.getOrCreateAccount("Expenses:"
//                                        + qifTran.getCategory());
//                                break;
                        }
                        toTran = new Transaction(fromTran);
                        toTran.setAmount(fromTran.getAmount().negate());
                        toTran.setAccount(toAccount);

                        transGroup.addTransaction(new ShadowTransaction(fromTran));
                        transGroup.addTransaction(new ShadowTransaction(toTran));
                    }
                    break;
                
//                default:
//                    System.out.println("NEW TYPE");
//                    transGroup.addTransaction(new ShadowTransaction(fromTran));
//                    
            }
        }
       
        return transGroup;
    }
    
    private TransactionType getType(QIFTransaction qifTran) {
        if (qifTran.getPayee().startsWith("Transfer : ")) {
            return TransactionType.Transfer;
        }
        if (!qifTran.getCategory().isEmpty()) {
            return TransactionType.Budget;
        }
        return TransactionType.Transaction;
    }
    ;
    private ShadowAccount getOrCreateAccount(String category) {
        if(expensesMappings.containsKey(category)) {
            return shadowTree.getOrCreateAccount(expensesMappings.get(category));
        }
        switch (category) {
            case "Income:Available this month":
            case "Income:Available next month":
                return shadowTree.getOrCreateAccount("Income:Other Income");
            default:
                return shadowTree.getOrCreateAccount("Expenses:" + category);
        }
    }
}

*** end *** end ***
***$$$@@@ /money-domain/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <name>money-domain</name>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>money-domain</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    
    <repositories>
        <!--
        Repository hosting NetBeans modules, especially APIs.
        Versions are based on IDE releases, e.g.: RELEASE691
        To create your own repository, use: nbm:populate-repository
        -->
        <repository>
            <id>netbeans</id>
            <name>NetBeans</name>
            <url>http://bits.netbeans.org/nexus/content/groups/netbeans/</url>
        </repository>
    </repositories>
    
    
    <dependencies>
        <dependency>
            <groupId>javax.money</groupId>
            <artifactId>money-api</artifactId>
            <version>1.0.1</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.javamoney</groupId>
            <artifactId>moneta</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>xChange</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.netbeans.api</groupId>
            <artifactId>org-openide-util-lookup</artifactId>
            <version>RELEASE81</version>
            <type>jar</type>
        </dependency>
        
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.14</version>
        </dependency>
    </dependencies>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    
</project>
*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/monetary/StaticExchange.java
package com.almatarm.money.monetary;

import com.almatarm.xchange.ExchangeException;
import java.math.BigDecimal;

/**
 *
 * @author almatarm
 */
public class StaticExchange {
    
    private static String[][] exchangeTable = {
        {"SAR", "CAD", "0.37", null},
        {"CAD", "SAR", "2.70", null},
        {"USD", "SAR", "3.75", null},
        {"SAR", "USD", "0.27", null},
        
        {"ICSAB", "SAR", "1", "100"},
        
    };
    
    public static BigDecimal exchange(String from, String to, BigDecimal amount) 
            throws ExchangeNotSupportedException, ExchangeException {
        if(!isExchangeSupported(from, to)) {
            throw new ExchangeNotSupportedException("Exchanging from " + from 
                    + " to " + to + " is not supported!");
        }
        
        for (String[] exchangeRow : exchangeTable) {
            if(exchangeRow[0].equals(from) && exchangeRow[1].equals(to)) {
                BigDecimal exRate =  new BigDecimal(exchangeRow[2]).multiply(amount);
                return exRate;
            }
        }
        
        throw new ExchangeException("Could not connect to get an update for "
                    + "exchange rate from " + from + " to " + to);
    }
    
    public static boolean isExchangeSupported(String from, String to) {
        for (String[] exchangeRow : exchangeTable) {
            if(exchangeRow[0].equals(from) && exchangeRow[1].equals(to))
                return true;
        }
        return false;
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/monetary/XChangeRateProvider.java
package com.almatarm.money.monetary;

import com.almatarm.xchange.ExchangeException;
import com.almatarm.xchange.XChange;
import java.math.BigDecimal;
import java.util.Currency;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.CurrencyUnit;
import javax.money.convert.ConversionContext;
import javax.money.convert.ConversionQuery;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.ProviderContext;
import javax.money.convert.ProviderContextBuilder;
import javax.money.convert.RateType;
import org.javamoney.moneta.ExchangeRateBuilder;
import org.javamoney.moneta.spi.AbstractRateProvider;
import org.javamoney.moneta.spi.DefaultNumberValue;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@ServiceProvider(service=ExchangeRateProvider.class)
public class XChangeRateProvider extends AbstractRateProvider {

    private final static ProviderContext CONTEXT = ProviderContextBuilder
            .of("xChange", RateType.REALTIME)
            .set("providerDescription", "Yahoo!").build();
    
    public XChangeRateProvider() {
        super(CONTEXT);
        
    }

    @Override
    public ExchangeRate getExchangeRate(ConversionQuery conversionQuery) {
        try {
            if (!isAvailable(conversionQuery)) {
                return null;
            }
            
            CurrencyUnit base = conversionQuery.getBaseCurrency();
            CurrencyUnit term = conversionQuery.getCurrency();
            
            BigDecimal exchangeRateFactor = XChange.getExchangeRate(
                    Currency.getInstance(base.getCurrencyCode()),
                    Currency.getInstance(term.getCurrencyCode()));
            
            ExchangeRateBuilder builder = new ExchangeRateBuilder(
                    ConversionContext.of(CONTEXT.getProviderName(), 
                            RateType.REALTIME));
            builder.setBase(base);
            builder.setTerm(term);
            builder.setFactor(DefaultNumberValue.of(exchangeRateFactor));
            return builder.build();
        } catch (ExchangeException ex) {
            Logger.getLogger(XChangeRateProvider.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/monetary/ExchangeRateException.java
package com.almatarm.money.monetary;

/**
 *
 * @author almatarm
 */
public class ExchangeRateException extends Exception {

    /**
     * Creates a new instance of <code>ExchangeRateException</code> without
     * detail message.
     */
    public ExchangeRateException() {
    }

    /**
     * Constructs an instance of <code>ExchangeRateException</code> with the
     * specified detail message.
     *
     * @param msg the detail message.
     */
    public ExchangeRateException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/monetary/RewardPointsProvider.java
package com.almatarm.money.monetary;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.money.CurrencyContext;
import javax.money.CurrencyContextBuilder;
import javax.money.CurrencyQuery;
import javax.money.CurrencyUnit;
import javax.money.spi.CurrencyProviderSpi;
import org.javamoney.moneta.CurrencyUnitBuilder;
import org.openide.util.lookup.ServiceProvider;

@ServiceProvider(service = CurrencyProviderSpi.class)
public final class RewardPointsProvider implements CurrencyProviderSpi {
    public static final String NAME = "Reward Points";
    
    private Set<CurrencyUnit> currencies = new HashSet<>();
    private final CurrencyContext context = CurrencyContextBuilder.of(NAME).build();
    
    private final List<String> currencyCodes = new ArrayList<String>(
            Arrays.asList(new String[]{ "ICSAB", "Shukran", "Qitaf" }));
    private final Map<String, CurrencyUnit> currenciesMap = new HashMap<>();
    
    public RewardPointsProvider() {
        for(String code : currencyCodes) {
            CurrencyUnit cu = CurrencyUnitBuilder.of(code, context).build();
            currenciesMap.put(code, cu);
            currencies.add(cu);
        }
        currencies = Collections.unmodifiableSet(currencies);
    }

    @Override
    public Set<CurrencyUnit> getCurrencies(CurrencyQuery query) {
        Set<CurrencyUnit> foundCurrencies = new HashSet<>();
        query.getCurrencyCodes().stream().forEach( (code) -> { 
            if(currencyCodes.contains(code)) {
                foundCurrencies.add(currenciesMap.get(code));
            }
        });
        return foundCurrencies;
    } 
       
}

   
*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/monetary/ExchangeNotSupportedException.java
package com.almatarm.money.monetary;

/**
 *
 * @author almatarm
 */
public class ExchangeNotSupportedException extends Exception {

    /**
     * Creates a new instance of <code>ExchangeNotSupportedException</code>
     * without detail message.
     */
    public ExchangeNotSupportedException() {
    }

    /**
     * Constructs an instance of <code>ExchangeNotSupportedException</code> with
     * the specified detail message.
     *
     * @param msg the detail message.
     */
    public ExchangeNotSupportedException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/monetary/StaticChangeRateProvider.java
package com.almatarm.money.monetary;

import com.almatarm.xchange.ExchangeException;
import java.math.BigDecimal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.CurrencyUnit;
import javax.money.convert.ConversionContext;
import javax.money.convert.ConversionQuery;
import javax.money.convert.ExchangeRate;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.ProviderContext;
import javax.money.convert.ProviderContextBuilder;
import javax.money.convert.RateType;
import org.javamoney.moneta.ExchangeRateBuilder;
import org.javamoney.moneta.spi.AbstractRateProvider;
import org.javamoney.moneta.spi.DefaultNumberValue;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
@ServiceProvider(service=ExchangeRateProvider.class)
public class StaticChangeRateProvider extends AbstractRateProvider {

    private final static ProviderContext CONTEXT = ProviderContextBuilder
            .of("Static", RateType.OTHER).build();
    
    public StaticChangeRateProvider() {
        super(CONTEXT);
    }

    @Override
    public ExchangeRate getExchangeRate(ConversionQuery conversionQuery) {
        try {
            if (!isAvailable(conversionQuery)) {
                return null;
            }
            
            CurrencyUnit base = conversionQuery.getBaseCurrency();
            CurrencyUnit term = conversionQuery.getCurrency();
            
            BigDecimal exchangeRateFactor = StaticExchange.exchange(
                    base.getCurrencyCode(), term.getCurrencyCode(), BigDecimal.ONE);
            
            ExchangeRateBuilder builder = new ExchangeRateBuilder(
                    ConversionContext.of(CONTEXT.getProviderName(), 
                            RateType.REALTIME));
            builder.setBase(base);
            builder.setTerm(term);
            builder.setFactor(DefaultNumberValue.of(exchangeRateFactor));
            return builder.build();
        } catch (ExchangeException | ExchangeNotSupportedException ex) {
            Logger.getLogger(StaticChangeRateProvider.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        return null;
    }

}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/service/AccountService.java
package com.almatarm.money.service;

import com.almatarm.money.domain.Account;
import java.util.List;

/**
 * Accounts are read and cached 
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public interface AccountService {

//    public Account find(String name);    
//    public Account findByQualifiedName(String name);
//    
//    public void buildCache();

    
    //**************************************************************************
    // Account Service
    //**************************************************************************

    
    public List<Account> getAccounts();

    public List<Account> findAccounts(Account account);

    public List<Account> findAccountsLike(Account account);

    public Account findAccountByID(Long id);

    public Account findAccountByQualifiedName(String qualifiedName);

    public void insertAccount(Account account);

    public void updateAccount(Account account);

    public void deleteAccount(Long id);

}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/service/fixed/FixedAccountService.java
package com.almatarm.money.service.fixed;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.AccountType;
import com.almatarm.money.domain.CreditAccount;
import com.almatarm.money.domain.CurrencyUnitDO;
import com.almatarm.money.domain.Loan;
import com.almatarm.money.service.AccountService;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author almatarm
 */
public class FixedAccountService implements AccountService {

    Map<Long,   Account> accountIdsMap;
    Map<String, Account> qNameMap;
    
    List<Account> accounts;
    
//    @Override
    public Account find(String name) {
        throw new UnsupportedOperationException("Not supported yet."); 
    }

//    @Override
    public Account findByQualifiedName(String qName) {
        return qNameMap.get(qName);
    }

//    @Override
    public void buildCache() {
        qNameMap = new HashMap<>();
        
        //Map Account ID --> Account
        accountIdsMap = new HashMap<>();
        List<Account> accounts = getAccounts();
        accounts.stream().forEach((account) -> {
            accountIdsMap.put(account.getId(), account);
        });
        
        //Build Parent Child Rel
        accounts.stream().forEach((account) -> {
            Long parentAccountId  = account.getParentID();
            Account parentAccount = null;
            if(parentAccountId != null && 
                    (parentAccount = accountIdsMap.get(parentAccountId)) != null) {
                account.setParent(parentAccount);
            }
        });
        
        //Build Qualified Name --> Account Map
        accounts.stream().forEach( (account) -> {
            qNameMap.put(account.getQualifiedName(), account);
            System.out.println(account.getQualifiedName());
        });    
    }


    static long idCounter = 0;
    @Override
    public List<Account> getAccounts() {
        if (accounts == null) {
            accounts = new ArrayList<>();

            CurrencyUnitDO CAD = CurrencyUnitDO.getDefaultCurrency("CAD");
            CurrencyUnitDO SAR = CurrencyUnitDO.getDefaultCurrency("SAR");

            
            Account root = new Account("Root", "The ultimate parent of all account",
                    SAR, "", AccountType.ROOT, BigDecimal.ZERO);
            saveAccount(root);

            //Assets
            Account assets = new Account("Assets", "Assets Account",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            assets.setParentID(root.getId());
            saveAccount(assets);

            Account sabb = new Account("SABB", "SABB Bank Accounts",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            sabb.setParentID(assets.getId());
            saveAccount(sabb);

            Account spring = new Account("Spring", "Main Accounts",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            spring.setParentID(sabb.getId());
            saveAccount(spring);

            Account springChecking = new Account("Checking", "SABB Bank Accounts",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            springChecking.setParentID(spring.getId());
            saveAccount(springChecking);

            Account springCash = new Account("Cash", "SABB Bank Accounts",
                    SAR, "", AccountType.CASH, BigDecimal.ZERO);
            springCash.setParentID(spring.getId());
            saveAccount(springCash);

            Account rainyDays = new Account("Rainy Days", "Irregular Expenses",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            rainyDays.setParentID(sabb.getId());
            saveAccount(rainyDays);

            // |__ Mufeed
            Account home = new Account("Home", "Regular Expenses",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            home.setParentID(sabb.getId());
            saveAccount(home);

            Account homeChecking = new Account("Checking", "Regular Expenses",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            homeChecking.setParentID(home.getId());
            saveAccount(homeChecking);

            Account homeCash = new Account("Cash", "Regular Expenses",
                    SAR, "", AccountType.CASH, BigDecimal.ZERO);
            homeCash.setParentID(home.getId());
            saveAccount(homeCash);

            // |__ Sea
            Account sea = new Account("Sea", "Sea Saving Account",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            sea.setParentID(sabb.getId());
            saveAccount(sea);

            Account seaCredit = new Account("Credit Payback",
                    "Credit Card Payback Saving",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            seaCredit.setParentID(sea.getId());
            saveAccount(seaCredit);

            // |__ Mufeed
            Account mufeed = new Account("Mufeed", "Mufeed's Account",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            mufeed.setParentID(sabb.getId());
            saveAccount(mufeed);

            Account mufeedChecking = new Account("Checking", "Mufeed's Checking Account",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            mufeedChecking.setParentID(mufeed.getId());
            saveAccount(mufeedChecking);

            Account mufeedCash = new Account("Cash", "Mufeed's Cash Account",
                    SAR, "", AccountType.CASH, BigDecimal.ZERO);
            mufeedCash.setParentID(mufeed.getId());
            saveAccount(mufeedCash);

            Account ahmad = new Account("Ahmad", "Ahmad's Saving",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            ahmad.setParentID(sabb.getId());
            saveAccount(ahmad);

            Account znz = new Account("ZnZ", "Zahraa and Zainb's Saving",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            znz.setParentID(sabb.getId());
            saveAccount(znz);

            Account bigSaving = new Account("Big Savings", "",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            bigSaving.setParentID(sabb.getId());
            saveAccount(bigSaving);

            // |__ Saudi Aramco
            Account sa = new Account("Saudi Aramco", "",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            sa.setParentID(assets.getId());
            saveAccount(sa);

            Account thriftPlanSaving = new Account("Thrift Plan Saving", "",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            thriftPlanSaving.setParentID(sa.getId());
            saveAccount(thriftPlanSaving);

            // |__ NCB
            Account ncb = new Account("NCB Bank", "NCB Bank Accounts",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            ncb.setParentID(assets.getId());
            saveAccount(ncb);

            Account ncbChecking = new Account("Checking", "NCB Checking Account",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            ncbChecking.setParentID(ncb.getId());
            saveAccount(ncbChecking);

            // |__ Samba
            Account samba = new Account("Samba Bank", "Samba Bank Accounts",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            samba.setParentID(assets.getId());
            saveAccount(samba);

            Account sambaChecking = new Account("Checking", "Samba Checking Account",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            sambaChecking.setParentID(samba.getId());
            saveAccount(sambaChecking);

            // |__ Investment
            Account investment = new Account("Investments", "",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            investment.setParentID(assets.getId());
            saveAccount(investment);

            Account stocks = new Account("Stocks", "",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            stocks.setParentID(investment.getId());
            saveAccount(stocks);

            // |__ Others
            Account others = new Account("Others", "",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            others.setParentID(assets.getId());
            saveAccount(others);

//        Account balancer  = new Account("Balancer", "Balancing CAD to SAR",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        balancer.setParentID(others.getId());
//        saveAccount(balancer);
//        
//        Account homeCredit  = new Account("Home Credit", "Credit for Home Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        homeCredit.setParentID(others.getId());
//        saveAccount(homeCredit);
//        
//        Account lendBorrow  = new Account("Lend-Borrow", "Lend Borrow Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        lendBorrow.setParentID(others.getId());
//        saveAccount(lendBorrow);
//        
//        Account mars  = new Account("Mars", "Mufeed's Credit Account",
//                currency, "", AccountType.BANK, BigDecimal.ZERO);
//        mars.setParentID(others.getId());
//        saveAccount(mars);
            Account wpa306_CAD = new Account("WPA-306 (CAD)", "",
                    CAD, "", AccountType.BANK, BigDecimal.ZERO);
            wpa306_CAD.setParentID(others.getId());
            saveAccount(wpa306_CAD);

            Account wpa306Buffer_CAD = new Account("WPA-306 Buffer (CAD)", "",
                    CAD, "", AccountType.BANK, BigDecimal.ZERO);
            wpa306Buffer_CAD.setParentID(others.getId());
            saveAccount(wpa306Buffer_CAD);

            Account wpa306Buffer_SAR = new Account("WPA-306 Buffer (SAR)", "",
                    SAR, "", AccountType.BANK, BigDecimal.ZERO);
            wpa306Buffer_SAR.setParentID(others.getId());
            saveAccount(wpa306Buffer_SAR);

            //liability        
            Account liability = new Account("Liability", "Liability Account",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            liability.setParentID(root.getId());
            saveAccount(liability);

            // |__ Credit Cards
            Account creditCards = new Account("Credit Cards", "Credit Cards Account",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            creditCards.setParentID(liability.getId());
            saveAccount(creditCards);

            CreditAccount visa = new CreditAccount(new BigDecimal(47500), 15, "SABB VISA",
                    "SABB VISA Card", SAR, "", BigDecimal.ZERO);
            visa.setParentID(creditCards.getId());
            saveAccount(visa);

            CreditAccount mastercard = new CreditAccount(new BigDecimal(18000), 10, "SABB MasterCard",
                    "SABB Mastercard", SAR, "", BigDecimal.ZERO);
            mastercard.setParentID(creditCards.getId());
            saveAccount(mastercard);

            // |__ Loans
            Account loans = new Account("Loans", "Loans",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            loans.setParentID(liability.getId());
            saveAccount(loans);

            Loan sabbLoan = new Loan("SABB", "", SAR, "", BigDecimal.ZERO);
            sabbLoan.setParentID(loans.getId());
            saveAccount(sabbLoan);

            Loan srtpLoan = new Loan("SRTP", "", SAR, "", BigDecimal.ZERO);
            srtpLoan.setParentID(loans.getId());
            saveAccount(srtpLoan);

            // |__ Equity
            Account equity = new Account("Equity", "Equity",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            equity.setParentID(root.getId());
            saveAccount(equity);

            Account openingBalances = new Account("Opening Balances", "",
                    SAR, "", AccountType.EQUITY, BigDecimal.ZERO);
            openingBalances.setParentID(equity.getId());
            saveAccount(openingBalances);

            // |__ Income
            Account income = new Account("Income", "Income",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            income.setParentID(root.getId());
            saveAccount(income);

            Account salary = new Account("Salary", "",
                    SAR, "", AccountType.INCOME, BigDecimal.ZERO);
            salary.setParentID(income.getId());
            saveAccount(salary);

            Account otherIncome = new Account("Other Income", "",
                    SAR, "", AccountType.INCOME, BigDecimal.ZERO);
            otherIncome.setParentID(income.getId());
            saveAccount(otherIncome);

            // |__ Expenses
            Account expenses = new Account("Expenses", "Expenses",
                    SAR, "", AccountType.PLACE_HOLDER, BigDecimal.ZERO);
            expenses.setParentID(root.getId());
            saveAccount(expenses);
        }
        return accounts;
    }

    @Override
    public List<Account> findAccounts(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Account> findAccountsLike(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Account findAccountByID(Long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

//    @Override
    public List<Account> findAccountsByName(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

//    @Override
    public Account saveAccount(Account account) {
        if(account.getQualifiedName() == null || !qNameMap.containsKey(account.getQualifiedName())) {
            account.setId(idCounter++);
            accounts.add(account);
        }
        return account;
    }

    @Override
    public void deleteAccount(Long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
//    public static void main(String[] args) {
//        AccountService acService = new FixedAccountService();
//        acService.buildCache();
//        
//        Account root = acService.getAccounts().get(0);
//        print(root, 5);
//    }
//    
    private static void print(Account account, int maxLevel) {
        System.out.println("Account                              Amount ");
        System.out.println("=================                    =======");
        print(account, "", maxLevel);
    }
    
    private final static String SPACE = "  "; 
    private static void print(Account account, final String space, int maxLevel) {
        if(space.length() > maxLevel * SPACE.length()) {
            return;
        }
        System.out.format("%-33s %3s %10.2f     %-50s %-30s %n", 
                fix(space + account.getName(), 33), 
                account.getCurrency().getCode(),
                account.getBalanceAmount(), 
                fix(account.getQualifiedName(), 50), 
                account.getType());
        
        account.getChildren().stream().forEach((a) -> {
            print(a, space +  "  ", maxLevel);
        });
    }
    
    public static String fix(String str, int maxLen) {
        if(str == null) return "nnnn";
        String out = isProbablyArabic(str)? "********": str;
        return out.length() > maxLen? out.substring(0, maxLen) : out;
    }
    
    public static boolean isProbablyArabic(String s) {
        String arabicLetters = "ذ د ج ح خ ه ع غ إ ف ق ث ص ض ط ك م ن ت ا ل أ  ب ي س ش ظ ز و ة ى لا ر ؤ ء ئ";
        for (int i = 0; i < s.length();) {
            int c = s.codePointAt(i);
            if (c >= 0x0600 && c <= 0x06E0) {
                return true;
            } else if (arabicLetters.contains(s.charAt(i) + "") && s.charAt(i) != ' ' ) {
                return true;
            }
            i += Character.charCount(c);
        }
        return false;
    }

    @Override
    public Account findAccountByQualifiedName(String qualifiedName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void insertAccount(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void updateAccount(Account account) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/TransactionManager.java
package com.almatarm.money.domain;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author almatarm
 */
public class TransactionManager implements PropertyChangeListener {

    /**
     * List of transactions in this group
     */
    List<Transaction> transactions;

    Map<Period, TransactionRange> periodsMap = new HashMap<>();
//    Map<Period, TransactionRange> ePeriodsMap = new HashMap<>();
    
    /**
     * Manually Sorted Array of Period objects 
     */
    List<Period> periods = new ArrayList<>();    
    List<Period> ePeriods = new ArrayList<>();
    
    public TransactionManager(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    public List<Transaction> getTransactions() {
        return Collections.unmodifiableList(transactions);
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }
    
    public boolean addTransaction(Transaction t) {
        addToBuckets(t);
        return transactions.add(t);
    }
    
    public boolean removeTransaction(Transaction t) {
        //TODO add removeFromBuckets
        return transactions.remove(t);
    }

    /**
     * @return a sorted list of periods 
     */
    public List<Period> getPeriods() {
        return periods;
    }
    
    public TransactionRange getTransactionRanage(Period period) {
        return periodsMap.get(period);
    }
    
    //Add the transaction to buckets usually classifed by months
    private void addToBuckets(Transaction transaction) {
        addToBuckets(transaction, false, periods);
        addToBuckets(transaction, true,  ePeriods);
    }
    
    private void addToBuckets(Transaction transaction, boolean effective,
            List<Period> prds) {        
        Period p = Period.monthOf(effective?transaction.getEffectiveDate():
                transaction.getDate());
        p.setType(effective?Period.Type.EFFECTIVE_DATE:Period.Type.TRANSACTION_DATE);
        if(!periodsMap.containsKey(p)) {
            prds.add(p);
            TransactionRange tr = new TransactionRange(p);
            tr.addPropertyChangeListener(this);
            periodsMap.put(p, tr);
            Collections.sort(prds);
            
            //Set starting balance
            int idx = prds.indexOf(p);
            if(idx > 0) {
                TransactionRange lastPeriodTR = periodsMap.get(prds.get(idx -1));
                tr.setCumulativeBalance(lastPeriodTR.getCumulativeBalance()
                        .add(lastPeriodTR.getBalance()));
            }
        }
        periodsMap.get(p).addTransaction(transaction);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getPropertyName().equals(TransactionRange.PROP_BALANCE)) {
            //Update the balance of all period after the current period
            BigDecimal transactionAmount = ((BigDecimal) evt.getNewValue())
                    .subtract((BigDecimal) evt.getOldValue());
            Period p = ((TransactionRange) evt.getSource()).getPeriod();
            List<Period> prds = p.getType() == Period.Type.TRANSACTION_DATE?
                    periods: ePeriods;
            int periodIdx = prds.indexOf(p);
        
            for(int i = periodIdx + 1; i < prds.size(); i++) {
                TransactionRange tr = periodsMap.get(prds.get(i)); 
                tr.setCumulativeBalance(tr.getCumulativeBalance()
                    .add(transactionAmount));
            }
        }
    }
} 

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/TransactionStatus.java
package com.almatarm.money.domain;

/**
 *
 * @author almatarm
 */
public enum TransactionStatus {
        NOT_CLEARED("N"),
        CLEARED("C"),
        RECONCILED("R"),;

        String discriminator;

        private TransactionStatus(String discriminator) {
            this.discriminator = discriminator;
        }

        public String getDiscriminator() {
            return discriminator;
        }    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/TransactionGroup.java
package com.almatarm.money.domain;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class TransactionGroup {
    /**  
     * TransactionGroup ID
     */
    Long id;
    
    /**
     * List of transactions in this group
     */
    List<Transaction> transactions = new ArrayList<>();

    public TransactionGroup() {
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }
    
    public boolean addTransaction(Transaction t) {
        return transactions.add(t);
    }
    
    public boolean removeTransaction(Transaction t) {
        return transactions.remove(t);
    }
    
    public boolean isSplit() {
        return transactions.size() > 2;
    }
    
    public BigDecimal getBalance() {
        BigDecimal balance = new BigDecimal(0.0f);
        for(Transaction t : transactions) {
            balance = balance.add(t.getAmount());
        }
        return balance;
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/proxy/AccountProxy.java
package com.almatarm.money.domain.proxy;

import com.almatarm.money.domain.Account;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

/**
 *
 * @author almatarm
 */
public class AccountProxy implements InvocationHandler {

    final Account realObject;

    public AccountProxy(Account realObject) {
        this.realObject = realObject;
    }
    
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("Proxying: " + method.getName());
        return method.invoke(proxy, args);
    }
    
    public static Account create(Account account) {
        return (Account) Proxy.newProxyInstance(Account.class.getClassLoader(), 
                new Class[] {}, new AccountProxy(account));
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/Tag.java
package com.almatarm.money.domain;

/**
 *
 * @author almatarm
 */
public class Tag {
    /**
     * Tag ID
     */
    Long id;
    
    /**
     * Tag Name
     */
    String name;
    
    TagGroup tagGroup;

    public Tag() {
    }

    public Tag(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public TagGroup getTagGroup() {
        return tagGroup;
    }

    public void setTagGroup(TagGroup tagGroup) {
        this.tagGroup = tagGroup;
    }

    @Override
    public String toString() {
        return name;
    }
    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/User.java
package com.almatarm.money.domain;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class User {

    private Integer userId;
    private String emailId;
    private String password;
    private String firstName;
    private String lastName;

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Override
    public String toString() {
        return "User [userId="+ userId +   ", emailId="+ emailId
                +   ", password="+ password +   ", firstName="+ firstName
                +   ", lastName="+ lastName + "]";
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/Loan.java
package com.almatarm.money.domain;

import java.math.BigDecimal;
import java.util.Currency;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class Loan extends Account {
    BigDecimal presentValue;
    BigDecimal interestRate;

    public Loan() {
        type = AccountType.LOAN;
    }

    public Loan(String name, CurrencyUnitDO currency) {
        super(name, "", currency, "", AccountType.LOAN, BigDecimal.ZERO);
    }

    public Loan(String name, String description, CurrencyUnitDO currency, 
            String notes, BigDecimal balance) {
        super(name, description, currency, notes, AccountType.LOAN, balance);
    }

    public BigDecimal getPresentValue() {
        return presentValue;
    }

    public void setPresentValue(BigDecimal presentValue) {
        this.presentValue = presentValue;
    }

    public BigDecimal getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(BigDecimal interestRate) {
        this.interestRate = interestRate;
    }

}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/CurrencyUnitDO.java
package com.almatarm.money.domain;

import java.io.Serializable;
import java.util.Currency;
import javax.money.CurrencyUnit;
import javax.money.Monetary;

/**
 *
 * @author almatarm
 */
public class CurrencyUnitDO implements Serializable {
    /**
     * ID of this Currency Unit
     */
    Long id;
    
    String code;
    
    String description;
    
    String symbol;
    
    String provider;

    int fractionDigits;
    
    public CurrencyUnitDO() {
    }

    public CurrencyUnitDO(String code, String description, String provider) {
        this.code = code;
        this.description = description;
        this.provider = provider;
    }

    public CurrencyUnitDO(String code, String description, String symbol, String provider, int fractionDigits) {
        this.code = code;
        this.description = description;
        this.symbol = symbol;
        this.provider = provider;
        this.fractionDigits = fractionDigits;
    }
    
    public CurrencyUnitDO(Long id, String code, String description, String provider) {
        this.id = id;
        this.code = code;
        this.description = description;
        this.provider = provider;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getProvider() {
        return provider;
    }

    public void setProvider(String provider) {
        this.provider = provider;
    }

    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    public int getFractionDigits() {
        return fractionDigits;
    }

    public void setFractionDigits(int fractionDigits) {
        this.fractionDigits = fractionDigits;
    }
    
    @Override
    public String toString() {
        return "CurrencyUnit{" + "id=" + id + ", code=" + code + ", description=" + description + ", provider=" + provider + '}';
    }
    
    public CurrencyUnit toCurrencyUnit() {
        return Monetary.getCurrency(code, provider);
    }
    
    public static CurrencyUnitDO getDefaultCurrency(String code) {
        Currency currency = Currency.getInstance(code);
        if(currency == null)
            return null;
        CurrencyUnitDO currencyUnitDO = new CurrencyUnitDO(
                    currency.getCurrencyCode(),
                    currency.getDisplayName(),
                    currency.getSymbol(),
                    "Currency",
                    currency.getDefaultFractionDigits());
        return currencyUnitDO;
    }
    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/Account.java
package com.almatarm.money.domain;


import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.money.MonetaryAmount;
import javax.money.convert.CurrencyConversion;
import javax.money.convert.ExchangeRateProvider;
import javax.money.convert.MonetaryConversions;
import org.javamoney.moneta.Money;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class Account implements Serializable, PropertyChangeListener {
    public static final String PROP_BALANCE     = "balance";
    
    /**
     * id
     */
    Long id;
    
    /**
     * Account name
     */
    String name;
    
    /**
     * Description
     */
    String description;
   
    /**
     * Type of account
     */
    AccountType type;
    
    /**
     * Notes
     */
    String notes;
    
    /**
     * Current Balance of account
     */
    MonetaryAmount balance;
    
    CurrencyUnitDO currency;
    
    /**
     * Parent Account
     */
    Account parent;
    
    Long parentID;
    
    String qualifiedName;
    
    /**
     * Children Account
     */
    List<Account> children = new ArrayList<>();

    /**
     * Hidden Account
     */
    boolean hidden;

    //TODO: Make this implmenets a list with fires events when items added or 
    //deleted, then modifes add and remove transaction
    List<Transaction> transactions = new ArrayList<>();
 
    transient TransactionManager transactionMgr = new TransactionManager(transactions);
 
    
    transient ExchangeRateProvider rateProvider;
    transient CurrencyConversion conversion;

    static int counter = 0;
    public int count;
    
    public Account() {
        type = AccountType.PLACE_HOLDER;
//        rateProvider = MonetaryConversions.getExchangeRateProvider("Static", "xChange");
//        conversion = rateProvider.getCurrencyConversion("USD");    
        count = counter++;
        balance = Money.of(0, "USD");
//        qualifiedName = getQualifiedName();
    }
  
    public Account(String name, String description, CurrencyUnitDO currency, 
            String notes, AccountType type, BigDecimal balanceAmount) {
        this();
        this.name = name;
        this.description = description;
        this.notes = notes;
        this.type = type;
        this.currency = currency;
        currencyChanged();
        balance = moneyOf(balanceAmount);
//        conversion = rateProvider.getCurrencyConversion(currency.toCurrencyUnit());
//        qualifiedName = getQualifiedName();
    }
    
    public Account(String name, String description, CurrencyUnitDO currency, 
            String notes, AccountType type, MonetaryAmount balance) {
        this(name, description, currency, notes, type, 
                new BigDecimal(balance.getNumber().toString()));
    }
    
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
    
    public AccountType getType() {
        return type;
    }

    public void setType(AccountType type) {
        this.type = type;
    }

    public MonetaryAmount getBalance() {
        return balance;
    }

    public void setBalance(MonetaryAmount newBalance) {
        MonetaryAmount oldBalance = this.balance;
        this.balance = newBalance;
        propertyChangeSupport.firePropertyChange(PROP_BALANCE, 
                oldBalance, newBalance);
    }

    public float getBalanceAmount() {
        return balance.getNumber().floatValue();
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }
    
    public boolean isHidden() {
        return hidden;
    }

    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }
    
    public Account getParent() {
        return parent;
    }

    public void setParent(Account parent) {
        this.parent = parent;
        if(parent != null) {
            parentID = parent.getId();
            parent.addChild(this);
            qualifiedName = getParentQualifiedName(parent, name);
        }
    }

    public List<Account> getChildren() {
        return children;
    }

    public void setChildren(List<Account> children) {
        this.children = children;
    }
    
    public void addChild(Account account) {
        children.add(account);
        account.addPropertyChangeListener(this);
    }
    
    public void removeChild(Account account) {
        children.remove(account);
        account.removePropertyChangeListener(this);
    }

    public String getQualifiedName() {
        System.out.println("getQualifiedName(): " + qualifiedName);
//        if(qualifiedName == null) {
//            qualifiedName = getParentQualifiedName(parent, name);
//        }  
        if(type == AccountType.ROOT)
            return "Root";
        return qualifiedName;
    }
    
    public TransactionManager getTransactionMgr() {
        return transactionMgr;
    }
    
    public TransactionRange getTransactions(final Period period) {
        //PLACE_HOLDER ACCOUNT
        TransactionRange tr;
        if(type == AccountType.PLACE_HOLDER) {
            tr = new TransactionRange(period);
            for(Account child: children){ 
                tr.join(child.getTransactions(period));
            }
            return tr;
        }
        
        //CHILD ACCOUNT
        tr = transactionMgr.getTransactionRanage(period);
        if(tr == null) {
            tr = new TransactionRange(period);
        }
        return tr;
    }
    
    private String getParentQualifiedName(Account account, String qName) {
        if(account == null || account.getType() == AccountType.ROOT) {
            return qName;
        } else {
            qName = getParentQualifiedName(account.getParent(),
                    account.getName() + ":" + qName);
        }
        return qName;
    }

    public Long getParentID() {
        return parentID;
    }

    public void setParentID(Long parentID) {
        this.parentID = parentID;
    }
    
    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }
    
    public void addTransaction(Transaction tran) {
        transactions.add(tran);
        transactionMgr.addTransaction(tran);
        setBalance(balance.add(moneyOf(tran.getAmount())));
    }
    
    public void removeTransaction(Transaction tran) {
        transactions.remove(tran);
        transactionMgr.removeTransaction(tran);
        setBalance(balance.subtract(moneyOf(tran.getAmount())));
    }
    
    private MonetaryAmount moneyOf(BigDecimal n) {
        return Money.of(n, balance.getCurrency());
    }

    public CurrencyUnitDO getCurrency() {
        return currency;
    }
    
    public Long getCurrencyID() {
        return currency == null? 0L : currency.getId();
    }

    public void setQualifiedName(String qualifiedName) {
        this.qualifiedName = qualifiedName;
    }
    
    public void setCurrency(CurrencyUnitDO currency) {
        this.currency = currency;
        currencyChanged();
    }
    
    private void currencyChanged() {
        if(balance != null) {
//            System.out.println(balance);
//            System.out.println(balance.getNumber());
//            System.out.println(currency.toCurrencyUnit());
            balance = Money.of(balance.getNumber(), currency.toCurrencyUnit());
        }
    }

    @Override
    public String toString() {
        return "Account{" + "id=" + id + ", name=" + name + ", description=" + description + ", type=" + type + ", notes=" + notes + ", balance=" + balance + ", currency=" + currency + ", parentID=" + parentID + ", qualifiedName=" + qualifiedName + ", hidden=" + hidden + '}';
    }
    
    
    private transient final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }
 
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getPropertyName().equals(PROP_BALANCE)) {
            MonetaryAmount oldBalance = ((MonetaryAmount) evt.getOldValue());
            MonetaryAmount newBalance = ((MonetaryAmount) evt.getNewValue());
            setBalance(balance.add(newBalance.subtract(oldBalance).with(conversion)));
        }
    }
}
*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/AccountType.java
package com.almatarm.money.domain;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public enum AccountType {
    PLACE_HOLDER("PlHd"),
    BANK("Bank"),
    CASH("Cash"),
    CREDIT("Crdt"),
    ASSET("Asst"),
    LIABILITY("Liab"),
    STOCK("Stok"),
    MUTUAL("Mutl"),
    INCOME("Incm"),
    EQUITY("Eqty"),       
    LOAN("Loan"), 
    ROOT("Root"), 
    EXPENSES("Expn"),
    ;
    
    String discriminator;

    private AccountType(String discriminator) {
        this.discriminator = discriminator;
    }

    public String getDiscriminator() {
        return discriminator;
    } 
    
    public static AccountType toAccountType(String discriminator) {
        for(AccountType at : AccountType.values()) {
            if(at.getDiscriminator().equals(discriminator)) {
                return at;
            }
        }
        return null;
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/TagGroup.java
package com.almatarm.money.domain;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class TagGroup {
    /**
     * TagGroup ID
     */
    Long id;
    
    /**
     * TagGroup Name
     */
    String name;
    
    List<Tag> tags = new ArrayList<>();

    public TagGroup() {
    }

    public TagGroup(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }
    
    public void addTag(Tag tag) {
        tags.add(tag);
        tag.setTagGroup(this);
    }
    
    public boolean removeTag(Tag tag) {
        return tags.remove(tag);
    }

    @Override
    public String toString() {
        return name + ", tags=" + tags;
    }
    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/TransactionRange.java
package com.almatarm.money.domain;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * A list of transactions within a specific date range. This object is not
 * @author almatarm
 */
public class TransactionRange {
    
    public static final String PROP_BALANCE = "balance";

    
    /**
     * Date period range
     */
    Period period;
    
    /**
     * List of transactions in this set
     */
    List<Transaction> transactions = new ArrayList<>();

    BigDecimal cumulativeBalance;
    BigDecimal balance;
    
    public TransactionRange(Period period) {
        this.period       = period;
        balance           = new  BigDecimal("0");
        cumulativeBalance = new  BigDecimal("0");
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }
    
    public void join(TransactionRange other) {
        if(!this.period.equals(other.period)) {
            throw new IllegalArgumentException("Only Transaction Ranages with "
                    + "equal periods can be joined");
        }
        transactions.addAll(other.transactions);
        setBalance(balance.add(other.getBalance()));
    }
    
    public boolean addTransaction(Transaction t) {
        boolean add = transactions.add(t);
        setBalance(balance.add(t.getAmount()));
        return add;
    }
    
    public boolean removeTransaction(Transaction t) {
        boolean remove = transactions.remove(t);
        setBalance(balance.subtract(t.getAmount()));
        return remove;
    }

    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period period) {
        this.period = period;
    }

    public BigDecimal getCumulativeBalance() {
        return cumulativeBalance;
    }

    public void setCumulativeBalance(BigDecimal cumulativeBalance) {
        this.cumulativeBalance = cumulativeBalance;
    }

    public BigDecimal getBalance() {
        return balance;
    }

    public void setBalance(BigDecimal balance) {
        BigDecimal oldBalance = this.balance;
        this.balance = balance;
        propertyChangeSupport.firePropertyChange(PROP_BALANCE, oldBalance, balance);
    }
    
    private transient final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/Payee.java
package com.almatarm.money.domain;

import java.io.Serializable;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class Payee implements Serializable {
    /**
     * id
     */
    Long id;

    /**
     * payee name
     */
    String name;
    
    /**
     * address
     */
    String address;

    public Payee() {
    }

    public Payee(String name) {
        this(name, "");
    }

    public Payee(String name, String address) {
        this.name = name;
        this.address = address;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Override
    public String toString() {
        return address.isEmpty()?name: name + "\n" + address;       
    }
    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/TransactionType.java
package com.almatarm.money.domain;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public enum TransactionType {
    Transaction("TC"),
    Budget("BG"),
    Transfer("TX"),
    ;
    
    String discriminator;

    private TransactionType(String discriminator) {
        this.discriminator = discriminator;
    }

    public String getDiscriminator() {
        return discriminator;
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/AccountFactory.java
package com.almatarm.money.domain;

import java.math.BigDecimal;

/**
 *
 * @author almatarm
 */
public class AccountFactory {
    public static Account create(String name, CurrencyUnitDO currency, AccountType type) {
        Account account;
        switch(type) {
            case CREDIT:
                account = new CreditAccount(name, currency, BigDecimal.ZERO, 1);
                break;
            case LOAN:
                account = new Loan(name, currency);
                break;
            default:
                account = new Account(name, "", currency, "", type, BigDecimal.ZERO);
                account.setType(type);
        }
        return account;
    }
    
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/CreditAccount.java
package com.almatarm.money.domain;

import java.math.BigDecimal;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class CreditAccount extends Account {
    /**
     * Account limit for credit cards
     */
    BigDecimal limit;
    
    /**
     * The day at which statement issued
     */
    int statementDay;   

    public CreditAccount() {
        type = AccountType.CREDIT;
    }

    public CreditAccount(String name, CurrencyUnitDO currency, BigDecimal limit, 
            int statementDay) {
        super(name, "", currency, "",  AccountType.CREDIT, BigDecimal.ZERO);
        this.limit = limit;
        this.statementDay = statementDay;
    }
    
    public CreditAccount(BigDecimal limit, int statementDay, String name, 
            String description, CurrencyUnitDO currency, String notes, BigDecimal balance) {
        super(name, description, currency, notes, AccountType.CREDIT, balance);
        this.limit = limit;
        this.statementDay = statementDay;
    }
    public BigDecimal getLimit() {
        return limit;
    }

    public void setLimit(BigDecimal limit) {
        this.limit = limit;
    }

    public int getStatementDay() {
        return statementDay;
    }

    public void setStatementDay(int statementDay) {
        this.statementDay = statementDay;
    }

    @Override
    public String toString() {
        return "CreditAccount{" + "id=" + id + ", name=" + name + ", description=" + description + ", type=" + type + ", notes=" + notes + ", balance=" + balance + ", currency=" + currency + ", parentID=" + parentID + ", qualifiedName=" + qualifiedName + ", hidden=" + hidden + "limit=" + limit + ", statementDay=" + statementDay + '}';
    }
    
    

}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/Period.java
package com.almatarm.money.domain;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author almatarm
 */
public class Period implements Comparable<Period>{

    public static enum Range {
        Week, 
        Month,
        ;
    }
    
    public static enum Type {
        TRANSACTION_DATE,
        EFFECTIVE_DATE,
        ;
    }
    
    
    /**
     * Number of  week or month.
     */
    int number;
    
    /**
     * The year this period falls in.
     */
    int year;
    
    /**
     * Period range : Month or Week
     */
    Range range;
    
    /**
     * Classifier
     */
    Type type;

    public Period(int number, int year, Range range) {
        this.number = number;
        this.year = year;
        this.range = range;
        this.type = Type.TRANSACTION_DATE;
    }

    public Period(int number, int year, Range range, Type type) {
        this.number = number;
        this.year = year;
        this.range = range;
        this.type = type;
    }

    public int getNumber() {
        return number;
    }

    public void setNumber(int number) {
        this.number = number;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public Range getRange() {
        return range;
    }

    public void setRange(Range range) {
        this.range = range;
    }

    public Type getType() {
        return type;
    }

    public void setType(Type type) {
        this.type = type;
    }

    String getIdentifer() {
        String typeID = range == Range.Month? "M":"W";
        return new StringBuilder(typeID).append(year).append(number< 10?"0":"")
                .append(number).toString();
    }
    
    public Calendar getStartDate() {
        //TODO Make it works for week
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/yyyy");
            Date date = dateFormat.parse(number + "/" + year);
            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(
                    Calendar.DAY_OF_MONTH));
            return cal;
        } catch (ParseException ex) {
            Logger.getLogger(Period.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public Calendar getEndDate() {
        //TODO Make it works for week
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/yyyy");
            Date date = dateFormat.parse(number + "/" + year);
            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(
                    Calendar.DAY_OF_MONTH));
            return cal;
        } catch (ParseException ex) {
            Logger.getLogger(Period.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 89 * hash + this.number;
        hash = 89 * hash + this.year;
        hash = 89 * hash + Objects.hashCode(this.range);
        hash = 89 * hash + Objects.hashCode(this.type);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Period other = (Period) obj;
        if (this.number != other.number) {
            return false;
        }
        if (this.year != other.year) {
            return false;
        }
        if (this.range != other.range) {
            return false;
        }
        if (this.type != other.type) {
            return false;
        }
        return true;
    }

    public Period nextMonth() {
        if(number == 12) {
            return monthOf(1, year + 1);
        }
        return monthOf(number + 1, year);
    }
    
    public Period previousMonth() {
        if(number == 1) {
            return monthOf(12, year - 1);
        }
        return monthOf(number - 1, year);
    }
    
    @Override
    public int compareTo(Period o) {
        return getIdentifer().compareTo(o.getIdentifer());
    }
    
    public static Period monthOf(Calendar cal) {
        return new Period(cal.get(Calendar.MONTH)  + 1, 
                cal.get(Calendar.YEAR), Range.Month);
    }
    
    public static Period monthOf(int number, int year) {
        return new Period(number, year, Range.Month);
    }
    
    public static Period weekOf(int number, int year) {
        return new Period(number, year, Range.Week);
    }
    
    public static void main(String args[]) {
        Period feb = Period.monthOf(2, 2015);
        System.out.println(feb.getStartDate().getTime() + " - " + 
                feb.getEndDate().getTime());
        
        feb = Period.monthOf(2, 2012);
        System.out.println(feb.getStartDate().getTime() + " - " + 
                feb.getEndDate().getTime());
    }
}

*** end *** end ***
***$$$@@@ /money-domain/src/main/java/com/almatarm/money/domain/Transaction.java
package com.almatarm.money.domain;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.money.MonetaryAmount;
import org.javamoney.moneta.Money;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class Transaction {

    /**
     * id
     */
    Long id;

    /**
     * Transaction date
     */
    Calendar date;

    /**
     * Transaction effective date for income budgeting and credit card
     */
    Calendar effectiveDate;
    
    /**
     * amount of transaction, the currency of this amount is the currency of the
     * account hold it.
     */
    BigDecimal amount;

    /**
     * Reconciliation status of transaction
     */
    TransactionStatus status;

    /**
     * Check number
     */
    String number;

    /**
     * Payee
     */
    Payee payee;

    Long payeeID;
    
    /**
     * additional description
     */
    String memo;

    /**
     * Transaction type
     */
    TransactionType type;

    /**
     * Associated account
     */
    Account account;
   
    Long accountID;
    
    /**
     * Transaction Tag
     */
    Tag tag;
    List<Long> tagIDs  = new ArrayList<>();
    
    /**
     * Original transaction amount (used in the transaction has a different 
     * currency.
     */
    MonetaryAmount foreignAmount;
    
    /**
     * Transaction Group
     */
    TransactionGroup transactionGroup;
    Long transactionGroupID;
    
    public Transaction() {
        this.type = TransactionType.Transaction;
    }
    
    public Transaction(Transaction other) {
        this(other.date, other.effectiveDate, other.amount, other.status, 
                other.number, other.payee, other.memo, other.type);
    }

    public Transaction(Calendar date, BigDecimal amount, Payee payee) {
        this();
        this.date = date;
        this.amount = amount;
        this.payee = payee;
    }

    public Transaction(Calendar date, BigDecimal amount, TransactionStatus status,
            String number, Payee payee, String memo) {
        this();
        this.date = date;
        this.amount = amount;
        this.status = status;
        this.number = number;
        this.payee = payee;
        this.memo = memo;
    }

    public Transaction(Calendar date, Calendar effectiveDate, BigDecimal amount, 
            TransactionStatus status, String number, Payee payee, String memo, 
            TransactionType type) {
        this.date = date;
        this.effectiveDate = effectiveDate;
        this.amount = amount;
        this.status = status;
        this.number = number;
        this.payee = payee;
        this.memo = memo;
        this.type = type;
    }

    public Transaction(Calendar date, Calendar effectiveDate, BigDecimal amount, 
            TransactionStatus status, String number, Payee payee, String memo, 
            TransactionType type, Account account) {
        this.date = date;
        this.effectiveDate = effectiveDate;
        this.amount = amount;
        this.status = status;
        this.number = number;
        this.payee = payee;
        this.memo = memo;
        this.type = type;
        this.account = account;
    }
    
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Calendar getDate() {
        return date;
    }

    public void setDate(Calendar date) {
        this.date = date;
        if(effectiveDate == null) {
            effectiveDate = Calendar.getInstance();
            effectiveDate.setTime(date.getTime());
        }
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public TransactionStatus getStatus() {
        return status;
    }

    public void setStatus(TransactionStatus status) {
        this.status = status;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Payee getPayee() {
        return payee;
    }

    public void setPayee(Payee payee) {
        this.payee = payee;
    }

    public String getMemo() {
        return memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    public TransactionType getType() {
        return type;
    }

    public void setType(TransactionType type) {
        this.type = type;
    }

    public Calendar getEffectiveDate() {
        return effectiveDate;
    }

    public void setEffectiveDate(Calendar effectiveDate) {
        this.effectiveDate = effectiveDate;
    }

    public Account getAccount() {
        return account;
    }

    public void setAccount(Account account) {
        this.account = account;
    }

    public TransactionGroup getTransactionGroup() {
        return transactionGroup;
    }

    public void setTransactionGroup(TransactionGroup transactionGroup) {
        this.transactionGroup = transactionGroup;
    }

    public Tag getTag() {
        return tag;
    }

    public void setTag(Tag tag) {
        this.tag = tag;
    }

    public String getForeignAmount() {
        return foreignAmount.toString();
    }

    public void setForeignAmount(String foreignAmountStr) {
        String[] split = foreignAmountStr.split(" ");
        this.foreignAmount = Money.of(new BigDecimal(split[1]), split[0]);
    }

    public Long getPayeeID() {
        return payeeID;
    }

    public void setPayeeID(Long payeeID) {
        this.payeeID = payeeID;
    }

    public Long getAccountID() {
        return accountID;
    }

    public void setAccountID(Long accountID) {
        this.accountID = accountID;
    }

    public List<Long> getTagIDs() {
        return tagIDs;
    }

    public void setTagIDs(List<Long> tagIDs) {
        this.tagIDs = tagIDs;
    }

    public Long getTransactionGroupID() {
        return transactionGroupID;
    }

    public void setTransactionGroupID(Long transactionGroupID) {
        this.transactionGroupID = transactionGroupID;
    }
    
    @Override
    public String toString() {
        return    "id            " + id + "\n"
                + "account       " + (account == null? "" : account.getQualifiedName())+ "\n"
                + "date          " + date.getTime() + "\n"
                + "eff date      " + effectiveDate.getTime() + "\n"
                + "amount        " + amount + "\n"
                + "foreignAmount " + foreignAmount + "\n"
                + "Satus         " + status + "\n"
                + "number        " + number + "\n"
                + "payee         " + (payee == null? "" : payee.getName()) + "\n"
                + "memo          " + memo + "\n";
    }
}

*** end *** end ***
***$$$@@@ /money-qif/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>money-qif</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    
    <dependencies>
        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>SmallUtil</artifactId>
            <version>[1.0.1, )</version>
            <type>jar</type>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    <name>money-qif</name>
</project>
*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFSymbol.java
package com.almatarm.money.qif;

/**
 *
 * @author almatarm
 */
public enum QIFSymbol {
    /** Date *//** Date *//** Date *//** Date */
    Date("D"),
    /** Amount */
    Amount("T"),
    /** Payee */
    Payee("P"),
    /** Cleared status */
    Cleared("C"),
    /** Num (check or reference number) */
    Check_Number("N"),
    /** Address (up to five lines; the sixth line is an optional message)  */
    Address("A"),
    /** Memo */
    Memo("M"),
    /** Category (Category/Subcategory/Transfer/Class) */
    Category("L"),
    /** Category in split (Category/Transfer/Class) */
    Split_Category("S"),
    /** Memo in split */
    Split_Memo("E"),
    /** Dollar amount of split */
    Split_Amount("$"),
    /** End of the entry */
    Entry_End("^");

    private QIFSymbol(String symbol) {
        this.symbol = symbol;
    }

    String symbol;

    public String getSymbol() {
        return symbol;
    }
    
    public static QIFSymbol toSymbol(String symbol) {
        QIFSymbol[] values = values();
        for (QIFSymbol value : values) {
            if (value.getSymbol().equals(symbol)) {
                return value;
            }
        }
        return null;
    }
}

*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFUtil.java
package com.almatarm.money.qif;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.smallutil.io.FileRW;

/**
 *
 * @author almatarm
 */
public class QIFUtil {
    public static void write(File out, QIFFile qif) throws IOException {
        StringBuilder buff = new StringBuilder();
        buff.append("!Type:").append(qif.getHeader().getHeader()).append("\n");
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        for(QIFTransaction t : qif.getTrans()) {
            buff.append(QIFSymbol.Date.getSymbol())
                    .append(t.getDate() == null? "" : sdf.format(t.getDate().getTime())).append("\n");
            buff.append(QIFSymbol.Amount.getSymbol())
                    .append(t.getAmount() == null ? "" : t.getAmount()).append("\n");
            buff.append(QIFSymbol.Cleared.getSymbol())
                    .append(t.isCleared()?"c":"").append("\n");
            if(t.getCheckNumber() != null && !t.getCheckNumber().isEmpty())
                buff.append(QIFSymbol.Check_Number.getSymbol())
                    .append(t.getCheckNumber()).append("\n");
            if(t.getPayee() != null && !t.getPayee().isEmpty())
                buff.append(QIFSymbol.Payee.getSymbol())
                    .append(t.getPayee()).append("\n");
            if(t.getCategory() != null && !t.getCategory().isEmpty())
                buff.append(QIFSymbol.Category.getSymbol())
                    .append(t.getCategory()).append("\n");
            if(t.getAddress() != null && !t.getAddress().isEmpty()) {
                String[] addLines = t.getAddress().split("\n");
                for(String aLine : addLines) {
                    buff.append(QIFSymbol.Address.getSymbol()).append(aLine).append("\n");
                }
            }
            if(t.isSplit()) {
                List<QIFTransaction.Split> splits = t.getSplits();
                splits.forEach( (split) -> {
                    buff.append(QIFSymbol.Split_Category.getSymbol())
                        .append(split.getCategory()== null ? "" : split.getCategory()).append("\n");
                    if(split.getMemo() != null && !split.getMemo().isEmpty())
                        buff.append(QIFSymbol.Split_Memo.getSymbol())
                            .append(split.getMemo()).append("\n");
                    buff.append(QIFSymbol.Split_Amount.getSymbol())
                        .append(split.getAmount()== null ? "" : split.getAmount()).append("\n");
                });
            }
            buff.append(QIFSymbol.Entry_End.getSymbol()).append("\n");
        }
        System.out.println(buff.toString());
        FileRW.save(out.getPath(), buff.toString(), "UTF-8");
    }
    
    public static void main(String[] args) throws IOException {
        QIFFile qFile = new QIFFile(QIFHeader.Bank);
        
        QIFTransaction t1 = new QIFTransaction();
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar date = Calendar.getInstance();
        try {
            date.setTime(sdf.parse("06/01/2006"));
        } catch (ParseException ex) {
            Logger.getLogger(QIFTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
     
        t1.setDate(date);
        t1.setAmount(new BigDecimal("-1000"));
        t1.setCheckNumber("1005");
        t1.setPayee("Bank Of Mortgage");
        t1.setCategory("Split Transaction");
        
        QIFTransaction.Split s11 = new QIFTransaction.Split();
        s11.setCategory("Savings Goals: Split 1");
        s11.setAmount(new BigDecimal("-253.64"));
        t1.getSplits().add(s11);
        
        QIFTransaction.Split s12 = new QIFTransaction.Split();
        s12.setCategory("Savings Goals: Split 2");
        s12.setAmount(new BigDecimal("-746.36"));
        t1.getSplits().add(s12);
        
        qFile.getTrans().add(t1);
        
        QIFTransaction t2 = new QIFTransaction();
        try {
            date.setTime(sdf.parse("06/02/2006"));
        } catch (ParseException ex) {
            Logger.getLogger(QIFTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
        t2.setDate(date);
        t2.setAmount(new BigDecimal("-10"));
        t2.setPayee("JoBob Biggs");
        t2.setMemo("J.B. gets bucks");
        t2.setCategory("Entertain");
        t2.setAddress("1010 Rodeo Dr.\nWaco, Tx\n80505");
        
        qFile.getTrans().add(t2);
        
        write(new File("/tmp/test.qif"), qFile);
    }
}

*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFHeader.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.money.qif;

/**
 *
 * @author almatarm
 */
public enum QIFHeader {

    /** Bank account transactions */
    Bank,
    /** Cash account transactions */
    Cash,
    /** Credit card account transactions */
    CCard,
    /** Investment account transactions */
    Invst,
    /** Asset account transactions */
    Oth_A("Oth_A"),
    /** Liability account transactions */
    Oth_L("Oth_L"), 	
    /** Category list */
    Cat,
    /** Class list */
    Class,
    /** Memorized transaction list */
    Memorized;
    
    String header;

    private QIFHeader() {
        this.header = name();
    }

    private QIFHeader(String header) {
        this.header = header;
    }

    public String getHeader() {
        return header;
    }
}

*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFWriter.java
package com.almatarm.money.qif;

import java.io.IOException;
import java.text.SimpleDateFormat;
import org.smallutil.io.FileRW;

public class QIFWriter {

    public static void write(QIFFile qifFile, String path) throws IOException {
        StringBuilder buff = new StringBuilder();
        SimpleDateFormat sdf = new SimpleDateFormat(qifFile.getDateFormat());
        buff.append("!Type:").append(qifFile.getHeader().getHeader()).append("\n");
        for(QIFTransaction t : qifFile.getTrans()) {
            buff.append(QIFSymbol.Date.getSymbol()).append(sdf.format(t.getDate().getTime())).append("\n");
            buff.append(QIFSymbol.Amount.getSymbol()).append(t.getAmount().toString()).append("\n");
            buff.append(QIFSymbol.Payee.getSymbol()).append(t.getPayee()).append("\n");
            buff.append(QIFSymbol.Memo.getSymbol()).append(t.getMemo()).append("\n");
            buff.append(QIFSymbol.Category.getSymbol()).append(t.getCategory()).append("\n");
            for(QIFTransaction.Split split : t.getSplits()) {
                buff.append(QIFSymbol.Split_Category.getSymbol()).append(split.getCategory()).append("\n");
                buff.append(QIFSymbol.Split_Memo.getSymbol()).append(split.getMemo()).append("\n");
                buff.append(QIFSymbol.Split_Amount.getSymbol()).append(split.getAmount()).append("\n");
            }
            buff.append("^\n");
        }
        System.out.println(buff.toString());
        FileRW.save(path, buff.toString(), "UTF-8");
    }

}

*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFFile.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.money.qif;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class QIFFile {

    QIFHeader header;
    List<QIFTransaction> trans;
    String dateFormat = "dd/MM/yyyy";
    
    public QIFFile(QIFHeader header) {
        this.header = header;
        this.trans = new ArrayList<>();
    }

    public QIFFile(QIFHeader header, List<QIFTransaction> trans) {
        this.header = header;
        this.trans = trans;
    }

    public QIFHeader getHeader() {
        return header;
    }

    public void setHeader(QIFHeader header) {
        this.header = header;
    }

    public List<QIFTransaction> getTrans() {
        return trans;
    }

    public void setTrans(List<QIFTransaction> trans) {
        this.trans = trans;
    }   

    public String getDateFormat() {
        return dateFormat;
    }

    public void setDateFormat(String dateFormat) {
        this.dateFormat = dateFormat;
    }
    
}

*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFTransaction.java
package com.almatarm.money.qif;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class QIFTransaction {
   
    Currency currency;
    List<QIFSymbol> types  = new ArrayList<>();
    List<String>    values = new ArrayList<>();
    String dateFromat = "";
    
    public QIFTransaction() {
        this.currency = Currency.getInstance("USD");
    }
    
    public QIFTransaction(List<QIFSymbol> types, List<String> values) {
        this(types, values, Currency.getInstance("USD"));
    }
    
    public QIFTransaction(List<QIFSymbol> types, List<String> values, Currency currency) {
        this.types    = types;
        this.values   = values;
        this.currency = currency;
        
        for(int i = 0; i < types.size(); i++) {
            QIFSymbol type = types.get(i);
            switch (type) {
                case Date:
                    SimpleDateFormat sdf = new SimpleDateFormat(dateFromat);
                    try {
                        date.setTime(sdf.parse(values.get(i)));
                    } catch (ParseException ex) {
                        Logger.getLogger(QIFTransaction.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                case Amount:
                    amount = new BigDecimal(values.get(i).replaceAll("[,$]", ""));
                    break;
                case Payee:
                    payee = values.get(i);
                    break;
                case Cleared:
                    cleared = values.get(i).equalsIgnoreCase("c");
                    break;
                case Check_Number:
                    checkNumber = values.get(i);
                    break;
                case Address:
                    if(address.isEmpty() && !values.get(i).isEmpty()) {
                        address += values.get(i);
                    } else if(!address.isEmpty() && !values.get(i).isEmpty()) {
                        address += "\n" + values.get(i);
                    }
                    break;
                case Memo:
                    memo = values.get(i);
                    break;
                case Category:
                    category = values.get(i);
                    break;
                case Split_Category:
                    curSplit = new Split();
                    curSplit.category = values.get(i);
                    splits.add(curSplit);
                    break;
                case Split_Memo:
                    curSplit.memo = values.get(i);
                    break;
                case Split_Amount:
                    curSplit.amount = new BigDecimal(values.get(i).replaceAll("[,$]", ""));
                    break;    
            }
        }
    }
    
    Calendar date      ;
    BigDecimal amount  ;
    String checkNumber ;
    String payee       ;
    String address     ;
    String memo        ;
    String category    ;
    boolean cleared    ;

    List<Split> splits = new ArrayList<>();
    Split curSplit = null;
    
    public List<QIFSymbol> getTypes() {
        return types;
    }

    public Calendar getDate() {
        return date;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public String getCheckNumber() {
        return checkNumber;
    }

    public String getDescription() {
        return payee;
    }

    public String getAddress() {
        return address;
    }

    public String getMemo() {
        return memo;
    }

    public String getCategory() {
        return category;
    }

    public boolean isCleared() {
        return cleared;
    }

    public String getPayee() {
        return payee;
    }

    public String getDateFromat() {
        return dateFromat;
    }

    public void setDateFromat(String dateFromat) {
        this.dateFromat = dateFromat;
    }

    public void setDate(Calendar date) {
        this.date = date;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public void setCheckNumber(String checkNumber) {
        this.checkNumber = checkNumber;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public void setCleared(boolean cleared) {
        this.cleared = cleared;
    }

    public void setSplits(List<Split> splits) {
        this.splits = splits;
    }

    public void setPayee(String payee) {
        this.payee = payee;
    }
    
    public boolean isSplit() {
        return !splits.isEmpty();
    }

    public List<Split> getSplits() {
        return splits;
    }
    
    public static class Split {
        String category   = "";
        String memo       = "";
        BigDecimal amount = BigDecimal.ZERO;

        public Split() {
        }

        public String getCategory() {
            return category;
        }

        public String getMemo() {
            return memo;
        }

        public BigDecimal getAmount() {
            return amount;
        }

        public void setCategory(String category) {
            this.category = category;
        }

        public void setMemo(String memo) {
            this.memo = memo;
        }

        public void setAmount(BigDecimal amount) {
            this.amount = amount;
        }

        @Override
        public String toString() {
            return "Split{"  
                + "\n\tcategory=" + category 
                + "\n\tmemo=" + memo 
                + "\n\tamount=" + amount + '}';
        }
        
        
    };

    public Currency getCurrency() {
        return currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @Override
    public String toString() {
        return "QIFTransaction{" 
                + "\ndate=" + date
                + "\namount=" + amount 
                + "\ncheckNumber=" + checkNumber 
                + "\ndescription=" + payee 
                + "\naddress=" + address 
                + "\nmemo=" + memo 
                + "\ncategory=" + category 
                + "\ncleared=" + cleared 
                + "\nsplits=" + splits + '}';
    }
    
}

*** end *** end ***
***$$$@@@ /money-qif/src/main/java/com/almatarm/money/qif/QIFReader.java
package com.almatarm.money.qif;

import java.util.*;
import java.io.*;

public class QIFReader {

    BufferedReader qifin;
    String path;
    String AccountType;
    String dateFormat = "dd/MM/yyyy";
    
    public QIFReader(String path) {
        this.path = path;
    }
    
    public QIFReader(String path, String dateFormat) {
        this.path = path;
        this.dateFormat = dateFormat;
    }
    
    public void open() throws IOException {
        qifin = new BufferedReader(new InputStreamReader(
                new FileInputStream(path), "UTF-8"));
        AccountType = qifin.readLine();
    }

    public QIFTransaction next() throws IOException {
        return readRecord();
    }

    public boolean hasNext() throws IOException {
        return qifin.ready();
    }

    private QIFTransaction readRecord() throws IOException {
        String attr;
        List<QIFSymbol> types = new ArrayList<>();
        List<String> values = new ArrayList<>();
        
        while (qifin.ready()) {
            attr = qifin.readLine();
            QIFSymbol type = QIFSymbol.toSymbol(attr.substring(0, 1));
            if (attr.substring(0, 1).startsWith(TRANSACTION_BREAK)) {
                break;
            }
            String value = attr.substring(1, attr.length());
            
            types.add(type);
            values.add(value);
        }
        QIFTransaction trans = new QIFTransaction(types, values);
        return trans;
    }
    private static final String TRANSACTION_BREAK = "^";

    public static void main(String args[]) throws IOException {
        QIFReader in = new QIFReader("D:\\Dropbox\\VISA.qif");
        in.open();
        while (in.hasNext()) {
            QIFTransaction trans = in.next();
            System.out.println(trans);
        }
    }

}

*** end *** end ***
***$$$@@@ /money-import/target/classes/com/almatarm/money/importing/amazon/InvoiceParser.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,1,44,0,0,1,-112"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="args">
          <Properties>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Container class="javax.swing.JPanel" name="jPanel1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Last"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.DesignFlowLayout"/>
      <SubComponents>
        <Component class="javax.swing.JComboBox" name="jSource">
          <Properties>
            <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
              <StringArray count="2">
                <StringItem index="0" value="Amazon Invoice"/>
                <StringItem index="1" value="SABB Credit Card"/>
              </StringArray>
            </Property>
          </Properties>
          <AuxValues>
            <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
          </AuxValues>
        </Component>
        <Component class="javax.swing.JButton" name="jParser">
          <Properties>
            <Property name="text" type="java.lang.String" value="Parse"/>
          </Properties>
          <Events>
            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jParserActionPerformed"/>
          </Events>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>

*** end *** end ***
***$$$@@@ /money-import/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>money-import</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    

    
    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-firefox-driver</artifactId>
            <version>3.0.1</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-htmlunit-driver</artifactId>
            <version>2.52.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>SmallUtil</artifactId>
            <version>1.0.1</version>
        </dependency>
<!--        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>xChange</artifactId>
            <version>${project.version}</version>
        </dependency>-->
        <dependency>
            <groupId>com.almatarm</groupId>
            <artifactId>money-qif</artifactId>
            <version>1.0</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>money-domain</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    <name>money-import</name>
</project>
*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/ShadowTree.java
package com.almatarm.money.importing;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.AccountType;
import com.almatarm.money.domain.CurrencyUnitDO;
import java.math.BigDecimal;
import java.util.HashMap;



/**
 *
 * @author almatarm
 */
public class ShadowTree {
    ShadowAccount root;
    HashMap<String, ShadowAccount> qualifiedNamesMap;
    CurrencyUnitDO defaultCurrency;
    
    public ShadowTree(Account rootAccount) {
        this(rootAccount, "USD");
    }
    
    public ShadowTree(Account rootAccount, String currencyCode) {
        this.defaultCurrency = CurrencyUnitDO.getDefaultCurrency(currencyCode);
        qualifiedNamesMap = new HashMap<>();
        root = new ShadowAccount(rootAccount);
        addToQNamesMap(root);
        addChildrenShadowAccount(root);        
    }
//    
//    public ShadowTree() {
//        qualifiedNamesMap = new HashMap<>();
//        AccountService accountService = Services.getInstance().getAccountService();
//        root = new ShadowAccount(accountService.findByQualifiedName("Root"));
//        addToQNamesMap(root);
//        addChildrenShadowAccount(root);        
//    }
    private void addChildrenShadowAccount(ShadowAccount account) {
        if(account.getAccount().getChildren().isEmpty()) {
            return;
        }
        for(Account childAccount : account.getAccount().getChildren()) {
            ShadowAccount childShadowAccount = new ShadowAccount(childAccount);
            childShadowAccount.setParent(account);
            addToQNamesMap(childShadowAccount);
            addChildrenShadowAccount(childShadowAccount);
        }
    }
    
    private void addToQNamesMap(ShadowAccount account) {
        qualifiedNamesMap.put(account.getQualifiedName(), account);
    }

    public ShadowAccount getRoot() {
        return root;
    }

    public HashMap<String, ShadowAccount> getQualifiedNamesMap() {
        return qualifiedNamesMap;
    }
    
    public ShadowAccount getByQualifiedName(String qName) {
        return qualifiedNamesMap.get(qName);
    }
    
    public ShadowAccount getOrCreateAccount(String qName) {
        //Does the account exist?
        if(getByQualifiedName(qName) != null) {
            //Account exist, done!
            return getByQualifiedName(qName);
        }
        
        //Account does not exist, create non existing account[s]
        ShadowAccount newAccount = null;
        
        String[] accountNames = qName.split(":");
        String currentAccountQName = "";
        Account currentAccountParent = null;
        //Loop over account tree and create non existing account.
        for(int i = 0; i < accountNames.length; i++) {
            String  accountName    = accountNames[i];
            boolean firstAccuont   = i == 0;
            boolean lastAccount    = i == accountNames.length - 1;
            
            currentAccountQName   += (currentAccountQName.isEmpty()?"":":") 
                    + accountName;
            ShadowAccount currentAccount = getByQualifiedName(currentAccountQName);
            
            if(currentAccount == null) {
                //Current sub account does not exist
                //Get currency & account type
                
                CurrencyUnitDO currency = currentAccountParent == null?defaultCurrency:
                        currentAccountParent.getCurrency();
                AccountType type = AccountType.PLACE_HOLDER;
                if(lastAccount) {
                    if(qName.startsWith("Expenses:")) {
                        type = AccountType.EXPENSES;
                    } else if(qName.startsWith("Assets:")) {
                        type = AccountType.ASSET;
                    }
                }
                
                //add account
                currentAccount = new ShadowAccount(new Account(accountName, "", 
                        currency, "", type, BigDecimal.ZERO));
                currentAccount.setParent(currentAccountParent);
                addToQNamesMap(currentAccount);
            }
            
            currentAccountParent = currentAccount;
            newAccount = currentAccount;
        }
        return newAccount;
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/amazon/AmazonInvoiceToQIF.java
package com.almatarm.money.importing.amazon;

import static com.almatarm.money.importing.amazon.AmazonInvoiceToQIF.State.*;
import com.almatarm.money.qif.QIFTransaction;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class AmazonInvoiceToQIF {
    public static enum State {
        none,
        new_transaction,
        new_item,
        shipment_and_tax,
        end_transction,
        payment,
        ;
    }
    
    public static String PAYEE = "Amazon.com";
    public static List<QIFTransaction> parse(String contents, 
            List<BigDecimal> payments) throws ParseException {
        List<QIFTransaction> trans = new ArrayList<>();
        
        String[] lines = contents.split("[\n\r]");
        
        QIFTransaction curTran = null;
        String orderNumber = "";
        List<String> descs   = new ArrayList<>();
        List<String> prices  = new ArrayList<>();
        List<BigDecimal> quantity = new ArrayList<>();   
        State state = none;
        int paymentIdx = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("MMMMM dd, yyyy");
        for(String line : lines) {
            switch(state) {
                case none:
                    if(line.trim().startsWith("Amazon.com order number")) {
                        orderNumber = line.substring("Amazon.com order number:".length()).trim();
                        
                        state = new_transaction;
                    }
                    break;
                    
                case new_transaction:
                    if (line.trim().equals("Payment information")) {
                        state = payment;
                        break;
                    }
                    
                    if (line.trim().equals("Items Ordered Price")) {
                        curTran = new QIFTransaction();
                        curTran.setPayee(PAYEE);
                        curTran.setMemo("Order#" + orderNumber);
                        
                        descs.clear();
                        prices.clear();
                        
                        state = new_item;
                    }
                    break;
                    
                case new_item:
                    if(line.trim().equals("Shipping Address:")) {
                        state = shipment_and_tax;
                        break;
                    }
                    
                    if(line.contains(" of: ")) {
                        String qStr = line.substring(0, line.indexOf(" ")).trim();
                        quantity.add(new BigDecimal(qStr));
                        descs.add( (!qStr.equals("1")? qStr + "x ": "") +  line.substring(line.indexOf(":") + 1).trim());
                        
                        System.out.println(quantity.size() -1 + ":" + quantity.get(quantity.size() -1));
                        System.out.println(descs.size() -1 + ":" + descs.get(descs.size() -1));
                    } else if(line.contains("$")) {
                        prices.add(line.substring(line.indexOf("$") + 1).trim());
                    }
                    break;
                    
                case shipment_and_tax:
                    if(line.startsWith("Shipping & Handling:")) {
                        String sh = line.substring(line.indexOf("$") + 1).trim();
                        if(!sh.equals("0.00")) {
                            descs.add("Shipping & Handling");
                            prices.add(sh);
                            quantity.add(BigDecimal.ONE);
                        } 
                    }
                    if(line.startsWith("Sales Tax")) {
                        String tax = line.substring(line.indexOf("$") + 1).trim();
                        if(!tax.equals("0.00")) {
                            descs.add("Sales Tax");
                            prices.add(tax);
                            quantity.add(BigDecimal.ONE);
                        }
                        state = end_transction;
                    }
                    break;
                    
                case end_transction:
                    boolean split = descs.size() > 1;
                    if(!split) {
                        curTran.setMemo(descs.get(0) + "($" + prices.get(0) + ")");
                        curTran.setAmount(new BigDecimal(prices.get(0)).multiply(quantity.get(0)));
                        curTran.setCategory("Lend/Borrow (B):Other Loans");
                    } else {
                        curTran.setCategory("Split Transaction");
                        for(int i = 0; i < descs.size(); i++) {
                            QIFTransaction.Split subTran = new QIFTransaction.Split();
                            subTran.setMemo(descs.get(i) + " ($" + prices.get(i) + ")");
                            subTran.setAmount(new BigDecimal(prices.get(i)).multiply(quantity.get(i)));
                            subTran.setCategory("Lend/Borrow (B):Other Loans");
                            curTran.getSplits().add(subTran);
                        }
                    }
                    trans.add(curTran);
                    state = new_transaction;
                    break;
                    
                case payment:
                    if(line.contains(" ending in ")) {
                        trans.get(paymentIdx).setAmount(new BigDecimal(
                                line.substring(line.indexOf("$") + 1).trim()));
                        int i1 = line.indexOf(":");
                        int i2 = line.lastIndexOf(":");
                        String dateString = line.substring(i1 + 1, i2).trim();
                        Calendar date = Calendar.getInstance();
                        date.setTime(sdf.parse(dateString));
                        trans.get(paymentIdx).setDate(date);
                        paymentIdx++;
                    }
            }
        }
        
        
        //Currency Conversion
        for(int i = 0; i < trans.size(); i++) {
            QIFTransaction t = trans.get(i);
            
            if(t.isSplit()) {
                t.setMemo(t.getMemo() + " ($" + t.getAmount() + ") = SAR" + payments.get(i));
            }
            
            BigDecimal rate = payments.get(i).divide(t.getAmount(),6, RoundingMode.HALF_UP);
            
            t.setAmount(t.getAmount()
                    .multiply(rate, MathContext.DECIMAL128)
                    .setScale(2, RoundingMode.HALF_UP).negate());
            
            
            for(QIFTransaction.Split split : t.getSplits()) {
                split.setAmount(split.getAmount().multiply(rate)
                        .setScale(2, RoundingMode.HALF_UP).negate());
            }
        }
        return trans;
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/amazon/InvoiceParser.java
package com.almatarm.money.importing.amazon;

import com.almatarm.money.qif.QIFFile;
import com.almatarm.money.qif.QIFHeader;
import com.almatarm.money.qif.QIFTransaction;
import com.almatarm.money.qif.QIFWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

/**
 *
 * @author almatarm
 */
public class InvoiceParser extends javax.swing.JFrame {
    
    WebDriver driver;
    boolean browserOpened = false;
    
    /**
     * Creates new form InvoiceParser
     */
    public InvoiceParser() {
        initComponents();
        if(!browserOpened) {
            System.setProperty("webdriver.gecko.driver", "/pkgs/geckodriver/0.11.1/geckodriver");
            driver = new FirefoxDriver();
            browserOpened = true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        args = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jSource = new javax.swing.JComboBox<>();
        jParser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        args.setColumns(20);
        args.setRows(5);
        jScrollPane1.setViewportView(args);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Amazon Invoice", "SABB Credit Card" }));
        jPanel1.add(jSource);

        jParser.setText("Parse");
        jParser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jParserActionPerformed(evt);
            }
        });
        jPanel1.add(jParser);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static int counter = 0;
    private void jParserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jParserActionPerformed
        try {
            if (jSource.getSelectedItem().toString().equals("Amazon Invoice")) {
                String contents = driver.findElement(By.tagName("body")).getText();
                List<BigDecimal> payments = new ArrayList<>();
                String[] lines = args.getText().split("[\r\n]");
                for (String line : lines) {
                    payments.add(new BigDecimal(line.trim()));
                }
                List<QIFTransaction> trans = AmazonInvoiceToQIF.parse(contents, payments);
                QIFWriter.write(new QIFFile(QIFHeader.Bank, trans), "/tmp/Amazon Invoice" + counter++ + ".qif");
                
            } else if (jSource.getSelectedItem().toString().equals("SABB Credit Card")) {
                
//                List<QIFTransaction> trans = AmazonInvoiceToQIF.parse(contents, payments);
//                QIFWriter.write(new QIFFile(QIFHeader.Bank, trans), "/tmp/SABB Credit" + counter++ + ".qif");
            }
        } catch (ParseException | IOException ex) {
            Logger.getLogger(InvoiceParser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jParserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceParser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea args;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jParser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jSource;
    // End of variables declaration//GEN-END:variables
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/amazon/InvoiceParser.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,1,44,0,0,1,-112"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="args">
          <Properties>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Container class="javax.swing.JPanel" name="jPanel1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Last"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.DesignFlowLayout"/>
      <SubComponents>
        <Component class="javax.swing.JComboBox" name="jSource">
          <Properties>
            <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
              <StringArray count="2">
                <StringItem index="0" value="Amazon Invoice"/>
                <StringItem index="1" value="SABB Credit Card"/>
              </StringArray>
            </Property>
          </Properties>
          <AuxValues>
            <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
          </AuxValues>
        </Component>
        <Component class="javax.swing.JButton" name="jParser">
          <Properties>
            <Property name="text" type="java.lang.String" value="Parse"/>
          </Properties>
          <Events>
            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="jParserActionPerformed"/>
          </Events>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/Shadow.java
package com.almatarm.money.importing;

import com.almatarm.money.domain.Account;
import java.util.HashMap;

/**
 *
 * @author almatarm
 */
public class Shadow {
//
//    public static ShadowAccount createRootShadowAccount() {
//        AccountService accountService = Services.getInstance().getAccountService();
//        ShadowAccount root = new ShadowAccount(
//                accountService.findByQualifiedName("Root"));
//        addChildrenShadowAccount(root);
//        return root;
//    }

    public static ShadowAccount createRootShadowAccount(Account rootAccount) {
        ShadowAccount root = new ShadowAccount(rootAccount);
        addChildrenShadowAccount(root);
        return root;
    }
    
    private static void addChildrenShadowAccount(ShadowAccount root) {
        if(root.getAccount().getChildren().isEmpty()) {
            return;
        }
        for(Account childAccount : root.getAccount().getChildren()) {
            ShadowAccount childShadowAccount = new ShadowAccount(childAccount);
            childShadowAccount.setParent(root);
            addChildrenShadowAccount(childShadowAccount);
        }
    }
    
    public static HashMap<String, Account> getQualifiedNamesMap(Account root) {
        HashMap<String, Account> qualifiedNamesMap = new HashMap<>();
        addToQNamesMap(root, qualifiedNamesMap);
        return qualifiedNamesMap;
    }
    
    private static void addToQNamesMap(Account account, 
            HashMap<String, Account> qualifiedNamesMap) {
        qualifiedNamesMap.put(account.getQualifiedName(), account);
        if(account.getChildren().isEmpty()) {
            return;
        }
        account.getChildren().stream().forEach((childAccount) -> {
            addToQNamesMap(childAccount, qualifiedNamesMap);
        });
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/ShadowTransaction.java
package com.almatarm.money.importing;

import com.almatarm.money.domain.Transaction;


/**
 *
 * @author almatarm
 */
public class ShadowTransaction extends Transaction {
    Transaction transaction;
    boolean selected;

    public ShadowTransaction(Transaction t) {
        super(t.getDate(), t.getEffectiveDate(), t.getAmount(), t.getStatus(),
                t.getNumber(), t.getPayee(), t.getMemo(), t.getType(), 
                t.getAccount());
        this.transaction = t;
    }

    public Transaction getTransaction() {
        return transaction;
    }

    public boolean isSelected() {
        return selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/sabb/SABBCreditImport.java
package com.almatarm.money.importing.sabb;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionGroup;
import com.almatarm.money.domain.TransactionStatus;
import com.almatarm.money.domain.TransactionType;
import com.almatarm.money.importing.Import;
import com.almatarm.money.importing.ShadowTree;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.MonetaryAmount;
import org.javamoney.moneta.Money;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

/**
 *
 * @author almatarm
 */
public class SABBCreditImport implements Import {
    
    String link;
    ShadowTree shadowTree;

    public SABBCreditImport(Account root, String link) {
        shadowTree = new ShadowTree(root, "SAR");
    }
    
    @Override
    public ShadowTree getShadowTree() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public List<Transaction> importTransactionList(Account srcAccount) {
        List<Transaction> transactions = new ArrayList<>();
        
        WebDriver driver;
        driver = new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(7, TimeUnit.SECONDS);
        
        driver.navigate().to(link);
        
        List<WebElement> tablesElements = driver.findElements(By.className("hsbcTableStyle07"));
        if(tablesElements.isEmpty()) {
            System.err.println("Could not find <table> tag with class='hsbcTableStyle07'");
            return transactions;
        }
        WebElement table = tablesElements.get(0);
        List<WebElement> rows = table.findElements(By.tagName("tr"));
        
        SimpleDateFormat sdf = new SimpleDateFormat("MMMMM dd, yyyy");
        
        Calendar        date           = Calendar.getInstance();
        Calendar        effectiveDate  = Calendar.getInstance();
        BigDecimal      amount;
        MonetaryAmount  foreignAmount;
        Payee           payee = null;
        String          memo;
        
        for(WebElement row : rows) {
            try {
                List<WebElement> headers = row.findElements(By.tagName("td"));
                if(headers.size() != 7)
                    continue;
                
                //Create
                date.setTime(          sdf.parse( headers.get(0).getText() ));
                effectiveDate.setTime( sdf.parse( headers.get(1).getText() ));
                memo          = headers.get(2).getText();
                foreignAmount = parseforeignAmount(headers.get(3).getText(),
                        headers.get(4).getText(), headers.get(6).getText());
                amount        = SABBAmountToBigDecimal(headers.get(5).getText(),
                        headers.get(6).getText());
                
                Transaction fromTran = new Transaction(date, effectiveDate, amount,
                        TransactionStatus.NOT_CLEARED, "", payee, memo,
                        TransactionType.Budget, srcAccount);
                fromTran.setForeignAmount(foreignAmount.toString());
                
                //add to transaction list
                transactions.add(fromTran);
            } catch (ParseException ex) {
                Logger.getLogger(SABBCreditImport.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        driver.close();
        return transactions;
    }

    @Override
    public List<TransactionGroup> toTransactionGroup(List<Transaction> transactions) {
        List<TransactionGroup> transGroups = new ArrayList<>();
        
        for(Transaction tran : transactions) {
            TransactionGroup transGroup = new TransactionGroup();
            transGroup.addTransaction(tran);
            
            
        }
        
        return transGroups;
    }

    private BigDecimal SABBAmountToBigDecimal(String amountStr, 
            String creditStr) {
        if(amountStr == null || amountStr.trim().isEmpty())
            return BigDecimal.ZERO;
        amountStr = amountStr.trim().replaceAll(",", "");
        if(creditStr != null && !creditStr.trim().equals("Cr"))
            amountStr = "-"+amountStr;
        return new BigDecimal(amountStr);
    }

    private MonetaryAmount parseforeignAmount(String currencyStr, 
            String amountStr, String creditStr) {
        if(currencyStr == null || currencyStr.trim().isEmpty() 
                || amountStr == null || amountStr.trim().isEmpty())
            return null;
       
        //parse amount
        amountStr = amountStr.trim().replaceAll(",", "");
        if(creditStr != null && !creditStr.trim().equals("Cr"))
            amountStr = "-"+amountStr;
       
        return Money.of( new BigDecimal(amountStr), currencyStr.trim());
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/sabb/SABBCreditToQIF.java
package com.almatarm.money.importing.sabb;


import com.almatarm.money.domain.Payee;
import com.almatarm.money.importing.manipulator.QIFTransactionManipulator;
import com.almatarm.money.importing.manipulator.filebased.RuleFileParsingException;
import com.almatarm.money.importing.manipulator.filebased2.QIFFileBasedManipulatorParser;
import com.almatarm.money.qif.QIFFile;
import com.almatarm.money.qif.QIFHeader;
import com.almatarm.money.qif.QIFTransaction;
import com.almatarm.money.qif.QIFWriter;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.money.MonetaryAmount;
import org.apache.commons.exec.OS;
import org.javamoney.moneta.Money;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

/**
 *
 * @author almatarm
 */
public class SABBCreditToQIF {
    
    public static List<QIFTransaction> parse(WebDriver driver, 
            List<QIFTransactionManipulator> manipulators) 
            throws ParseException {
        
        List<QIFTransaction> transactions = new ArrayList<>();
        
        List<WebElement> tablesElements = driver.findElements(By.className("hsbcTableStyle07"));
        if(tablesElements.isEmpty()) {
            System.err.println("Could not find <table> tag with class='hsbcTableStyle07'");
            return transactions;
        }
        WebElement table = tablesElements.get(0);
        List<WebElement> rows = table.findElements(By.tagName("tr"));
        
        SimpleDateFormat sdf = new SimpleDateFormat("MMMMM dd, yyyy");
        
        Calendar        date           = Calendar.getInstance();
        Calendar        effectiveDate  = Calendar.getInstance();
        BigDecimal      amount;
        MonetaryAmount  foreignAmount;
        Payee           payee = null;
        String          memo;
        
        for(WebElement row : rows) {
            try {
                List<WebElement> headers = row.findElements(By.tagName("td"));
                if(headers.size() != 7)
                    continue;
                
                //Create
                date.setTime(          sdf.parse( headers.get(0).getText() ));
                effectiveDate.setTime( sdf.parse( headers.get(1).getText() ));
                memo          = headers.get(2).getText();
                foreignAmount = parseforeignAmount(headers.get(3).getText(),
                        headers.get(4).getText(), headers.get(6).getText());
                amount        = SABBAmountToBigDecimal(headers.get(5).getText(),
                        headers.get(6).getText());
                
                QIFTransaction qTran = new QIFTransaction();
                qTran.setDate(date);
                qTran.setAmount(amount);
                qTran.setMemo(memo);
                qTran.setCategory("MISC: MISC");
                qTran.setPayee("PayeeX");
                manipulators.forEach( (manipulator) -> { 
                    manipulator.manipulate(qTran);
                });

                qTran.setMemo( foreignAmount == null || foreignAmount.isZero() ? 
                        qTran.getMemo() : 
                        qTran.getMemo() + "(" + foreignAmount + ")");
                
                //add to transaction list
                transactions.add(qTran);
            } catch (ParseException ex) {
                Logger.getLogger(SABBCreditImport.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        return transactions;
    }


    private static BigDecimal SABBAmountToBigDecimal(String amountStr, 
            String creditStr) {
        if(amountStr == null || amountStr.trim().isEmpty())
            return BigDecimal.ZERO;
        amountStr = amountStr.trim().replaceAll(",", "");
        if(creditStr != null && !creditStr.trim().equals("Cr"))
            amountStr = "-"+amountStr;
        return new BigDecimal(amountStr);
    }

    private static MonetaryAmount parseforeignAmount(String currencyStr, 
            String amountStr, String creditStr) {
        if(currencyStr == null || currencyStr.trim().isEmpty() 
                || amountStr == null || amountStr.trim().isEmpty())
            return null;
       
        //parse amount
        amountStr = amountStr.trim().replaceAll(",", "");
        if(creditStr != null && !creditStr.trim().equals("Cr"))
            amountStr = "-"+amountStr;
       
        return Money.of( new BigDecimal(amountStr), currencyStr.trim());
    }
    
    public static void main(String[] args) throws ParseException, IOException, RuleFileParsingException, com.almatarm.money.importing.manipulator.filebased2.RuleFileParsingException {
        WebDriver driver = new FirefoxDriver();
        
        String link = 
//                "file:///home/almatarm/Downloads/VISA%20HISTORY%20000516.html";
//                  "file:///home/almatarm/Downloads/VISA%20HISTORY%20090616.html";
//                "file:///home/almatarm/Downloads/VISA%20HISTORY%2006.html";
                "file:///home/almatarm/Downloads/Account%20historyM2.html";
        driver.navigate().to(link);
        
        File ruleFile = OS.isFamilyMac()?
                new File("/Users/almatarm/Dropbox/utopia/money-parser/file-based-manipulator"):
                new File("/home/almatarm/Dropbox/utopia/money-parser/file-based-manipulator");
        List<QIFTransactionManipulator> manipulators = new QIFFileBasedManipulatorParser(ruleFile).parseManipulator();

        List<QIFTransaction> transactoins = parse(driver, manipulators);
        
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");        
        for(QIFTransaction t : transactoins) {
            System.out.format("%-12s %-20s %-40s %-30s %-8s %n",
                    sdf.format(t.getDate().getTime()),
                    t.getPayee(),
                    t.getMemo(),
                    t.getCategory(),
                    t.getAmount().toString()
                    );
        }
        
        
        QIFWriter.write(new QIFFile(QIFHeader.Bank, transactoins), 
                "/tmp/SABB_Master_2.qif");
        
        driver.close();
        
        
        
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/sabb/SABBVISAImport.java
package com.almatarm.money.importing.sabb;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionStatus;
import com.almatarm.money.domain.TransactionType;
import com.almatarm.money.importing.ShadowTree;
import com.almatarm.money.service.AccountService;
import com.almatarm.money.service.fixed.FixedAccountService;
import com.almatarm.money.importing.manipulator.TransactionGroupManipulator;
import com.almatarm.money.importing.manipulator.TransactionManipulator;
import com.almatarm.money.importing.manipulator.filebased.FileBasedManipulatorParser;
import com.almatarm.money.importing.manipulator.filebased.RuleFileParsingException;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.money.MonetaryAmount;
import org.apache.commons.exec.OS;
import org.javamoney.moneta.Money;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

/**
 *
 * @author almatarm
 */
public class SABBVISAImport {
    
    ShadowTree shadowTree;
    List<TransactionGroupManipulator> tgManipulators = new ArrayList<>();
    
    public SABBVISAImport(Account root) {
        shadowTree = new ShadowTree(root, "SAR");
    }
    
    public static List<Transaction> parse(Account account, String link) 
            throws ParseException {
        List<Transaction> transactions = new ArrayList<>();
        
        WebDriver driver;
        driver = new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(7, TimeUnit.SECONDS);
        
        driver.navigate().to(link);
        
        List<WebElement> tablesElements = driver.findElements(By.className("hsbcTableStyle07"));
        if(tablesElements.isEmpty()) {
            System.err.println("Could not find <table> tag with class='hsbcTableStyle07'");
            return transactions;
        }
        WebElement table = tablesElements.get(0);
        List<WebElement> rows = table.findElements(By.tagName("tr"));
        
        SimpleDateFormat sdf = new SimpleDateFormat("MMMMM dd, yyyy");
        
        Calendar        date           = Calendar.getInstance();
        Calendar        effectiveDate  = Calendar.getInstance();
        BigDecimal      amount;
        MonetaryAmount  foreignAmount;
        Payee           payee = null;
        String          memo;
        
        for(WebElement row : rows) {
            List<WebElement> headers = row.findElements(By.tagName("td"));
            if(headers.size() != 7)
                continue;        
            
            //Create 
            date.setTime(          sdf.parse( headers.get(0).getText() ));
            effectiveDate.setTime( sdf.parse( headers.get(1).getText() ));
            memo          = headers.get(2).getText();
            foreignAmount = parseforeignAmount(headers.get(3).getText(), 
                    headers.get(4).getText(), headers.get(6).getText());
            amount        = SABBAmountToBigDecimal(headers.get(5).getText(), 
                    headers.get(6).getText());
            
            Transaction fromTran = new Transaction(date, effectiveDate, amount, 
                    TransactionStatus.NOT_CLEARED, "", payee, memo, 
                    TransactionType.Budget, account);
//            fromTran.setForeignAmount(foreignAmount);
//            
//            Transaction toTran = new Transaction(fromTran);
//            toTran.setAmount(fromTran.getAmount().negate());
//            toTran.setAccount(toAccount);
//
//            TransactionGroup transGroup = new TransactionGroup();
//            transGroup.addTransaction(new ShadowTransaction(fromTran));
//            transGroup.addTransaction(new ShadowTransaction(toTran));
//            
//            transactions.add(fromTran);
        }
        
        driver.close();
        return transactions;
    }


    private static BigDecimal SABBAmountToBigDecimal(String amountStr, 
            String creditStr) {
        if(amountStr == null || amountStr.trim().isEmpty())
            return BigDecimal.ZERO;
        amountStr = amountStr.trim().replaceAll(",", "");
        if(creditStr != null && !creditStr.trim().equals("Cr"))
            amountStr = "-"+amountStr;
        return new BigDecimal(amountStr);
    }

    private static MonetaryAmount parseforeignAmount(String currencyStr, 
            String amountStr, String creditStr) {
        if(currencyStr == null || currencyStr.trim().isEmpty() 
                || amountStr == null || amountStr.trim().isEmpty())
            return null;
       
        //parse amount
        amountStr = amountStr.trim().replaceAll(",", "");
        if(creditStr != null && !creditStr.trim().equals("Cr"))
            amountStr = "-"+amountStr;
       
        return Money.of( new BigDecimal(amountStr), currencyStr.trim());
    }
//    
//    public static void main(String[] args) throws ParseException, IOException, RuleFileParsingException {
//        AccountService acService = new FixedAccountService();
//        acService.buildCache();
//        
//        Account visa = acService.findByQualifiedName("Liability:Credit Cards:SABB VISA");
//        System.out.println(visa);
//        List<Transaction> transactoins = parse(
//                visa,
//                "file:///home/almatarm/Downloads/VISA%20HISTORY%20000516.html");
//        
//        File ruleFile = OS.isFamilyMac()?
//                new File("/Users/almatarm/Dropbox/utopia/money-parser/file-based-manipulator"):
//                new File("/home/almatarm/Dropbox/utopia/money-parser/file-based-manipulator");
//        List<TransactionManipulator> manipulators = new FileBasedManipulatorParser(ruleFile).parseManipulator();
//
//        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");        
//        boolean transactionChanged = false;
//        for(Transaction t : transactoins) {
//            transactionChanged = false;
//            for(TransactionManipulator manipulator : manipulators) {
//                transactionChanged |= manipulator.manipulate(t);
//            }
//            if(transactionChanged)
//                System.out.format("%-12s %-20s %-20s %-30s%n",
//                    sdf.format(t.getDate().getTime()),
//                    t.getPayee() == null ?"":t.getPayee().getName(),
//                    t.getMemo(),
//                    t.getAccount() == null? "":t.getAccount().getQualifiedName()
//                    );
//        }
//        
//    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/Import.java
package com.almatarm.money.importing;

import com.almatarm.money.domain.Account;
import com.almatarm.money.domain.Transaction;
import com.almatarm.money.domain.TransactionGroup;
import java.util.List;

/**
 *
 * @author almatarm
 */
public interface Import {
    
    ShadowTree getShadowTree();
    
    List<Transaction> importTransactionList(Account srcAccount);
    
    List<TransactionGroup> toTransactionGroup(List<Transaction> transactions);
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/QIFTransactionManipulator.java
package com.almatarm.money.importing.manipulator;

import com.almatarm.money.qif.QIFTransaction;
/**
 *
 * @author almatarm
 */
public interface QIFTransactionManipulator {

    /**
     *
     * @param transaction
     * @return
     */
    boolean manipulate(QIFTransaction transaction);
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/TransactionManipulator.java
package com.almatarm.money.importing.manipulator;

import com.almatarm.money.domain.Transaction;
/**
 *
 * @author almatarm
 */
public interface TransactionManipulator {

    /**
     *
     * @param transaction
     * @return
     */
    boolean manipulate(Transaction transaction);
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/ManipulatorCondition.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.almatarm.money.importing.manipulator.filebased;

import com.almatarm.money.domain.Transaction;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class ManipulatorCondition {
   
    int       lineNumber;
    TransactionField     field;
    Condition condition;
    String    value;

    public ManipulatorCondition(TransactionField field, Condition condition, String value) {
        this.field = field;
        this.condition = condition;
        this.value = value;
    }
    
    public ManipulatorCondition(int lineNumber, String conditionStr) 
            throws RuleFileParsingException {
        this.lineNumber = lineNumber;
        parseConditionString(conditionStr);
    }    
    
    private void parseConditionString(String conditionStr)
    throws RuleFileParsingException {
        String[] words = conditionStr.split("\\s+");
        if(words.length < 3) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber + ":\n" + conditionStr);
        }
        
        field     = parseField(words[0]);
        if(field == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[0] + " does not match any known field:\n" 
                + conditionStr);
        }
        
        condition = parseCondition(words[1]);
        if(condition == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[1] + " does not match any known condition:\n" 
                + conditionStr);
        }
        
        value     = parseValue(words[1], conditionStr);
    }
    
    public boolean evaluate(Transaction transaction) {
        switch(field) { 
            case memo:
                return compareStrings(condition, value, transaction.getMemo().trim());
        }
        return false;
    }
 
    private TransactionField parseField(String word) {
        for(TransactionField f : TransactionField.values()) {
            if(word.equals(f.name()))
                return f;
        }
        return null;
    }

    private Condition parseCondition(String word) {
        for(Condition c : Condition.values()) {
            if(word.replaceAll("-", "_").equals(c.name()))
                return c;
        }
        return null;
    }

    private String parseValue(String conditionStr, String line) {
        int startIdx = line.indexOf(conditionStr) + conditionStr.length();
        return line.substring(startIdx).trim().replaceAll("\"", "");
    }

    @Override
    public String toString() {
        return "ManipulatorCondition{" 
                + "\n\tlineNumber: " + lineNumber 
                + "\n\tfield:      " + field 
                + "\n\tcondition:  " + condition 
                + "\n\tvalue:      " + value + "\n}";
    }
    
    private boolean compareStrings(Condition condition, String src, String other) {
        switch(condition) {
            case equals:
                return other.equals(src);
            case equals_ignore_case:
                return other.equalsIgnoreCase(src);
            case contains:
                return other.contains(src);
            case contains_ignore_case:
                return other.toLowerCase().contains(src.toLowerCase());
            case reg_exp:
                return other.matches(src);
        }
        return false;
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/Condition.java
package com.almatarm.money.importing.manipulator.filebased;

/**
 *
 * @author almatarm
 */
public enum Condition {
    equals,
    equals_ignore_case,
    contains,
    contains_ignore_case,
    reg_exp,
    less_than,
    less_than_or_equal,
    greater_than,
    greater_than_or_equal,;
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/FileBasedManipulatorParser.java
package com.almatarm.money.importing.manipulator.filebased;

import com.almatarm.money.importing.manipulator.TransactionManipulator;
import com.almatarm.money.importing.manipulator.filebased.ManipulatorCondition;
import static com.almatarm.money.importing.manipulator.filebased.FileBasedManipulatorParser.State.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.exec.OS;
import org.smallutil.io.FileRW;

/**
 *
 * @author almatarm
 */
public class FileBasedManipulatorParser {
    
    File ruleFile;

    public FileBasedManipulatorParser(File ruleFile) {
        this.ruleFile = ruleFile;
    }
    
    private boolean isComment(String line) {
        return line.trim().startsWith("#");
    }

    private State getState(String line) {
        if(line.trim().startsWith("IF")) {
            return new_rule;
        } else if(line.trim().startsWith("THEN")) {
            return then;
        } else if(line.trim().startsWith("END")) {
            return end_rule;
        } 
        return null;
    }
    
    public static enum State {
        new_rule,
        condition,
        then,
        action,
        end_rule,
        none,
        ;
    }
    
    State state = none;
    public List<TransactionManipulator> parseManipulator() 
            throws IOException, RuleFileParsingException {
        
        List<TransactionManipulator> manipulators = new ArrayList<>();
        FileBasedManipulator    manipulator = null;        
        String[] lines = FileRW.load(ruleFile.getPath(), "UTF-8").split("[\n\r]");
        int lineNumber = 1;
        for(String line : lines) {
            
            State oldState = state;
            
            try {
                if(isComment(line) || line.trim().isEmpty()) {
                    continue;
                }
                
                System.out.println(lineNumber + "\t" + line);
                switch(state) {
                    case none:
                        if(getState(line) == new_rule ) {
                            manipulator = new FileBasedManipulator();
                            state = condition;
                        } else {
                            System.err.println("[" + lineNumber + "]: Expected IF but found:\n" + line);
                            System.exit(-1);
                        }
                        break;
                    case condition:
                        if(getState(line) == then ) {
                            state = action;
                            break;
                        }
                        ManipulatorCondition mc = new ManipulatorCondition(lineNumber, line.trim());
                        manipulator.setCondition(mc);
                        break;
                    case action:
                        if(getState(line) == end_rule ) {
                            manipulators.add(manipulator);
                            state = none;
                            break;
                        }
                        ManipulatorAction ac = new ManipulatorAction(lineNumber, line.trim());
                        manipulator.getActions().add(ac);
                        break;
                }
                
            } finally {
                lineNumber++;
            }
        }
        
        return manipulators;
    }
        
    
    public static void main(String[] args) throws IOException, RuleFileParsingException {
        File ruleFile = OS.isFamilyMac()?
                new File("/Users/almatarm/Dropbox/utopia/money-parser/file-based-manipulator"):
                new File("/home/almatarm/Dropbox/utopia/money-parser/file-based-manipulator");
        new FileBasedManipulatorParser(ruleFile).parseManipulator();
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/TransactionField.java
package com.almatarm.money.importing.manipulator.filebased;

/**
 *
 * @author almatarm
 */
public enum TransactionField {
    account,
    amount,
    payee,
    memo,;
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/RuleFileParsingException.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.almatarm.money.importing.manipulator.filebased;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class RuleFileParsingException extends Exception {

    /**
     * Creates a new instance of <code>RuleFileParsingException</code> without detail message.
     */
    public RuleFileParsingException() {
    }


    /**
     * Constructs an instance of <code>RuleFileParsingException</code> with the specified detail message.
     * @param msg the detail message.
     */
    public RuleFileParsingException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/FileBasedManipulator.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.money.importing.manipulator.filebased;

import com.almatarm.money.domain.Transaction;
import com.almatarm.money.importing.manipulator.TransactionManipulator;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class FileBasedManipulator implements TransactionManipulator {
    ManipulatorCondition    condition;
    List<ManipulatorAction> actions;

    public FileBasedManipulator() {
        this.actions = new ArrayList<>();
    }
    
    public FileBasedManipulator(ManipulatorCondition condition, List<ManipulatorAction> actions) {
        this.condition = condition;
        this.actions   = actions;
    }
    
    @Override
    public boolean manipulate(Transaction transaction) {
        if(condition.evaluate(transaction)) {
            actions.forEach( (action) -> {
                action.apply(transaction);
            });
            return true;
        }
        return false;
    }

    public ManipulatorCondition getCondition() {
        return condition;
    }

    public void setCondition(ManipulatorCondition condition) {
        this.condition = condition;
    }

    public List<ManipulatorAction> getActions() {
        return actions;
    }

    public void setActions(List<ManipulatorAction> actions) {
        this.actions = actions;
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/TransactionAction.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.money.importing.manipulator.filebased;

/**
 *
 * @author almatarm
 */
public enum TransactionAction {
    set,
    ;
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased/ManipulatorAction.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.almatarm.money.importing.manipulator.filebased;

import com.almatarm.money.domain.Payee;
import com.almatarm.money.domain.Transaction;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class ManipulatorAction {
    
    int               lineNumber;
    TransactionAction action;
    TransactionField  field;
    String            value;
    
    public ManipulatorAction(int lineNumber, String conditionStr) 
            throws RuleFileParsingException {
        this.lineNumber = lineNumber;
        parseActionString(conditionStr);
    }    
    
    private void parseActionString(String actionStr)
    throws RuleFileParsingException {
        String[] words = actionStr.split("\\s+");
        if(words.length < 3) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber + ":\n" + actionStr);
        }
        
        action = parseAction(words[0]);
        if(action == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[0] + " does not match any known action:\n" 
                + actionStr);
        }
        
        field     = parseField(words[1]);
        if(field == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[1] + " does not match any known field:\n" 
                + actionStr);
        }
        
        value     = parseValue(words[1], actionStr);
    }
    
    public void apply(Transaction transaction) {
        switch(field) { 
            case memo:
                transaction.setMemo(value);
                break;
            case payee:
                Payee payee = new Payee(value);
                transaction.setPayee(payee);
                break;
        }
    }
 
    private TransactionField parseField(String word) {
        for(TransactionField f : TransactionField.values()) {
            if(word.equals(f.name()))
                return f;
        }
        return null;
    }

    private TransactionAction parseAction(String word) {
        for(TransactionAction c : TransactionAction.values()) {
            if(word.replaceAll("-", "_").equals(c.name()))
                return c;
        }
        return null;
    }

    private String parseValue(String actionStr, String line) {
        int startIdx = line.indexOf(actionStr) + actionStr.length();
        return line.substring(startIdx).trim().replaceAll("\"", "");
    }

    @Override
    public String toString() {
        return "ManipulatorAction{" 
                + "\n\tlineNumber: " + lineNumber 
                + "\n\taction:     " + action 
                + "\n\tfield:      " + field 
                + "\n\tvalue:      " + value + "\n}";
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/QIFFileBasedManipulatorParser.java
package com.almatarm.money.importing.manipulator.filebased2;

import com.almatarm.money.importing.manipulator.QIFTransactionManipulator;
import com.almatarm.money.importing.manipulator.TransactionManipulator;
import com.almatarm.money.importing.manipulator.filebased.ManipulatorCondition;
import static com.almatarm.money.importing.manipulator.filebased2.QIFFileBasedManipulatorParser.State.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.exec.OS;
import org.smallutil.io.FileRW;

/**
 *
 * @author almatarm
 */
public class QIFFileBasedManipulatorParser {
    
    File ruleFile;

    public QIFFileBasedManipulatorParser(File ruleFile) {
        this.ruleFile = ruleFile;
    }
    
    private boolean isComment(String line) {
        return line.trim().startsWith("#");
    }

    private State getState(String line) {
        if(line.trim().startsWith("IF")) {
            return new_rule;
        } else if(line.trim().startsWith("THEN")) {
            return then;
        } else if(line.trim().startsWith("END")) {
            return end_rule;
        } 
        return null;
    }
    
    public static enum State {
        new_rule,
        condition,
        then,
        action,
        end_rule,
        none,
        ;
    }
    
    State state = none;
    public List<QIFTransactionManipulator> parseManipulator() 
            throws IOException, RuleFileParsingException {
        
        List<QIFTransactionManipulator> manipulators = new ArrayList<>();
        QIFFileBasedManipulator    manipulator = null;        
        String[] lines = FileRW.load(ruleFile.getPath(), "UTF-8").split("[\n\r]");
        int lineNumber = 1;
        for(String line : lines) {
            
            State oldState = state;
            
            try {
                if(isComment(line) || line.trim().isEmpty()) {
                    continue;
                }
                
                System.out.println(lineNumber + "\t" + line);
                switch(state) {
                    case none:
                        if(getState(line) == new_rule ) {
                            manipulator = new QIFFileBasedManipulator();
                            state = condition;
                        } else {
                            System.err.println("[" + lineNumber + "]: Expected IF but found:\n" + line);
                            System.exit(-1);
                        }
                        break;
                    case condition:
                        if(getState(line) == then ) {
                            state = action;
                            break;
                        }
                        QIFManipulatorCondition mc = new QIFManipulatorCondition(lineNumber, line.trim());
                        manipulator.setCondition(mc);
                        break;
                    case action:
                        if(getState(line) == end_rule ) {
                            manipulators.add(manipulator);
                            state = none;
                            break;
                        }
                        ManipulatorAction ac = new ManipulatorAction(lineNumber, line.trim());
                        manipulator.getActions().add(ac);
                        break;
                }
                
            } finally {
                lineNumber++;
            }
        }
        
        return manipulators;
    }
        
    
    public static void main(String[] args) throws IOException, RuleFileParsingException {
        File ruleFile = OS.isFamilyMac()?
                new File("/Users/almatarm/Dropbox/utopia/money-parser/file-based-manipulator"):
                new File("/home/almatarm/Dropbox/utopia/money-parser/file-based-manipulator");
        new QIFFileBasedManipulatorParser(ruleFile).parseManipulator();
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/QIFFileBasedManipulator.java
package com.almatarm.money.importing.manipulator.filebased2;

import com.almatarm.money.importing.manipulator.QIFTransactionManipulator;
import com.almatarm.money.qif.QIFTransaction;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class QIFFileBasedManipulator implements QIFTransactionManipulator {
    QIFManipulatorCondition condition;
    List<ManipulatorAction> actions;

    public QIFFileBasedManipulator() {
        this.actions = new ArrayList<>();
    }
    
    public QIFFileBasedManipulator(QIFManipulatorCondition condition, List<ManipulatorAction> actions) {
        this.condition = condition;
        this.actions   = actions;
    }
    
    @Override
    public boolean manipulate(QIFTransaction transaction) {
        if(condition.evaluate(transaction)) {
            actions.forEach( (action) -> {
                action.apply(transaction);
            });
            return true;
        }
        return false;
    }

    public QIFManipulatorCondition getCondition() {
        return condition;
    }

    public void setCondition(QIFManipulatorCondition condition) {
        this.condition = condition;
    }

    public List<ManipulatorAction> getActions() {
        return actions;
    }

    public void setActions(List<ManipulatorAction> actions) {
        this.actions = actions;
    }
    
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/QIFManipulatorCondition.java
package com.almatarm.money.importing.manipulator.filebased2;

import com.almatarm.money.qif.QIFTransaction;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class QIFManipulatorCondition {
   
    int       lineNumber;
    TransactionField     field;
    Condition condition;
    String    value;

    public QIFManipulatorCondition(TransactionField field, Condition condition, String value) {
        this.field = field;
        this.condition = condition;
        this.value = value;
    }
    
    public QIFManipulatorCondition(int lineNumber, String conditionStr) 
            throws RuleFileParsingException {
        this.lineNumber = lineNumber;
        parseConditionString(conditionStr);
    }    
    
    private void parseConditionString(String conditionStr)
    throws RuleFileParsingException {
        String[] words = conditionStr.split("\\s+");
        if(words.length < 3) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber + ":\n" + conditionStr);
        }
        
        field     = parseField(words[0]);
        if(field == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[0] + " does not match any known field:\n" 
                + conditionStr);
        }
        
        condition = parseCondition(words[1]);
        if(condition == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[1] + " does not match any known condition:\n" 
                + conditionStr);
        }
        
        value     = parseValue(words[1], conditionStr);
    }
    
    public boolean evaluate(QIFTransaction transaction) {
        switch(field) { 
            case memo:
                return compareStrings(condition, value, transaction.getMemo().trim());
        }
        return false;
    }
 
    private TransactionField parseField(String word) {
        for(TransactionField f : TransactionField.values()) {
            if(word.equals(f.name()))
                return f;
        }
        return null;
    }

    private Condition parseCondition(String word) {
        for(Condition c : Condition.values()) {
            if(word.replaceAll("-", "_").equals(c.name()))
                return c;
        }
        return null;
    }

    private String parseValue(String conditionStr, String line) {
        int startIdx = line.indexOf(conditionStr) + conditionStr.length();
        return line.substring(startIdx).trim().replaceAll("\"", "");
    }

    @Override
    public String toString() {
        return "ManipulatorCondition{" 
                + "\n\tlineNumber: " + lineNumber 
                + "\n\tfield:      " + field 
                + "\n\tcondition:  " + condition 
                + "\n\tvalue:      " + value + "\n}";
    }
    
    private boolean compareStrings(Condition condition, String src, String other) {
        switch(condition) {
            case equals:
                return other.equals(src);
            case equals_ignore_case:
                return other.equalsIgnoreCase(src);
            case contains:
                return other.contains(src);
            case contains_ignore_case:
                return other.toLowerCase().contains(src.toLowerCase());
            case reg_exp:
                return other.matches(src);
        }
        return false;
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/Condition.java
package com.almatarm.money.importing.manipulator.filebased2;

/**
 *
 * @author almatarm
 */
public enum Condition {
    equals,
    equals_ignore_case,
    contains,
    contains_ignore_case,
    reg_exp,
    less_than,
    less_than_or_equal,
    greater_than,
    greater_than_or_equal,;
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/TransactionField.java
package com.almatarm.money.importing.manipulator.filebased2;

/**
 *
 * @author almatarm
 */
public enum TransactionField {
    amount,
    payee,
    memo,
    category;
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/RuleFileParsingException.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.almatarm.money.importing.manipulator.filebased2;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class RuleFileParsingException extends Exception {

    /**
     * Creates a new instance of <code>RuleFileParsingException</code> without detail message.
     */
    public RuleFileParsingException() {
    }


    /**
     * Constructs an instance of <code>RuleFileParsingException</code> with the specified detail message.
     * @param msg the detail message.
     */
    public RuleFileParsingException(String msg) {
        super(msg);
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/TransactionAction.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.money.importing.manipulator.filebased2;

/**
 *
 * @author almatarm
 */
public enum TransactionAction {
    set,
    ;
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/filebased2/ManipulatorAction.java
package com.almatarm.money.importing.manipulator.filebased2;

import com.almatarm.money.qif.QIFTransaction;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class ManipulatorAction {
    
    int               lineNumber;
    TransactionAction action;
    TransactionField  field;
    String            value;
    
    public ManipulatorAction(int lineNumber, String conditionStr) 
            throws RuleFileParsingException {
        this.lineNumber = lineNumber;
        parseActionString(conditionStr);
    }    
    
    private void parseActionString(String actionStr)
    throws RuleFileParsingException {
        String[] words = actionStr.split("\\s+");
        if(words.length < 3) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber + ":\n" + actionStr);
        }
        
        action = parseAction(words[0]);
        if(action == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[0] + " does not match any known action:\n" 
                + actionStr);
        }
        
        field     = parseField(words[1]);
        if(field == null) {
            throw new RuleFileParsingException("Syntax exception at " + lineNumber 
                + ", " + words[1] + " does not match any known field:\n" 
                + actionStr);
        }
        
        value     = parseValue(words[1], actionStr);
    }
    
    public void apply(QIFTransaction transaction) {
        switch(field) { 
            case memo:
                transaction.setMemo(value);
                break;
            case payee:
                transaction.setPayee(value);
                break;
            case category:
                transaction.setCategory(value);
                break;
        }
    }
 
    private TransactionField parseField(String word) {
        for(TransactionField f : TransactionField.values()) {
            if(word.equals(f.name()))
                return f;
        }
        return null;
    }

    private TransactionAction parseAction(String word) {
        for(TransactionAction c : TransactionAction.values()) {
            if(word.replaceAll("-", "_").equals(c.name()))
                return c;
        }
        return null;
    }

    private String parseValue(String actionStr, String line) {
        int startIdx = line.indexOf(actionStr) + actionStr.length();
        return line.substring(startIdx).trim().replaceAll("\"", "");
    }

    @Override
    public String toString() {
        return "ManipulatorAction{" 
                + "\n\tlineNumber: " + lineNumber 
                + "\n\taction:     " + action 
                + "\n\tfield:      " + field 
                + "\n\tvalue:      " + value + "\n}";
    }
}

*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/manipulator/TransactionGroupManipulator.java
package com.almatarm.money.importing.manipulator;

import com.almatarm.money.domain.TransactionGroup;


/**
 *
 * @author almatarm
 */
public interface TransactionGroupManipulator {
    void manipulate(TransactionGroup transGroup);
}
*** end *** end ***
***$$$@@@ /money-import/src/main/java/com/almatarm/money/importing/ShadowAccount.java
package com.almatarm.money.importing;

import com.almatarm.money.domain.Account;


/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class ShadowAccount extends Account {

    Account account;

    boolean selected;
    
    public ShadowAccount(Account account) {
        super(account.getName(), account.getDescription(), account.getCurrency(), 
                account.getNotes(), account.getType(), account.getBalance());
        this.account = account;
    }

    public Account getAccount() {
        return account;
    }

    public boolean isSelected() {
        return selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
    }
    
}

*** end *** end ***
