***$$$@@@ /manifest.mf
Manifest-Version: 1.0
X-COMMENT: Main-Class will be added automatically by build


*** end *** end ***
***$$$@@@ /build.xml
<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="DirToTxt" default="default" basedir=".">
    <description>Builds, tests, and runs the project DirToTxt.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="DirToTxt-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
</project>

*** end *** end ***
***$$$@@@ /nbproject/build-impl.xml
<?xml version="1.0" encoding="UTF-8"?>
<!--
*** GENERATED FROM project.xml - DO NOT EDIT  ***
***         EDIT ../build.xml INSTEAD         ***

For the purpose of easier reading the script
is divided into following sections:

  - initialization
  - compilation
  - jar
  - execution
  - debugging
  - javadoc
  - test compilation
  - test execution
  - test debugging
  - applet
  - cleanup

        -->
<project xmlns:j2seproject1="http://www.netbeans.org/ns/j2se-project/1" xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3" xmlns:jaxrpc="http://www.netbeans.org/ns/j2se-project/jax-rpc" basedir=".." default="default" name="DirToTxt-impl">
    <fail message="Please build using Ant 1.8.0 or higher.">
        <condition>
            <not>
                <antversion atleast="1.8.0"/>
            </not>
        </condition>
    </fail>
    <target depends="test,jar,javadoc" description="Build and test whole project." name="default"/>
    <!-- 
                ======================
                INITIALIZATION SECTION 
                ======================
            -->
    <target name="-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="-pre-init" name="-init-private">
        <property file="nbproject/private/config.properties"/>
        <property file="nbproject/private/configs/${config}.properties"/>
        <property file="nbproject/private/private.properties"/>
    </target>
    <target depends="-pre-init,-init-private" name="-init-user">
        <property file="${user.properties.file}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="1.6"/>
        <property name="default.javac.target" value="1.6"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user" name="-init-project">
        <property file="nbproject/configs/${config}.properties"/>
        <property file="nbproject/project.properties"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property" name="-do-init">
        <property name="platform.java" value="${java.home}/bin/java"/>
        <available file="${manifest.file}" property="manifest.available"/>
        <condition property="splashscreen.available">
            <and>
                <not>
                    <equals arg1="${application.splash}" arg2="" trim="true"/>
                </not>
                <available file="${application.splash}"/>
            </and>
        </condition>
        <condition property="main.class.available">
            <and>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="profile.available">
            <and>
                <isset property="javac.profile"/>
                <length length="0" string="${javac.profile}" when="greater"/>
                <matches pattern="((1\.[89])|9)(\..*)?" string="${javac.source}"/>
            </and>
        </condition>
        <condition property="do.archive">
            <or>
                <not>
                    <istrue value="${jar.archive.disabled}"/>
                </not>
                <istrue value="${not.archive.disabled}"/>
            </or>
        </condition>
        <condition property="do.mkdist">
            <and>
                <isset property="do.archive"/>
                <isset property="libs.CopyLibs.classpath"/>
                <not>
                    <istrue value="${mkdist.disabled}"/>
                </not>
            </and>
        </condition>
        <condition property="do.archive+manifest.available">
            <and>
                <isset property="manifest.available"/>
                <istrue value="${do.archive}"/>
            </and>
        </condition>
        <condition property="do.archive+main.class.available">
            <and>
                <isset property="main.class.available"/>
                <istrue value="${do.archive}"/>
            </and>
        </condition>
        <condition property="do.archive+splashscreen.available">
            <and>
                <isset property="splashscreen.available"/>
                <istrue value="${do.archive}"/>
            </and>
        </condition>
        <condition property="do.archive+profile.available">
            <and>
                <isset property="profile.available"/>
                <istrue value="${do.archive}"/>
            </and>
        </condition>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <and>
                <isset property="javadoc.preview"/>
                <isfalse value="${javadoc.preview}"/>
            </and>
        </condition>
        <property name="run.jvmargs" value=""/>
        <property name="run.jvmargs.ide" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <property name="javac.debug" value="true"/>
        <property name="javadoc.preview" value="true"/>
        <property name="application.args" value=""/>
        <property name="source.encoding" value="${file.encoding}"/>
        <property name="runtime.encoding" value="${source.encoding}"/>
        <property name="manifest.encoding" value="${source.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <property name="do.depend" value="false"/>
        <condition property="do.depend.true">
            <istrue value="${do.depend}"/>
        </condition>
        <path id="endorsed.classpath.path" path="${endorsed.classpath}"/>
        <condition else="" property="endorsed.classpath.cmd.line.arg" value="-Xbootclasspath/p:'${toString:endorsed.classpath.path}'">
            <and>
                <isset property="endorsed.classpath"/>
                <not>
                    <equals arg1="${endorsed.classpath}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition else="" property="javac.profile.cmd.line.arg" value="-profile ${javac.profile}">
            <isset property="profile.available"/>
        </condition>
        <condition else="false" property="jdkBug6558476">
            <and>
                <matches pattern="1\.[56]" string="${java.specification.version}"/>
                <not>
                    <os family="unix"/>
                </not>
            </and>
        </condition>
        <condition else="false" property="javac.fork">
            <or>
                <istrue value="${jdkBug6558476}"/>
                <istrue value="${javac.external.vm}"/>
            </or>
        </condition>
        <property name="jar.index" value="false"/>
        <property name="jar.index.metainf" value="${jar.index}"/>
        <property name="copylibs.rebase" value="true"/>
        <available file="${meta.inf.dir}/persistence.xml" property="has.persistence.xml"/>
        <condition property="junit.available">
            <or>
                <available classname="org.junit.Test" classpath="${run.test.classpath}"/>
                <available classname="junit.framework.Test" classpath="${run.test.classpath}"/>
            </or>
        </condition>
        <condition property="testng.available">
            <available classname="org.testng.annotations.Test" classpath="${run.test.classpath}"/>
        </condition>
        <condition property="junit+testng.available">
            <and>
                <istrue value="${junit.available}"/>
                <istrue value="${testng.available}"/>
            </and>
        </condition>
        <condition else="testng" property="testng.mode" value="mixed">
            <istrue value="${junit+testng.available}"/>
        </condition>
        <condition else="" property="testng.debug.mode" value="-mixed">
            <istrue value="${junit+testng.available}"/>
        </condition>
        <property name="java.failonerror" value="true"/>
    </target>
    <target name="-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-do-init" name="-init-check">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    <target name="-init-macrodef-property">
        <macrodef name="property" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${@{value}}"/>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-ap-cmdline-properties" if="ap.supported.internal" name="-init-macrodef-javac-with-processors">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <attribute default="${javac.processorpath}" name="processorpath"/>
            <attribute default="${build.generated.sources.dir}/ap-source-output" name="apgeneratedsrcdir"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="${empty.dir}" name="sourcepath"/>
            <attribute default="${empty.dir}" name="gensrcdir"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property location="${build.dir}/empty" name="empty.dir"/>
                <mkdir dir="${empty.dir}"/>
                <mkdir dir="@{apgeneratedsrcdir}"/>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" fork="${javac.fork}" includeantruntime="false" includes="@{includes}" source="${javac.source}" sourcepath="@{sourcepath}" srcdir="@{srcdir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
                    <src>
                        <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                            <include name="*"/>
                        </dirset>
                    </src>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.profile.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <compilerarg value="-processorpath"/>
                    <compilerarg path="@{processorpath}:${empty.dir}"/>
                    <compilerarg line="${ap.processors.internal}"/>
                    <compilerarg line="${annotation.processing.processor.options}"/>
                    <compilerarg value="-s"/>
                    <compilerarg path="@{apgeneratedsrcdir}"/>
                    <compilerarg line="${ap.proc.none.internal}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-ap-cmdline-properties" name="-init-macrodef-javac-without-processors" unless="ap.supported.internal">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <attribute default="${javac.processorpath}" name="processorpath"/>
            <attribute default="${build.generated.sources.dir}/ap-source-output" name="apgeneratedsrcdir"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="${empty.dir}" name="sourcepath"/>
            <attribute default="${empty.dir}" name="gensrcdir"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property location="${build.dir}/empty" name="empty.dir"/>
                <mkdir dir="${empty.dir}"/>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" fork="${javac.fork}" includeantruntime="false" includes="@{includes}" source="${javac.source}" sourcepath="@{sourcepath}" srcdir="@{srcdir}" target="${javac.target}" tempdir="${java.io.tmpdir}">
                    <src>
                        <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                            <include name="*"/>
                        </dirset>
                    </src>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.profile.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-javac-with-processors,-init-macrodef-javac-without-processors" name="-init-macrodef-javac">
        <macrodef name="depend" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <sequential>
                <depend cache="${build.dir}/depcache" destdir="@{destdir}" excludes="${excludes}" includes="${includes}" srcdir="@{srcdir}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </depend>
            </sequential>
        </macrodef>
        <macrodef name="force-recompile" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${build.classes.dir}" name="destdir"/>
            <sequential>
                <fail unless="javac.includes">Must set javac.includes</fail>
                <pathconvert pathsep="${line.separator}" property="javac.includes.binary">
                    <path>
                        <filelist dir="@{destdir}" files="${javac.includes}"/>
                    </path>
                    <globmapper from="*.java" to="*.class"/>
                </pathconvert>
                <tempfile deleteonexit="true" property="javac.includesfile.binary"/>
                <echo file="${javac.includesfile.binary}" message="${javac.includes.binary}"/>
                <delete>
                    <files includesfile="${javac.includesfile.binary}"/>
                </delete>
                <delete>
                    <fileset file="${javac.includesfile.binary}"/>
                </delete>
            </sequential>
        </macrodef>
    </target>
    <target if="${junit.available}" name="-init-macrodef-junit-init">
        <condition else="false" property="nb.junit.batch" value="true">
            <and>
                <istrue value="${junit.available}"/>
                <not>
                    <isset property="test.method"/>
                </not>
            </and>
        </condition>
        <condition else="false" property="nb.junit.single" value="true">
            <and>
                <istrue value="${junit.available}"/>
                <isset property="test.method"/>
            </and>
        </condition>
    </target>
    <target name="-init-test-properties">
        <property name="test.binaryincludes" value="&lt;nothing&gt;"/>
        <property name="test.binarytestincludes" value=""/>
        <property name="test.binaryexcludes" value=""/>
    </target>
    <target if="${nb.junit.single}" name="-init-macrodef-junit-single" unless="${nb.junit.batch}">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="junit.forkmode" value="perTest"/>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" forkmode="${junit.forkmode}" showoutput="true" tempdir="${build.dir}">
                    <test methods="@{testmethods}" name="@{testincludes}" todir="${build.test.results.dir}"/>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-test-properties" if="${nb.junit.batch}" name="-init-macrodef-junit-batch" unless="${nb.junit.single}">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="junit.forkmode" value="perTest"/>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" forkmode="${junit.forkmode}" showoutput="true" tempdir="${build.dir}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                        <fileset dir="${build.test.classes.dir}" excludes="@{excludes},${excludes},${test.binaryexcludes}" includes="${test.binaryincludes}">
                            <filename name="${test.binarytestincludes}"/>
                        </fileset>
                    </batchtest>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit-init,-init-macrodef-junit-single, -init-macrodef-junit-batch" if="${junit.available}" name="-init-macrodef-junit"/>
    <target if="${testng.available}" name="-init-macrodef-testng">
        <macrodef name="testng" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <condition else="" property="testng.methods.arg" value="@{testincludes}.@{testmethods}">
                    <isset property="test.method"/>
                </condition>
                <union id="test.set">
                    <fileset dir="${test.src.dir}" excludes="@{excludes},**/*.xml,${excludes}" includes="@{includes}">
                        <filename name="@{testincludes}"/>
                    </fileset>
                </union>
                <taskdef classname="org.testng.TestNGAntTask" classpath="${run.test.classpath}" name="testng"/>
                <testng classfilesetref="test.set" failureProperty="tests.failed" listeners="org.testng.reporters.VerboseReporter" methods="${testng.methods.arg}" mode="${testng.mode}" outputdir="${build.test.results.dir}" suitename="DirToTxt" testname="TestNG tests" workingDir="${work.dir}">
                    <xmlfileset dir="${build.test.classes.dir}" includes="@{testincludes}"/>
                    <propertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </propertyset>
                    <customize/>
                </testng>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-test-impl">
        <macrodef name="test-impl" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <echo>No tests executed.</echo>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit" if="${junit.available}" name="-init-macrodef-junit-impl">
        <macrodef name="test-impl" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <j2seproject3:junit excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize/>
                </j2seproject3:junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-testng" if="${testng.available}" name="-init-macrodef-testng-impl">
        <macrodef name="test-impl" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <j2seproject3:testng excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize/>
                </j2seproject3:testng>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-test-impl,-init-macrodef-junit-impl,-init-macrodef-testng-impl" name="-init-macrodef-test">
        <macrodef name="test" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <sequential>
                <j2seproject3:test-impl excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize>
                        <classpath>
                            <path path="${run.test.classpath}"/>
                        </classpath>
                        <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                        <jvmarg line="${run.jvmargs}"/>
                        <jvmarg line="${run.jvmargs.ide}"/>
                    </customize>
                </j2seproject3:test-impl>
            </sequential>
        </macrodef>
    </target>
    <target if="${junit.available}" name="-init-macrodef-junit-debug" unless="${nb.junit.batch}">
        <macrodef name="junit-debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="junit.forkmode" value="perTest"/>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" forkmode="${junit.forkmode}" showoutput="true" tempdir="${build.dir}">
                    <test methods="@{testmethods}" name="@{testincludes}" todir="${build.test.results.dir}"/>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-test-properties" if="${nb.junit.batch}" name="-init-macrodef-junit-debug-batch">
        <macrodef name="junit-debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="junit.forkmode" value="perTest"/>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" forkmode="${junit.forkmode}" showoutput="true" tempdir="${build.dir}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                        <fileset dir="${build.test.classes.dir}" excludes="@{excludes},${excludes},${test.binaryexcludes}" includes="${test.binaryincludes}">
                            <filename name="${test.binarytestincludes}"/>
                        </fileset>
                    </batchtest>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit-debug,-init-macrodef-junit-debug-batch" if="${junit.available}" name="-init-macrodef-junit-debug-impl">
        <macrodef name="test-debug-impl" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <j2seproject3:junit-debug excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize/>
                </j2seproject3:junit-debug>
            </sequential>
        </macrodef>
    </target>
    <target if="${testng.available}" name="-init-macrodef-testng-debug">
        <macrodef name="testng-debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <element name="customize2" optional="true"/>
            <sequential>
                <condition else="-testclass @{testClass}" property="test.class.or.method" value="-methods @{testClass}.@{testMethod}">
                    <isset property="test.method"/>
                </condition>
                <condition else="-suitename DirToTxt -testname @{testClass} ${test.class.or.method}" property="testng.cmd.args" value="@{testClass}">
                    <matches pattern=".*\.xml" string="@{testClass}"/>
                </condition>
                <delete dir="${build.test.results.dir}" quiet="true"/>
                <mkdir dir="${build.test.results.dir}"/>
                <j2seproject3:debug classname="org.testng.TestNG" classpath="${debug.test.classpath}">
                    <customize>
                        <customize2/>
                        <jvmarg value="-ea"/>
                        <arg line="${testng.debug.mode}"/>
                        <arg line="-d ${build.test.results.dir}"/>
                        <arg line="-listener org.testng.reporters.VerboseReporter"/>
                        <arg line="${testng.cmd.args}"/>
                    </customize>
                </j2seproject3:debug>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-testng-debug" if="${testng.available}" name="-init-macrodef-testng-debug-impl">
        <macrodef name="testng-debug-impl" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <element implicit="true" name="customize2" optional="true"/>
            <sequential>
                <j2seproject3:testng-debug testClass="@{testClass}" testMethod="@{testMethod}">
                    <customize2/>
                </j2seproject3:testng-debug>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit-debug-impl" if="${junit.available}" name="-init-macrodef-test-debug-junit">
        <macrodef name="test-debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <sequential>
                <j2seproject3:test-debug-impl excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize>
                        <classpath>
                            <path path="${run.test.classpath}"/>
                        </classpath>
                        <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                        <jvmarg line="${run.jvmargs}"/>
                        <jvmarg line="${run.jvmargs.ide}"/>
                    </customize>
                </j2seproject3:test-debug-impl>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-testng-debug-impl" if="${testng.available}" name="-init-macrodef-test-debug-testng">
        <macrodef name="test-debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <sequential>
                <j2seproject3:testng-debug-impl testClass="@{testClass}" testMethod="@{testMethod}">
                    <customize2>
                        <syspropertyset>
                            <propertyref prefix="test-sys-prop."/>
                            <mapper from="test-sys-prop.*" to="*" type="glob"/>
                        </syspropertyset>
                    </customize2>
                </j2seproject3:testng-debug-impl>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-test-debug-junit,-init-macrodef-test-debug-testng" name="-init-macrodef-test-debug"/>
    <!--
                pre NB7.2 profiling section; consider it deprecated
            -->
    <target depends="-profile-pre-init, init, -profile-post-init, -profile-init-macrodef-profile, -profile-init-check" if="profiler.info.jvmargs.agent" name="profile-init"/>
    <target if="profiler.info.jvmargs.agent" name="-profile-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="profiler.info.jvmargs.agent" name="-profile-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="profiler.info.jvmargs.agent" name="-profile-init-macrodef-profile">
        <macrodef name="resolve">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${env.@{value}}"/>
            </sequential>
        </macrodef>
        <macrodef name="profile">
            <attribute default="${main.class}" name="classname"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property environment="env"/>
                <resolve name="profiler.current.path" value="${profiler.info.pathvar}"/>
                <java classname="@{classname}" dir="${profiler.info.dir}" failonerror="${java.failonerror}" fork="true" jvm="${profiler.info.jvm}">
                    <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg value="${profiler.info.jvmargs.agent}"/>
                    <jvmarg line="${profiler.info.jvmargs}"/>
                    <env key="${profiler.info.pathvar}" path="${profiler.info.agentpath}:${profiler.current.path}"/>
                    <arg line="${application.args}"/>
                    <classpath>
                        <path path="${run.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target depends="-profile-pre-init, init, -profile-post-init, -profile-init-macrodef-profile" if="profiler.info.jvmargs.agent" name="-profile-init-check">
        <fail unless="profiler.info.jvm">Must set JVM to use for profiling in profiler.info.jvm</fail>
        <fail unless="profiler.info.jvmargs.agent">Must set profiler agent JVM arguments in profiler.info.jvmargs.agent</fail>
    </target>
    <!--
                end of pre NB7.2 profiling section
            -->
    <target depends="-init-debug-args" name="-init-macrodef-nbjpda">
        <macrodef name="nbjpdastart" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${main.class}" name="name"/>
            <attribute default="${debug.classpath}" name="classpath"/>
            <attribute default="" name="stopclassname"/>
            <sequential>
                <nbjpdastart addressproperty="jpda.address" name="@{name}" stopclassname="@{stopclassname}" transport="${debug-transport}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </nbjpdastart>
            </sequential>
        </macrodef>
        <macrodef name="nbjpdareload" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${build.classes.dir}" name="dir"/>
            <sequential>
                <nbjpdareload>
                    <fileset dir="@{dir}" includes="${fix.classes}">
                        <include name="${fix.includes}*.class"/>
                    </fileset>
                </nbjpdareload>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-debug-args">
        <property name="version-output" value="java version &quot;${ant.java.version}"/>
        <condition property="have-jdk-older-than-1.4">
            <or>
                <contains string="${version-output}" substring="java version &quot;1.0"/>
                <contains string="${version-output}" substring="java version &quot;1.1"/>
                <contains string="${version-output}" substring="java version &quot;1.2"/>
                <contains string="${version-output}" substring="java version &quot;1.3"/>
            </or>
        </condition>
        <condition else="-Xdebug" property="debug-args-line" value="-Xdebug -Xnoagent -Djava.compiler=none">
            <istrue value="${have-jdk-older-than-1.4}"/>
        </condition>
        <condition else="dt_socket" property="debug-transport-by-os" value="dt_shmem">
            <os family="windows"/>
        </condition>
        <condition else="${debug-transport-by-os}" property="debug-transport" value="${debug.transport}">
            <isset property="debug.transport"/>
        </condition>
    </target>
    <target depends="-init-debug-args" name="-init-macrodef-debug">
        <macrodef name="debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${debug.classpath}" name="classpath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" failonerror="${java.failonerror}" fork="true">
                    <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <jvmarg value="-Dfile.encoding=${runtime.encoding}"/>
                    <redirector errorencoding="${runtime.encoding}" inputencoding="${runtime.encoding}" outputencoding="${runtime.encoding}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <jvmarg line="${run.jvmargs.ide}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${run.classpath}" name="classpath"/>
            <attribute default="jvm" name="jvm"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" failonerror="${java.failonerror}" fork="true">
                    <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg value="-Dfile.encoding=${runtime.encoding}"/>
                    <redirector errorencoding="${runtime.encoding}" inputencoding="${runtime.encoding}" outputencoding="${runtime.encoding}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <jvmarg line="${run.jvmargs.ide}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-copylibs">
        <macrodef name="copylibs" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${manifest.file}" name="manifest"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
                <pathconvert property="run.classpath.without.build.classes.dir">
                    <path path="${run.classpath}"/>
                    <map from="${build.classes.dir.resolved}" to=""/>
                </pathconvert>
                <pathconvert pathsep=" " property="jar.classpath">
                    <path path="${run.classpath.without.build.classes.dir}"/>
                    <chainedmapper>
                        <flattenmapper/>
                        <filtermapper>
                            <replacestring from=" " to="%20"/>
                        </filtermapper>
                        <globmapper from="*" to="lib/*"/>
                    </chainedmapper>
                </pathconvert>
                <taskdef classname="org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs" classpath="${libs.CopyLibs.classpath}" name="copylibs"/>
                <copylibs compress="${jar.compress}" excludeFromCopy="${copylibs.excludes}" index="${jar.index}" indexMetaInf="${jar.index.metainf}" jarfile="${dist.jar}" manifest="@{manifest}" manifestencoding="UTF-8" rebase="${copylibs.rebase}" runtimeclasspath="${run.classpath.without.build.classes.dir}">
                    <fileset dir="${build.classes.dir}" excludes="${dist.archive.excludes}"/>
                    <manifest>
                        <attribute name="Class-Path" value="${jar.classpath}"/>
                        <customize/>
                    </manifest>
                </copylibs>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-presetdef-jar">
        <presetdef name="jar" uri="http://www.netbeans.org/ns/j2se-project/1">
            <jar compress="${jar.compress}" index="${jar.index}" jarfile="${dist.jar}" manifestencoding="UTF-8">
                <j2seproject1:fileset dir="${build.classes.dir}" excludes="${dist.archive.excludes}"/>
            </jar>
        </presetdef>
    </target>
    <target name="-init-ap-cmdline-properties">
        <property name="annotation.processing.enabled" value="true"/>
        <property name="annotation.processing.processors.list" value=""/>
        <property name="annotation.processing.processor.options" value=""/>
        <property name="annotation.processing.run.all.processors" value="true"/>
        <property name="javac.processorpath" value="${javac.classpath}"/>
        <property name="javac.test.processorpath" value="${javac.test.classpath}"/>
        <condition property="ap.supported.internal" value="true">
            <not>
                <matches pattern="1\.[0-5](\..*)?" string="${javac.source}"/>
            </not>
        </condition>
    </target>
    <target depends="-init-ap-cmdline-properties" if="ap.supported.internal" name="-init-ap-cmdline-supported">
        <condition else="" property="ap.processors.internal" value="-processor ${annotation.processing.processors.list}">
            <isfalse value="${annotation.processing.run.all.processors}"/>
        </condition>
        <condition else="" property="ap.proc.none.internal" value="-proc:none">
            <isfalse value="${annotation.processing.enabled}"/>
        </condition>
    </target>
    <target depends="-init-ap-cmdline-properties,-init-ap-cmdline-supported" name="-init-ap-cmdline">
        <property name="ap.cmd.line.internal" value=""/>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-test,-init-macrodef-test-debug,-init-macrodef-nbjpda,-init-macrodef-debug,-init-macrodef-java,-init-presetdef-jar,-init-ap-cmdline" name="init"/>
    <!--
                ===================
                COMPILATION SECTION
                ===================
            -->
    <target name="-deps-jar-init" unless="built-jar.properties">
        <property location="${build.dir}/built-jar.properties" name="built-jar.properties"/>
        <delete file="${built-jar.properties}" quiet="true"/>
    </target>
    <target if="already.built.jar.${basedir}" name="-warn-already-built-jar">
        <echo level="warn" message="Cycle detected: DirToTxt was already built"/>
    </target>
    <target depends="init,-deps-jar-init" name="deps-jar" unless="no.deps">
        <mkdir dir="${build.dir}"/>
        <touch file="${built-jar.properties}" verbose="false"/>
        <property file="${built-jar.properties}" prefix="already.built.jar."/>
        <antcall target="-warn-already-built-jar"/>
        <propertyfile file="${built-jar.properties}">
            <entry key="${basedir}" value=""/>
        </propertyfile>
    </target>
    <target depends="init,-check-automatic-build,-clean-after-automatic-build" name="-verify-automatic-build"/>
    <target depends="init" name="-check-automatic-build">
        <available file="${build.classes.dir}/.netbeans_automatic_build" property="netbeans.automatic.build"/>
    </target>
    <target depends="init" if="netbeans.automatic.build" name="-clean-after-automatic-build">
        <antcall target="clean"/>
    </target>
    <target depends="init,deps-jar" name="-pre-pre-compile">
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-pre-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="do.depend.true" name="-compile-depend">
        <pathconvert property="build.generated.subdirs">
            <dirset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="*"/>
            </dirset>
        </pathconvert>
        <j2seproject3:depend srcdir="${src.dir}:${build.generated.subdirs}"/>
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile, -copy-persistence-xml,-compile-depend" if="have.sources" name="-do-compile">
        <j2seproject3:javac gensrcdir="${build.generated.sources.dir}"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target if="has.persistence.xml" name="-copy-persistence-xml">
        <mkdir dir="${build.classes.dir}/META-INF"/>
        <copy todir="${build.classes.dir}/META-INF">
            <fileset dir="${meta.inf.dir}" includes="persistence.xml orm.xml"/>
        </copy>
    </target>
    <target name="-post-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile,-do-compile,-post-compile" description="Compile project." name="compile"/>
    <target name="-pre-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-pre-pre-compile" name="-do-compile-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <j2seproject3:force-recompile/>
        <j2seproject3:javac excludes="" gensrcdir="${build.generated.sources.dir}" includes="${javac.includes}" sourcepath="${src.dir}"/>
    </target>
    <target name="-post-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single" name="compile-single"/>
    <!--
                ====================
                JAR BUILDING SECTION
                ====================
            -->
    <target depends="init" name="-pre-pre-jar">
        <dirname file="${dist.jar}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
    </target>
    <target name="-pre-jar">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init" if="do.archive" name="-do-jar-create-manifest" unless="manifest.available">
        <tempfile deleteonexit="true" destdir="${build.dir}" property="tmp.manifest.file"/>
        <touch file="${tmp.manifest.file}" verbose="false"/>
    </target>
    <target depends="init" if="do.archive+manifest.available" name="-do-jar-copy-manifest">
        <tempfile deleteonexit="true" destdir="${build.dir}" property="tmp.manifest.file"/>
        <copy encoding="${manifest.encoding}" file="${manifest.file}" outputencoding="UTF-8" tofile="${tmp.manifest.file}"/>
    </target>
    <target depends="init,-do-jar-create-manifest,-do-jar-copy-manifest" if="do.archive+main.class.available" name="-do-jar-set-mainclass">
        <manifest encoding="UTF-8" file="${tmp.manifest.file}" mode="update">
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
    </target>
    <target depends="init,-do-jar-create-manifest,-do-jar-copy-manifest" if="do.archive+profile.available" name="-do-jar-set-profile">
        <manifest encoding="UTF-8" file="${tmp.manifest.file}" mode="update">
            <attribute name="Profile" value="${javac.profile}"/>
        </manifest>
    </target>
    <target depends="init,-do-jar-create-manifest,-do-jar-copy-manifest" if="do.archive+splashscreen.available" name="-do-jar-set-splashscreen">
        <basename file="${application.splash}" property="splashscreen.basename"/>
        <mkdir dir="${build.classes.dir}/META-INF"/>
        <copy failonerror="false" file="${application.splash}" todir="${build.classes.dir}/META-INF"/>
        <manifest encoding="UTF-8" file="${tmp.manifest.file}" mode="update">
            <attribute name="SplashScreen-Image" value="META-INF/${splashscreen.basename}"/>
        </manifest>
    </target>
    <target depends="init,-init-macrodef-copylibs,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen" if="do.mkdist" name="-do-jar-copylibs">
        <j2seproject3:copylibs manifest="${tmp.manifest.file}"/>
        <echo level="info">To run this application from the command line without Ant, try:</echo>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <echo level="info">java -jar "${dist.jar.resolved}"</echo>
    </target>
    <target depends="init,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen" if="do.archive" name="-do-jar-jar" unless="do.mkdist">
        <j2seproject1:jar manifest="${tmp.manifest.file}"/>
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <pathconvert property="run.classpath.with.dist.jar">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to="${dist.jar.resolved}"/>
        </pathconvert>
        <condition else="" property="jar.usage.message" value="To run this application from the command line without Ant, try:${line.separator}${platform.java} -cp ${run.classpath.with.dist.jar} ${main.class}">
            <isset property="main.class.available"/>
        </condition>
        <condition else="debug" property="jar.usage.level" value="info">
            <isset property="main.class.available"/>
        </condition>
        <echo level="${jar.usage.level}" message="${jar.usage.message}"/>
    </target>
    <target depends="-do-jar-copylibs" if="do.archive" name="-do-jar-delete-manifest">
        <delete>
            <fileset file="${tmp.manifest.file}"/>
        </delete>
    </target>
    <target depends="init,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-do-jar-jar,-do-jar-delete-manifest" name="-do-jar-without-libraries"/>
    <target depends="init,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-do-jar-copylibs,-do-jar-delete-manifest" name="-do-jar-with-libraries"/>
    <target name="-post-jar">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-jar,-do-jar-without-libraries,-do-jar-with-libraries,-post-jar" name="-do-jar"/>
    <target depends="init,compile,-pre-jar,-do-jar,-post-jar" description="Build JAR." name="jar"/>
    <!--
                =================
                EXECUTION SECTION
                =================
            -->
    <target depends="init,compile" description="Run a main class." name="run">
        <j2seproject1:java>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </j2seproject1:java>
    </target>
    <target name="-do-not-recompile">
        <property name="javac.includes.binary" value=""/>
    </target>
    <target depends="init,compile-single" name="run-single">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <j2seproject1:java classname="${run.class}"/>
    </target>
    <target depends="init,compile-test-single" name="run-test-with-main">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <j2seproject1:java classname="${run.class}" classpath="${run.test.classpath}"/>
    </target>
    <!--
                =================
                DEBUGGING SECTION
                =================
            -->
    <target depends="init" if="netbeans.home" name="-debug-start-debugger">
        <j2seproject1:nbjpdastart name="${debug.class}"/>
    </target>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger-main-test">
        <j2seproject1:nbjpdastart classpath="${debug.test.classpath}" name="${debug.class}"/>
    </target>
    <target depends="init,compile" name="-debug-start-debuggee">
        <j2seproject3:debug>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target depends="init,compile,-debug-start-debugger,-debug-start-debuggee" description="Debug project in IDE." if="netbeans.home" name="debug"/>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger-stepinto">
        <j2seproject1:nbjpdastart stopclassname="${main.class}"/>
    </target>
    <target depends="init,compile,-debug-start-debugger-stepinto,-debug-start-debuggee" if="netbeans.home" name="debug-stepinto"/>
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-single">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <j2seproject3:debug classname="${debug.class}"/>
    </target>
    <target depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-single" if="netbeans.home" name="debug-single"/>
    <target depends="init,compile-test-single" if="netbeans.home" name="-debug-start-debuggee-main-test">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <j2seproject3:debug classname="${debug.class}" classpath="${debug.test.classpath}"/>
    </target>
    <target depends="init,compile-test-single,-debug-start-debugger-main-test,-debug-start-debuggee-main-test" if="netbeans.home" name="debug-test-with-main"/>
    <target depends="init" name="-pre-debug-fix">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target depends="init,-pre-debug-fix,compile-single" if="netbeans.home" name="-do-debug-fix">
        <j2seproject1:nbjpdareload/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix" if="netbeans.home" name="debug-fix"/>
    <!--
                =================
                PROFILING SECTION
                =================
            -->
    <!--
                pre NB7.2 profiler integration
            -->
    <target depends="profile-init,compile" description="Profile a project in the IDE." if="profiler.info.jvmargs.agent" name="-profile-pre72">
        <fail unless="netbeans.home">This target only works when run from inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <path path="${run.classpath}"/>
            </classpath>
        </nbprofiledirect>
        <profile/>
    </target>
    <target depends="profile-init,compile-single" description="Profile a selected class in the IDE." if="profiler.info.jvmargs.agent" name="-profile-single-pre72">
        <fail unless="profile.class">Must select one file in the IDE or set profile.class</fail>
        <fail unless="netbeans.home">This target only works when run from inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <path path="${run.classpath}"/>
            </classpath>
        </nbprofiledirect>
        <profile classname="${profile.class}"/>
    </target>
    <target depends="profile-init,compile-single" if="profiler.info.jvmargs.agent" name="-profile-applet-pre72">
        <fail unless="netbeans.home">This target only works when run from inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <path path="${run.classpath}"/>
            </classpath>
        </nbprofiledirect>
        <profile classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </profile>
    </target>
    <target depends="profile-init,compile-test-single" if="profiler.info.jvmargs.agent" name="-profile-test-single-pre72">
        <fail unless="netbeans.home">This target only works when run from inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <path path="${run.test.classpath}"/>
            </classpath>
        </nbprofiledirect>
        <junit dir="${profiler.info.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" jvm="${profiler.info.jvm}" showoutput="true">
            <env key="${profiler.info.pathvar}" path="${profiler.info.agentpath}:${profiler.current.path}"/>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg line="${profiler.info.jvmargs}"/>
            <test name="${profile.class}"/>
            <classpath>
                <path path="${run.test.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper from="test-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
        </junit>
    </target>
    <!--
                end of pre NB72 profiling section
            -->
    <target if="netbeans.home" name="-profile-check">
        <condition property="profiler.configured">
            <or>
                <contains casesensitive="true" string="${run.jvmargs.ide}" substring="-agentpath:"/>
                <contains casesensitive="true" string="${run.jvmargs.ide}" substring="-javaagent:"/>
            </or>
        </condition>
    </target>
    <target depends="-profile-check,-profile-pre72" description="Profile a project in the IDE." if="profiler.configured" name="profile" unless="profiler.info.jvmargs.agent">
        <startprofiler/>
        <antcall target="run"/>
    </target>
    <target depends="-profile-check,-profile-single-pre72" description="Profile a selected class in the IDE." if="profiler.configured" name="profile-single" unless="profiler.info.jvmargs.agent">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <startprofiler/>
        <antcall target="run-single"/>
    </target>
    <target depends="-profile-test-single-pre72" description="Profile a selected test in the IDE." name="profile-test-single"/>
    <target depends="-profile-check" description="Profile a selected test in the IDE." if="profiler.configured" name="profile-test" unless="profiler.info.jvmargs">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <startprofiler/>
        <antcall target="test-single"/>
    </target>
    <target depends="-profile-check" description="Profile a selected class in the IDE." if="profiler.configured" name="profile-test-with-main">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <startprofiler/>
        <antcall target="run-test-with-main"/>
    </target>
    <target depends="-profile-check,-profile-applet-pre72" if="profiler.configured" name="profile-applet" unless="profiler.info.jvmargs.agent">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <startprofiler/>
        <antcall target="run-applet"/>
    </target>
    <!--
                ===============
                JAVADOC SECTION
                ===============
            -->
    <target depends="init" if="have.sources" name="-javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <condition else="" property="javadoc.endorsed.classpath.cmd.line.arg" value="-J${endorsed.classpath.cmd.line.arg}">
            <and>
                <isset property="endorsed.classpath.cmd.line.arg"/>
                <not>
                    <equals arg1="${endorsed.classpath.cmd.line.arg}" arg2=""/>
                </not>
            </and>
        </condition>
        <condition else="" property="bug5101868workaround" value="*.java">
            <matches pattern="1\.[56](\..*)?" string="${java.version}"/>
        </condition>
        <javadoc additionalparam="-J-Dfile.encoding=${file.encoding} ${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <fileset dir="${src.dir}" excludes="${bug5101868workaround},${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/*.java"/>
                <exclude name="*.java"/>
            </fileset>
            <arg line="${javadoc.endorsed.classpath.cmd.line.arg}"/>
        </javadoc>
        <copy todir="${dist.javadoc.dir}">
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/doc-files/**"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/doc-files/**"/>
            </fileset>
        </copy>
    </target>
    <target depends="init,-javadoc-build" if="netbeans.home" name="-javadoc-browse" unless="no.javadoc.preview">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target depends="init,-javadoc-build,-javadoc-browse" description="Build Javadoc." name="javadoc"/>
    <!--
                =========================
                TEST COMPILATION SECTION
                =========================
            -->
    <target depends="init,compile" if="have.tests" name="-pre-pre-compile-test">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    <target name="-pre-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="do.depend.true" name="-compile-test-depend">
        <j2seproject3:depend classpath="${javac.test.classpath}" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
    </target>
    <target depends="init,deps-jar,compile,-pre-pre-compile-test,-pre-compile-test,-compile-test-depend" if="have.tests" name="-do-compile-test">
        <j2seproject3:javac apgeneratedsrcdir="${build.test.classes.dir}" classpath="${javac.test.classpath}" debug="true" destdir="${build.test.classes.dir}" processorpath="${javac.test.processorpath}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test" name="compile-test"/>
    <target name="-pre-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,compile,-pre-pre-compile-test,-pre-compile-test-single" if="have.tests" name="-do-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <j2seproject3:force-recompile destdir="${build.test.classes.dir}"/>
        <j2seproject3:javac apgeneratedsrcdir="${build.test.classes.dir}" classpath="${javac.test.classpath}" debug="true" destdir="${build.test.classes.dir}" excludes="" includes="${javac.includes}" processorpath="${javac.test.processorpath}" sourcepath="${test.src.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single" name="compile-test-single"/>
    <!--
                =======================
                TEST EXECUTION SECTION
                =======================
            -->
    <target depends="init" if="have.tests" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <j2seproject3:test includes="${includes}" testincludes="**/*Test.java"/>
    </target>
    <target depends="init,compile-test,-pre-test-run,-do-test-run" if="have.tests" name="-post-test-run">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    <target depends="init" if="have.tests" name="test-report"/>
    <target depends="init" if="netbeans.home+have.tests" name="-test-browse"/>
    <target depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests." name="test"/>
    <target depends="init" if="have.tests" name="-pre-test-run-single">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <j2seproject3:test excludes="" includes="${test.includes}" testincludes="${test.includes}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single" if="have.tests" name="-post-test-run-single">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test." name="test-single"/>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single-method">
        <fail unless="test.class">Must select some files in the IDE or set test.class</fail>
        <fail unless="test.method">Must select some method in the IDE or set test.method</fail>
        <j2seproject3:test excludes="" includes="${javac.includes}" testincludes="${test.class}" testmethods="${test.method}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single-method" if="have.tests" name="-post-test-run-single-method">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single-method,-post-test-run-single-method" description="Run single unit test." name="test-single-method"/>
    <!--
                =======================
                TEST DEBUGGING SECTION
                =======================
            -->
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-debug-start-debuggee-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <j2seproject3:test-debug excludes="" includes="${javac.includes}" testClass="${test.class}" testincludes="${javac.includes}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-debug-start-debuggee-test-method">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <fail unless="test.method">Must select some method in the IDE or set test.method</fail>
        <j2seproject3:test-debug excludes="" includes="${javac.includes}" testClass="${test.class}" testMethod="${test.method}" testincludes="${test.class}" testmethods="${test.method}"/>
    </target>
    <target depends="init,compile-test" if="netbeans.home+have.tests" name="-debug-start-debugger-test">
        <j2seproject1:nbjpdastart classpath="${debug.test.classpath}" name="${test.class}"/>
    </target>
    <target depends="init,compile-test-single,-debug-start-debugger-test,-debug-start-debuggee-test" name="debug-test"/>
    <target depends="init,compile-test-single,-debug-start-debugger-test,-debug-start-debuggee-test-method" name="debug-test-method"/>
    <target depends="init,-pre-debug-fix,compile-test-single" if="netbeans.home" name="-do-debug-fix-test">
        <j2seproject1:nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix-test" if="netbeans.home" name="debug-fix-test"/>
    <!--
                =========================
                APPLET EXECUTION SECTION
                =========================
            -->
    <target depends="init,compile-single" name="run-applet">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <j2seproject1:java classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </j2seproject1:java>
    </target>
    <!--
                =========================
                APPLET DEBUGGING  SECTION
                =========================
            -->
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-applet">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <j2seproject3:debug classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-applet" if="netbeans.home" name="debug-applet"/>
    <!--
                ===============
                CLEANUP SECTION
                ===============
            -->
    <target name="-deps-clean-init" unless="built-clean.properties">
        <property location="${build.dir}/built-clean.properties" name="built-clean.properties"/>
        <delete file="${built-clean.properties}" quiet="true"/>
    </target>
    <target if="already.built.clean.${basedir}" name="-warn-already-built-clean">
        <echo level="warn" message="Cycle detected: DirToTxt was already built"/>
    </target>
    <target depends="init,-deps-clean-init" name="deps-clean" unless="no.deps">
        <mkdir dir="${build.dir}"/>
        <touch file="${built-clean.properties}" verbose="false"/>
        <property file="${built-clean.properties}" prefix="already.built.clean."/>
        <antcall target="-warn-already-built-clean"/>
        <propertyfile file="${built-clean.properties}">
            <entry key="${basedir}" value=""/>
        </propertyfile>
    </target>
    <target depends="init" name="-do-clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}" followsymlinks="false" includeemptydirs="true"/>
    </target>
    <target name="-post-clean">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-clean,-do-clean,-post-clean" description="Clean build products." name="clean"/>
    <target name="-check-call-dep">
        <property file="${call.built.properties}" prefix="already.built."/>
        <condition property="should.call.dep">
            <and>
                <not>
                    <isset property="already.built.${call.subproject}"/>
                </not>
                <available file="${call.script}"/>
            </and>
        </condition>
    </target>
    <target depends="-check-call-dep" if="should.call.dep" name="-maybe-call-dep">
        <ant antfile="${call.script}" inheritall="false" target="${call.target}">
            <propertyset>
                <propertyref prefix="transfer."/>
                <mapper from="transfer.*" to="*" type="glob"/>
            </propertyset>
        </ant>
    </target>
</project>

*** end *** end ***
***$$$@@@ /nbproject/project.properties
annotation.processing.enabled=true
annotation.processing.enabled.in.editor=false
annotation.processing.processor.options=
annotation.processing.processors.list=
annotation.processing.run.all.processors=true
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
build.classes.dir=${build.dir}/classes
build.classes.excludes=**/*.java,**/*.form
# This directory is removed when the project is cleaned:
build.dir=build
build.generated.dir=${build.dir}/generated
build.generated.sources.dir=${build.dir}/generated-sources
# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
# Uncomment to specify the preferred debugger connection transport:
#debug.transport=dt_socket
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}
# Files in build.classes.dir which should be excluded from distribution jar
dist.archive.excludes=
# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/DirToTxt.jar
dist.javadoc.dir=${dist.dir}/javadoc
excludes=
includes=**
jar.compress=false
javac.classpath=
# Space-separated list of extra javac options
javac.compilerargs=
javac.deprecation=false
javac.external.vm=true
javac.processorpath=\
    ${javac.classpath}
javac.source=1.8
javac.target=1.8
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
javac.test.processorpath=\
    ${javac.test.classpath}
javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=${source.encoding}
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
main.class=dirtotxt.DirToTxt
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
mkdist.disabled=false
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project.
# You may also define separate properties like run-sys-prop.name=value instead of -Dname=value.
# To set system properties for unit tests define test-sys-prop.name=value:
run.jvmargs=
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
source.encoding=UTF-8
src.dir=src
test.src.dir=test

*** end *** end ***
***$$$@@@ /nbproject/genfiles.properties
build.xml.data.CRC32=5453d9ac
build.xml.script.CRC32=7c1fd0df
build.xml.stylesheet.CRC32=8064a381@1.80.1.48
# This file is used by a NetBeans-based IDE to track changes in generated files such as build-impl.xml.
# Do not edit this file. You may delete it but then the IDE will never regenerate such files for you.
nbproject/build-impl.xml.data.CRC32=5453d9ac
nbproject/build-impl.xml.script.CRC32=2adcb704
nbproject/build-impl.xml.stylesheet.CRC32=830a3534@1.80.1.48

*** end *** end ***
***$$$@@@ /nbproject/project.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://www.netbeans.org/ns/project/1">
    <type>org.netbeans.modules.java.j2seproject</type>
    <configuration>
        <data xmlns="http://www.netbeans.org/ns/j2se-project/3">
            <name>DirToTxt</name>
            <source-roots>
                <root id="src.dir"/>
            </source-roots>
            <test-roots>
                <root id="test.src.dir"/>
            </test-roots>
        </data>
    </configuration>
</project>

*** end *** end ***
***$$$@@@ /nbproject/private/private.properties
compile.on.save=true
user.properties.file=/Users/almatarm/Library/Application Support/NetBeans/8.2/build.properties

*** end *** end ***
***$$$@@@ /mybatishelper/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.almatarm</groupId>
    <artifactId>MyBatisHelper</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    <repositories>
        <repository>
            <id>unknown-jars-temp-repo</id>
            <name>A temporary repository created by NetBeans for libraries and jars it could not identify. Please replace the dependencies in this repository with correct ones and delete this repository.</name>
            <url>file:${project.basedir}/lib</url>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>unknown.binary</groupId>
            <artifactId>AbsoluteLayout</artifactId>
            <version>SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
            <version>1.7</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>net.java.dev.inflector</groupId>
            <artifactId>inflector</artifactId>
            <version>0.7.0</version>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
</project>

*** end *** end ***
***$$$@@@ /mybatishelper/src/main/resources/mybatis-service
#*
            ____                  _          ___                 _ 
           / ___|  ___ _ ____   _(_) ___ ___|_ _|_ __ ___  _ __ | |
           \___ \ / _ \ '__\ \ / / |/ __/ _ \| || '_ ` _ \| '_ \| |
            ___) |  __/ |   \ V /| | (_|  __/| || | | | | | |_) | |
           |____/ \___|_|    \_/ |_|\___\___|___|_| |_| |_| .__/|_|
                                               |_|      
*#		
    //**************************************************************************
    // ${Dbo} ServiceImpl
    //**************************************************************************
#*  ############################################################################
                                    Get All
*#  ############################################################################
  
    @Override
    public List<${Type}> get${Dbos}() {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            return ${dObj.mapperL}.get${Dbos}();
	} finally {
            sqlSession.close();
	}
    }

#foreach ($field in ${dObj.getCollectionFields()})
    @Override
    public List<${Type}> get${Dbos}With${field.propertyU}() {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);    
            List<${Type}> $Util.toSmall(${Dbos}) = ${dObj.mapperL}.get${Dbos}With${field.propertyU}();
            for(${Type} ${dbo} : $Util.toSmall(${Dbos})) {
                update${Dbo}${field.propertyU}(${dbo});
            }
            return $Util.toSmall(${Dbos});
	} finally {
            sqlSession.close();
	}
    }

    private void update${Dbo}${field.propertyU}(${Type} ${dbo}) {
        for(${field.javaType} $Util.toSmall(${field.javaType}) : ${dbo}.getTags()) {
            ${Util.toSmall(${field.javaType})}.set${Dbo}(${dbo});
        }
    }
#end
#*  ############################################################################
                                  Select Alone 
*#  ############################################################################
#foreach ($field in ${dObj.getSelectAloneFields()})

    @Override
    public List<${field.javaType}> get${Dbo}$Noun.pluralOf(${field.propertyU})List() {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            return ${dObj.mapperL}.get${Dbo}$Noun.pluralOf(${field.propertyU})List();
        } finally {
            sqlSession.close();
	}
    }
#end
#*  ############################################################################
                                    Searchable
*#  ############################################################################
#if ( ${dObj.hasSearchableFields()} )
#if ( !${dObj.isSearchableUnique()} )
    
    @Override
    public List<${Type}> find${Dbos}(${Type} ${dbo}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            return ${dObj.mapperL}.find${Dbos}(${dbo});
        } finally {
            sqlSession.close();
	}
    }

#foreach ($field in ${dObj.getCollectionFields()})
    @Override
    public List<${Type}> find${Dbos}With${field.propertyU}(${Type} ${dbo}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            List<${Type}> $Util.toSmall(${Dbos}) = ${dObj.mapperL}.find${Dbos}With${field.propertyU}(${dbo});
            for(${Type} a${Dbo} : $Util.toSmall(${Dbos})) {
                update${Dbo}${field.propertyU}(a${Dbo});
            }
            return $Util.toSmall(${Dbos});
        } finally {
            sqlSession.close();
	}
    }
#end
#end

    @Override
    public List<${Type}> find${Dbos}Like(${Type} ${dbo}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            return ${dObj.mapperL}.find${Dbos}Like(${dbo});
        } finally {
            sqlSession.close();
	}
    }

#foreach ($field in ${dObj.getCollectionFields()})
    @Override
    public List<${Type}> find${Dbos}With${field.propertyU}Like(${Type} ${dbo}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            List<${Type}> $Util.toSmall(${Dbos}) = ${dObj.mapperL}.find${Dbos}With${field.propertyU}Like(${dbo});
            for(${Type} a${Dbo} : $Util.toSmall(${Dbos})) {
                update${Dbo}${field.propertyU}(a${Dbo});
            }
            return $Util.toSmall(${Dbos});
        } finally {
            sqlSession.close();
	}
    }
#end
#end
#*  ############################################################################
                                     Find By 
*#  ############################################################################
#foreach ($field in ${dObj.getFindByFields()})

    @Override
#if( ${field.unique} ) 
    public ${Type} find${Dbo}By${field.propertyU}(${field.javaType} ${field.property}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class);
            return ${dObj.mapperL}.find${Dbo}By${field.propertyU}(${field.property});
#else 
    public List<${Type}> find${Dbos}By${field.propertyU}(${field.javaType} ${field.property}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class); 
            ${Type} ${dbo} = new ${Type}();
            ${dbo}.set${field.propertyU}(${field.property});
            return find${Dbos}(${dbo});
#end
        } finally {
            sqlSession.close();
	}
    }

#foreach ($cfield in ${dObj.getCollectionFields()})
    @Override
#if( ${field.unique} ) 
    public ${Type} find${Dbo}With${cfield.propertyU}By${field.propertyU}(${field.javaType} ${field.property}) { 
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class); 
            ${Type} ${dbo} = ${dObj.mapperL}.find${Dbo}With${cfield.propertyU}By${field.propertyU}(${field.property});
            update${Dbo}${cfield.propertyU}(${dbo});
            return ${dbo};
#else 
    public List<${Type}> find${Dbos}With${cfield.propertyU}By${field.propertyU}(${field.javaType} ${field.property}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class); 
            ${Type} ${dbo} = new ${Dbo}();
            ${dbo}.set${field.propertyU}(${field.property});
        
            List<${Type}> $Util.toSmall(${Dbos}) = find${Dbos}With${cfield.propertyU}(${dbo});
            for(${Type} ${dbo} : $Util.toSmall(${Dbos})) {
                update${Dbo}${field.propertyU}(${dbo});
            }
            return $Util.toSmall(${Dbos});
#end
        } finally {
            sqlSession.close();
	}
    }
#end
#end

#*  ############################################################################
                            Insert, Update & Delete
*#  ############################################################################ 
    
    @Override
    public ${Type} save${Dbo}(${Type} ${dbo}) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class); 
            if(${dbo}.getId() == null) {
                ${dObj.mapperL}.insert${Dbo}(${dbo});
            } else {
                ${dObj.mapperL}.update${Dbo}(${dbo});
            }
            sqlSession.commit();
            return ${dbo};
        } finally {
            sqlSession.close();
	}
    }

    @Override
    public void delete${Dbo}(Long id) {
        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        try {
            ${dObj.mapper} ${dObj.mapperL} = sqlSession.getMapper(${dObj.mapper}.class); 
            ${dObj.mapperL}.delete${Dbo}(id);
            sqlSession.commit();
        } finally {
            sqlSession.close();
	}
    }    

*** end *** end ***
***$$$@@@ /mybatishelper/src/main/resources/Service
#*
                    ____                  _          
                   / ___|  ___ _ ____   _(_) ___ ___ 
                   \___ \ / _ \ '__\ \ / / |/ __/ _ \
                    ___) |  __/ |   \ V /| | (_|  __/
                   |____/ \___|_|    \_/ |_|\___\___|

*#
    //**************************************************************************
    // ${Dbo} Service
    //**************************************************************************
#*  ############################################################################
                                    Get All
*#  ############################################################################

    public List<${Type}> get${Dbos}();
#foreach ($field in ${dObj.getCollectionFields()})
    
    public List<${Type}> get${Dbos}With${field.propertyU}();
#end
#*  ############################################################################
                                  Select Alone 
*#  ############################################################################
#foreach ($field in ${dObj.getSelectAloneFields()})

    public List<${field.javaType}> get${Dbo}$Noun.pluralOf(${field.propertyU})List();
#end
#*  ############################################################################
                                    Searchable
*#  ############################################################################
#if ( ${dObj.hasSearchableFields()} )
#if ( !${dObj.isSearchableUnique()} )    

    public List<${Type}> find${Dbos}(${Type} ${dbo});

#foreach ($field in ${dObj.getCollectionFields()})
    public List<${Type}> find${Dbos}With${field.propertyU}(${Type} ${dbo});
#end
#end

    public List<${Type}> find${Dbos}Like(${Type} ${dbo});
    
#foreach ($field in ${dObj.getCollectionFields()})
    public List<${Type}> find${Dbos}With${field.propertyU}Like(${Type} ${dbo});
#end
#end
#*  ############################################################################
                                     Find By 
*#  ############################################################################
#foreach ($field in ${dObj.getFindByFields()})
#if( ${field.unique} ) #set ( $rType = ${Type} ) #else #set ( $rType = "List<$Type>" ) #end
#if( ${field.unique} ) #set ( $DBO = ${Dbo} )   #else #set ( $DBO = ${Dbos} )        #end

    public ${rType} find${DBO}By${field.propertyU}(${field.javaType} ${field.property});
#foreach ($cfield in ${dObj.getCollectionFields()})

    public ${rType} find${DBO}With${cfield.propertyU}By${field.propertyU}(${field.javaType} ${field.property});
#end
#end
#*  ############################################################################
                            Insert, Update & Delete
*#  ############################################################################ 

    public ${Type} save${Dbo}(${Type} ${dbo});
    
    public void delete${Dbo}(Long id);

#*
            ____                  _          ___                 _ 
           / ___|  ___ _ ____   _(_) ___ ___|_ _|_ __ ___  _ __ | |
           \___ \ / _ \ '__\ \ / / |/ __/ _ \| || '_ ` _ \| '_ \| |
            ___) |  __/ |   \ V /| | (_|  __/| || | | | | | |_) | |
           |____/ \___|_|    \_/ |_|\___\___|___|_| |_| |_| .__/|_|
                                               |_|      
*#		
    //**************************************************************************
    // ${Dbo} ServiceImpl
    //**************************************************************************
#*  ############################################################################
                                    Get All
*#  ############################################################################
    
    @Autowired
    private ${dObj.mapper} ${dObj.mapperL};

    @Override
    public List<${Type}> get${Dbos}() {
        return ${dObj.mapperL}.get${Dbos}();
    }

#foreach ($field in ${dObj.getCollectionFields()})
    @Override
    public List<${Type}> get${Dbos}With${field.propertyU}() {
        List<${Type}> $Util.toSmall(${Dbos}) = ${dObj.mapperL}.get${Dbos}With${field.propertyU}();
        for(${Type} ${dbo} : $Util.toSmall(${Dbos})) {
            update${Dbo}${field.propertyU}(${dbo});
        }
        return $Util.toSmall(${Dbos});
    }

    private void update${Dbo}${field.propertyU}(${Type} ${dbo}) {
        for(${field.javaType} $Util.toSmall(${field.javaType}) : ${dbo}.getTags()) {
            ${Util.toSmall(${field.javaType})}.set${Dbo}(${dbo});
        }
    }
#end
#*  ############################################################################
                                  Select Alone 
*#  ############################################################################
#foreach ($field in ${dObj.getSelectAloneFields()})

    @Override
    public List<${field.javaType}> get${Dbo}$Noun.pluralOf(${field.propertyU})List() {
        return ${dObj.mapperL}.get${Dbo}$Noun.pluralOf(${field.propertyU})List();
    }
#end
#*  ############################################################################
                                    Searchable
*#  ############################################################################
#if ( ${dObj.hasSearchableFields()} )
#if ( !${dObj.isSearchableUnique()} )
    
    @Override
    public List<${Type}> find${Dbos}(${Type} ${dbo}) {
        return ${dObj.mapperL}.find${Dbos}(${dbo});
    }

#foreach ($field in ${dObj.getCollectionFields()})
    @Override
    public List<${Type}> find${Dbos}With${field.propertyU}(${Type} ${dbo}) {
        List<${Type}> $Util.toSmall(${Dbos}) = ${dObj.mapperL}.find${Dbos}With${field.propertyU}(${dbo});
        for(${Type} a${Dbo} : $Util.toSmall(${Dbos})) {
            update${Dbo}${field.propertyU}(a${Dbo});
        }
        return $Util.toSmall(${Dbos});
    }
#end
#end

    @Override
    public List<${Type}> find${Dbos}Like(${Type} ${dbo}) {
        return ${dObj.mapperL}.find${Dbos}Like(${dbo});
    }

#foreach ($field in ${dObj.getCollectionFields()})
    @Override
    public List<${Type}> find${Dbos}With${field.propertyU}Like(${Type} ${dbo}) {
        List<${Type}> $Util.toSmall(${Dbos}) = ${dObj.mapperL}.find${Dbos}With${field.propertyU}Like(${dbo});
        for(${Type} a${Dbo} : $Util.toSmall(${Dbos})) {
            update${Dbo}${field.propertyU}(a${Dbo});
        }
        return $Util.toSmall(${Dbos});
    }
#end
#end
#*  ############################################################################
                                     Find By 
*#  ############################################################################
#foreach ($field in ${dObj.getFindByFields()})

    @Override
#if( ${field.unique} ) 
    public ${Type} find${Dbo}By${field.propertyU}(${field.javaType} ${field.property}) {
        return ${dObj.mapperL}.find${Dbo}By${field.propertyU}(${field.property});
#else 
    public List<${Type}> find${Dbos}By${field.propertyU}(${field.javaType} ${field.property}) {
        ${Type} ${dbo} = new ${Type}();
        ${dbo}.set${field.propertyU}(${field.property});
        return find${Dbos}(${dbo});
#end
    }

#foreach ($cfield in ${dObj.getCollectionFields()})
    @Override
#if( ${field.unique} ) 
    public ${Type} find${Dbo}With${cfield.propertyU}By${field.propertyU}(${field.javaType} ${field.property}) {
        ${Type} ${dbo} = ${dObj.mapperL}.find${Dbo}With${cfield.propertyU}By${field.propertyU}(${field.property});
        update${Dbo}${cfield.propertyU}(${dbo});
        return ${dbo};
#else 
    public List<${Type}> find${Dbos}With${cfield.propertyU}By${field.propertyU}(${field.javaType} ${field.property}) {
        ${Type} ${dbo} = new ${Dbo}();
        ${dbo}.set${field.propertyU}(${field.property});
        
        List<${Type}> $Util.toSmall(${Dbos}) = find${Dbos}With${cfield.propertyU}(${dbo});
        for(${Type} ${dbo} : $Util.toSmall(${Dbos})) {
            update${Dbo}${field.propertyU}(${dbo});
        }
        return $Util.toSmall(${Dbos});
#end
    }
#end
#end

#*  ############################################################################
                            Insert, Update & Delete
*#  ############################################################################ 
    
    @Override
    public ${Type} save${Dbo}(${Type} ${dbo}) {
        if(${dbo}.getId() == null) {
            ${dObj.mapperL}.insert${Dbo}(${dbo});
        } else {
            ${dObj.mapperL}.update${Dbo}(${dbo});
        }
        return ${dbo};
    }

    @Override
    public void delete${Dbo}(Long id) {
        ${dObj.mapperL}.delete${Dbo}(id);
    }


#*
                        __  __                             
                       |  \/  | __ _ _ __  _ __   ___ _ __ 
                       | |\/| |/ _` | '_ \| '_ \ / _ \ '__|
                       | |  | | (_| | |_) | |_) |  __/ |   
                       |_|  |_|\__,_| .__/| .__/ \___|_|   
                                    |_|   |_|              
*#
    //**************************************************************************
    // ${Dbo} Mapper
    //**************************************************************************
#*  ############################################################################
                                    Get All
*#  ############################################################################
    
    public List<${Type}> get${Dbos}();
#foreach ($field in ${dObj.getCollectionFields()})

    public List<${Type}> get${Dbos}With${field.propertyU}();
#end
#*  ############################################################################
                                  Select Alone 
*#  ############################################################################
#foreach ($field in ${dObj.getSelectAloneFields()})

    public List<${field.javaType}> get${Dbo}$Noun.pluralOf(${field.propertyU})List();
#end
#*  ############################################################################
                                    Searchable
*#  ############################################################################
#if ( ${dObj.hasSearchableFields()} )
#if ( !${dObj.isSearchableUnique()} )

    public List<${Type}> find${Dbos}(${Type} ${dbo});

#foreach ($field in ${dObj.getCollectionFields()})
    public List<${Type}> find${Dbos}With${field.propertyU}(${Type} ${dbo});
#end
#end

    public List<${Type}> find${Dbos}Like(${Type} ${dbo});
#foreach ($field in ${dObj.getCollectionFields()})
    
    public List<${Type}> find${Dbos}With${field.propertyU}Like(${Type} ${dbo});
#end
#end
#*  ############################################################################
                                     Find By 
*#  ############################################################################
#foreach ($field in ${dObj.getFindByFields()})
#if( ${field.unique} ) 
    
    public ${Type} find${Dbo}By${field.propertyU}(${field.javaType} ${field.property});

#foreach ($cfield in ${dObj.getCollectionFields()})
    public ${Type} find${Dbo}With${cfield.propertyU}By${field.propertyU}(${field.javaType} ${field.property});
#end
#end
#end

#*  ############################################################################
                            Insert, Update & Delete
*#  ############################################################################ 

    public void insert${Dbo}(${Type} ${dbo});

    public void update${Dbo}(${Type} ${dbo});

    public void delete${Dbo}(Long id);

#*
                __  __                              __  ____  __ _     
               |  \/  | __ _ _ __  _ __   ___ _ __  \ \/ /  \/  | |    
               | |\/| |/ _` | '_ \| '_ \ / _ \ '__|  \  /| |\/| | |    
               | |  | | (_| | |_) | |_) |  __/ |     /  \| |  | | |___ 
               |_|  |_|\__,_| .__/| .__/ \___|_|    /_/\_\_|  |_|_____|
                            |_|   |_|                                  

*#
    //**************************************************************************
    // ${Dbo} Mapper XML
    //**************************************************************************
#*  ############################################################################
                                    Get All
*#  ############################################################################

#macro( columns_list )
#if(${dObj.hasAssociationField()}) 
${dObj.QualifedColumnsList}
#else 
${dObj.ColumnsList}
#end
#end

#macro( association_joins  $last_statement)
#foreach ($field in ${dObj.getAssociationFields()})
        LEFT OUTER JOIN ${field.dObj.Table} ON ${dObj.Table}.${field.Column} = ${field.dObj.Table}.${field.dObj.IdField.Column}#if( !$foreach.hasNext && $last_statement );$new_line#else $new_line#end
#end
#end

    <select id="get${Dbos}" resultMap="${ResultMap}">
        SELECT
            #columns_list()
        FROM 
            ${dObj.Table}
#association_joins(true)
     </select>
    
#foreach ($field in ${dObj.getCollectionFields()})
    <select id="get${Dbos}With${field.propertyU}" resultMap="${ResultMap}">
        SELECT
            #columns_list()
        FROM 
            ${dObj.Table}
#association_joins(false)
        LEFT OUTER JOIN ${field.dObj.Table} ON ${dObj.Table}.ID = ${field.dObj.Table}.${field.fKey};
    </select>    
#end
#*  ############################################################################
                                  Select Alone 
*#  ############################################################################
#foreach ($field in ${dObj.getSelectAloneFields()})

    <select id="get${Dbo}$Noun.pluralOf(${field.propertyU})List"  resultType="${field.javaType}">
        SELECT DISTINCT 
            ${field.column}
        FROM 
            ${dObj.Table}    
    </select>
#end
#*  ############################################################################
                                    Searchable
*#  ############################################################################
#if ( ${dObj.hasSearchableFields()} )
#if ( !${dObj.isSearchableUnique()} )
   
    <select id="find${Dbos}" resultMap="${ResultMap}">
        SELECT
            #columns_list()
        FROM
            ${dObj.Table}
#association_joins(false)
        <where>
#foreach ($sfield in ${dObj.getSearchableFields()})
            <if test="${sfield.property} != null">
                ${dObj.Table}.${sfield.column} = #{${sfield.property}}
            </if>
#end
        </where>
    </select>
    
#foreach ($field in ${dObj.getCollectionFields()})
    <select id="find${Dbos}With${field.propertyU}" resultMap="${ResultMap}">
        SELECT
${dObj.qualifedColumnsList},
${field.qualifedColumnsList}
        FROM 
            ${dObj.Table}
        LEFT OUTER JOIN 
            ${field.dObj.Table} 
        ON 
            ${dObj.Table}.ID = ${field.dObj.Table}.${field.fKey}
        <where>
#foreach ($sfield in ${dObj.getSearchableFields()})
            <if test="${sfield.property} != null">
                ${dObj.Table}.${sfield.column} = #{${sfield.property}}
            </if>
#end
        </where>
    </select>    
#end
#end

    <select id="find${Dbos}Like" resultMap="${ResultMap}">
        SELECT
            #columns_list()
        FROM
            ${dObj.Table}
#association_joins(false)
        <where>
#foreach ($sfield in ${dObj.getSearchableFields()})
            <if test="${sfield.property} != null">
                ${dObj.Table}.${sfield.column} LIKE #{${sfield.property}}
            </if>
#end
        </where>
    </select>
    
#foreach ($field in ${dObj.getCollectionFields()})
    <select id="find${Dbos}With${field.propertyU}Like" resultMap="${ResultMap}">
        SELECT
${dObj.qualifedColumnsList},
${field.qualifedColumnsList}
        FROM 
            ${dObj.Table}
        LEFT OUTER JOIN 
            ${field.dObj.Table} 
        ON 
            ${dObj.Table}.ID = ${field.dObj.Table}.${field.fKey}
        <where>
#foreach ($sfield in ${dObj.getSearchableFields()})
            <if test="${sfield.property} != null">
                ${dObj.Table}.${sfield.column} LIKE #{${sfield.property}}
            </if>
#end
        </where>
    </select>    
#end
#end
#*  ############################################################################
                                     Find By 
*#  ############################################################################
#foreach ($field in ${dObj.getFindByFields()})
#if( ${field.unique} ) 
    
    <select id="find${Dbo}By${field.propertyU}" parameterType="${field.javaType}" resultMap="${ResultMap}">
        SELECT
            #columns_list()
        FROM
            ${dObj.Table}
#association_joins(false)
        WHERE
            ${field.column} = #{${field.property}}
    </select>

#foreach ($cfield in ${dObj.getCollectionFields()})
    <select id="find${Dbo}With${cfield.propertyU}By${field.propertyU}" parameterType="${field.javaType}" 
        resultMap="${ResultMap}">
        SELECT
${dObj.qualifedColumnsList},
${cfield.qualifedColumnsList}
        FROM 
            ${dObj.Table}
        LEFT OUTER JOIN 
            ${cfield.dObj.Table} 
        ON 
            ${dObj.Table}.ID = ${cfield.dObj.Table}.${cfield.fKey}
        WHERE
            ${dObj.Table}.${field.column} = #{${field.property}}
    </select>    
#end
#end
#end

#*  ############################################################################
                            Insert, Update & Delete
*#  ############################################################################ 

    <insert id="insert${Dbo}" parameterType="${dObj.Type}" useGeneratedKeys="true" 
            keyProperty="id">
        INSERT INTO 
            ${Table} (${dObj.ColumnListInsert}) 
        VALUES 
            (${PropListInsertNoID})    
    </insert>
     
    <update id="update${Dbo}" parameterType="${Type}">
        UPDATE ${dObj.Table} SET
${dObj.UpdateList}
        WHERE 
            ID = #{id}
    </update> 
        
    <delete id="delete${Dbo}" parameterType="long">
        DELETE FROM ${Table} WHERE ID = #{id}
    </delete>
    
    

*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/Gen.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.mybatishelper;

/**
 *
 * @author almatarm
 */
public class Gen extends javax.swing.JFrame {

    /**
     * Creates new form Gen
     */
    public Gen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        in = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        out = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        generate = new javax.swing.JButton();
        javaType = new javax.swing.JTextField();
        sqlTable = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        methods = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        in.setColumns(20);
        in.setRows(5);
        in.setText("        <id     property=\"id\"             column=\"ID\" />\n        <result property=\"code\"           column=\"Code\" />\n        <result property=\"description\"    column=\"Descr\" />\n        <result property=\"symbol\"         column=\"Symbol\" />\n        <result property=\"provider\"       column=\"Provider\" />\n        <result property=\"fractionDigits\" column=\"FractDigt\" />");
        jScrollPane3.setViewportView(in);

        out.setColumns(20);
        out.setRows(5);
        jScrollPane4.setViewportView(out);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        generate.setText("Generate");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        javaType.setText("java");

        sqlTable.setText("table");

        methods.setColumns(20);
        methods.setRows(5);
        jScrollPane1.setViewportView(methods);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(javaType, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sqlTable, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(generate))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generate)
                    .addComponent(javaType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sqlTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

   
    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
//       DObject param = DObject.of(in.getText());
//       System.out.println(param);
    }//GEN-LAST:event_generateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generate;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextArea in;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField javaType;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea methods;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextArea out;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField sqlTable;
    // End of variables declaration//GEN-END:variables

}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/CodeGen.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-14,0,0,3,-52"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
  <SubComponents>
    <Component class="javax.swing.JSeparator" name="jSeparator1">
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="Center"/>
        </Constraint>
      </Constraints>
    </Component>
    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
          <BorderConstraints direction="First"/>
        </Constraint>
      </Constraints>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="jTextArea1">
          <Properties>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/Format.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.mybatishelper;

/**
 *
 * @author almatarm
 */
public class Format {
    public static String cell(String val, int length) {
        while(val.length() < length)
            val += " ";
        return val;
    }   
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/Method.java
package com.almatarm.mybatishelper;


/**
 *
 * @author almatarm
 */
public class Method {
    public enum SQLType {
        select,
        insert,
        update,
        delete,
        ;
    }
    
    String access;
    String returnType;
    String methodName;
    String inType;
    SQLType sqlType;
    
    public Method() {
    }

    public Method(String access, String returnType, String methodName, String inType) {
        this.access = access;
        this.returnType = returnType;
        this.methodName = methodName;
        this.inType = inType;
    }

    public String getAccess() {
        return access;
    }

    public void setAccess(String access) {
        this.access = access;
    }

    public String getReturnType() {
        return returnType;
    }

    public void setReturnType(String returnType) {
        this.returnType = returnType;
    }

    public String getMethodName() {
        return methodName;
    }

    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    public String getInType() {
        return inType;
    }

    public void setInType(String inType) {
        this.inType = inType;
    }

    public SQLType getSqlType() {
        return sqlType;
    }

    public void setSqlType(SQLType sqlType) {
        this.sqlType = sqlType;
    }

    @Override
    public String toString() {
        return "Method{" + "access=" + access + ", returnType=" + returnType + ", methodName=" + methodName + ", inType=" + inType + ", sqlType=" + sqlType + '}';
    }
    
    public static Method of(String str) {
        Method method = new Method();
        
        str = str.trim();
        
        int mark = 0;
        //Access
        String firstWord = str.substring(0, str.indexOf(" "));
        if(firstWord.equals("private") || firstWord.equals("public") 
                || firstWord.equals("package")) {
            method.setAccess(firstWord);
            mark = str.indexOf(firstWord) + firstWord.length();
        }
        
        //return value
        if(method.getAccess() == null) {
            method.setReturnType(firstWord);
            mark = str.indexOf(firstWord) + firstWord.length();
        } else {
            String returnType = str.substring(mark + 1, str.indexOf(" ", mark + 1));
            method.setReturnType(returnType);
            mark = str.indexOf(returnType) + returnType.length();
        }
        
        //method name
        String methodName = str.substring(mark + 1, str.indexOf("(", mark + 1));
        method.setMethodName(methodName);
        mark = str.indexOf(methodName) + methodName.length();
       
        //method name
        int lastIdx = str.indexOf(" ", mark + 1);
        if(lastIdx != -1) {
            String inType = str.substring(mark + 1, lastIdx);
            method.setInType(inType);
        }        
        
        if(str.contains("insert")) {
            method.setSqlType(SQLType.insert);
        } else if(str.contains("delete")) {
            method.setSqlType(SQLType.delete);
        } else if(str.contains("update")) {
            method.setSqlType(SQLType.update);
        } else {
            method.setSqlType(SQLType.select);
        }
        
        return method;
    }
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/Util.java
package com.almatarm.mybatishelper;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class Util {
    public static String toSmall(String clazz) {
        return clazz.length() > 1 ? clazz.substring(0, 1).toLowerCase() 
                    + clazz.substring(1): clazz.toLowerCase();
    }
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/DObject.java
package com.almatarm.mybatishelper;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

/**
 *
 * @author almatarm
 */
public class DObject {
    
    public static enum MetadataType {
        Unique,
        FindBy,
        Searchable,
        Alone,
        ;
    }
    
    String table;
    String type;
    String resultMap;
    String mapper;
    String dbo;
    String clazz;
    List<Field> fields;
    SingleField idField;
    //ResultMap -> DObject
    LinkedHashMap<String, DObject> children = new LinkedHashMap<>();
    
    public DObject() {
        this("TABLE_NAME", "JAVA_TYPE");
    }

    public DObject(String table, String type) {
        this.table = table;
        setType(type);
        fields = new ArrayList<>();
    }

    public DObject(String table, String type, String resultMap, List<Field> fields) {
        this.table = table;
        this.type = type;
        this.resultMap = resultMap;
        this.fields = fields;
    }
    
    public String getTable() {
        return table;
    }

    public void setTable(String table) {
        this.table = table;
    }

    public List<Field> getFields() {
        return fields;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
        if(dbo == null) {
            dbo = type;
        }
    }

    public String getDbo() {
        return dbo;
    }

    public void setDbo(String dbo) {
        this.dbo = dbo;
    }

    public String getClazz() {
        return clazz;
    }

    public void setClazz(String clazz) {
        this.clazz = clazz;
    }

    public SingleField getIdField() {
        return idField;
    }

    public void setIdField(SingleField idField) {
        this.idField = idField;
    }
    
    public String getAssociationJoins() {
        StringBuilder buff = new StringBuilder();
        for(AssociationField af : getAssociationFields()) {
            String join = String.format("%s %s %s %s%s%s %s %s%s%s%s%n", 
                    "        LEFT OUTER JOIN", af.getdObj().getTable(), "ON",
                    getTable(), ".", af.getColumn(), "=", 
                    af.getdObj().getTable(), ".", 
                    af.getdObj().getIdField().getColumn(), ";");
            buff.append(join);
            buff.append("        LEFT OUTER JOIN ").append(af.getdObj().getTable())
                    .append(" ON ").append(getTable()).append(".")
                    .append(af.getColumn()).append(" = ")
                    .append(af.getdObj().getTable()).append(".")
                    .append(af.getdObj().getIdField().getProperty()).append(";");
        }
        return buff.toString();
    }
    
    public String getSmartColumnsList() {
        return hasAssociationField()?getQualifedColumnsList():getColumnsList();
    }
    
    public String getColumnsList() {
        StringBuilder builder = new StringBuilder();
        
        fields.forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single)
                builder.append(((SingleField) field).getColumn()).append(", ");
        });
        
        children.values().forEach( (child) -> { 
            child.getFields().forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single)
                builder.append(((SingleField) field).getColumn()).append(", ");
            });
        });
        
        String rVal = builder.toString();
        return rVal.substring(0, rVal.length() - 2);
    }
    
    public String getQualifedColumnsList() {
        StringBuilder builder = new StringBuilder();
        
        fields.forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single)
                builder.append("            ").append(table).append(".")
                        .append(((SingleField) field).getColumn()).append(",\n");
        });
      
        children.values().forEach( (child) -> { 
            child.getFields().forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single)
                builder.append("            ").append(table).append(".")
                        .append(((SingleField) field).getColumn()).append(",\n");
            });
        });
        
        getAssociationFields().stream().forEach((AssociationField af) -> {
            builder.append(af.getQualifedColumnsList()).append(",\n");
        });
        
        String rVal = builder.toString();
        rVal =  rVal.substring("            ".length(), rVal.length() - 2);
        return rVal;
    }
    
    public String getColumnListInsert() {
        StringBuilder builder = new StringBuilder();
        
        fields.forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single 
                    && !field.getProperty().equals("id")) {
                if(builder.length() > 0) builder.append(", ");
                builder.append(((SingleField) field).getColumn());
            }
        });
        
        getAssociationFields().stream().forEach((AssociationField af) -> {
             builder.append(", ").append(af.getColumn());
        });
        
        children.values().forEach( (child) -> { 
            builder.append("\n            <if test=\"_parameter instanceof ").append(child.clazz).append("\">");
            child.getFields().forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single)
                builder.append(", ").append(((SingleField) field).getColumn());
            });
            builder.append("</if>");
        });
        
        return builder.toString();
        //String rVal = builder.toString();
//        if(children.values().isEmpty()) {
//            return rVal.substring(0, rVal.length() - 2);
//        } else {
//            return rVal.replaceAll(", </if>", "</if>");
//        }
    }
    
    public String getPropListInsert() {
        StringBuilder builder = new StringBuilder();
        
        fields.forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single 
                    && !field.getProperty().equals("id")) {
                if(builder.length() > 0) builder.append(", ");
                builder.append("#{").append(field.getProperty()).append("}");
            }
        });
        
        getAssociationFields().stream().forEach((AssociationField af) -> {
             builder.append(", #{").append(af.getProperty() + "." + af.getdObj().getIdField().getProperty()).append("}");
        });
        
        children.values().forEach( (child) -> { 
            builder.append("\n            <if test=\"_parameter instanceof ").append(child.clazz).append("\">");
            child.getFields().forEach( (field) -> {
            if(field.getFieldType() == FieldType.Single)
                builder.append(", #{").append(field.getProperty()).append("}");
            });
            builder.append("</if>");
        });
        
        return builder.toString();
//        String rVal = builder.toString();
//        if(children.values().isEmpty()) {
//            return rVal.substring(0, rVal.length() - 2);
//        } else {
//            return rVal;
//        }
    }
    
    public String getUpdateList() {
        StringBuilder builder = new StringBuilder();
        
        int max = getMaxFieldLength() + 2;
        
        for(Field field : fields) {
            if(field.getFieldType() == FieldType.Single) {
                String prop = field.getProperty();
                if(prop.equals("id")) continue;

                String col = ((SingleField) field).getColumn();
                builder.append("            ").append(Format.cell(col, max))
                        .append("= #{").append(prop).append("},\n");
            }
        }
        
        children.values().forEach( (child) -> { 
            builder.append("\n            <if test=\"_parameter instanceof ").append(child.clazz).append("\">\n");
            child.getFields().forEach( (field) -> {
                String prop = field.getProperty();
                String col = ((SingleField) field).getColumn();
                builder.append("            ").append(Format.cell(col, max))
                        .append("= #{").append(prop).append("},\n");
            });
            builder.replace(builder.length()-2, builder.length(), "");
            builder.append("\n            </if>");
        });
                
        String rVal = builder.toString();
        if(children.values().isEmpty()) {
            return rVal.substring(0, rVal.length() - 2);
        } else {
            return rVal.replace("\n\n", "\n");
        }
    }
    
    public int getMaxFieldLength() {
        int max = 0;
        for(Field field : fields) {  
            if(field.getProperty().length() > max) max = field.getProperty().length();
        }
        return max;
    }
    
    public String getResultMap() {
        return resultMap;
    }

    public void setResultMap(String resultMap) {
        this.resultMap = resultMap;
    }

    public String getMapper() {
        if(mapper == null) {
            return (type == null)? null : type + "Mapper";
        }
        return mapper;
    }
    
    public String getMapperL() {
        return getMapper().substring(0, 1).toLowerCase()
                + (getMapper().length() > 1? getMapper().substring(1):"");
    }

    public void setMapper(String mapper) {
        this.mapper = mapper;
    }
    
    public List<CollectionField> getCollectionFields() {
        ArrayList<CollectionField> cl = new ArrayList<>();
        fields.stream().filter((field) -> (field.getFieldType() == FieldType.Collection)).forEach((field) -> {
            cl.add((CollectionField) field);
        });
        return cl;
    }
    
    public CollectionField getCollectionField(String prop) {
        for(CollectionField cf : getCollectionFields()) {
            if(cf.getProperty().equals(prop)) {
                return cf;
            }
        }
        return null;
    }
    
    public List<AssociationField> getAssociationFields() {
        ArrayList<AssociationField> as = new ArrayList<>();
        fields.stream().filter((field) -> (field.getFieldType() == FieldType.Association)).forEach((field) -> {
            as.add((AssociationField) field);
        });
        return as;
    }
    
    public boolean hasAssociationField() {
        return !getAssociationFields().isEmpty();
    }
    public AssociationField getAssociationField(String prop) {
        for(AssociationField af : getAssociationFields()) {
            if(af.getProperty().equals(prop)) {
                return af;
            }
        }
        return null;
    }
    
    public List<SingleField> getSingleFields() {
        ArrayList<SingleField> sf = new ArrayList<>();
        fields.stream().filter((field) -> (field.getFieldType() == FieldType.Single)).forEach((field) -> {
            sf.add((SingleField) field);
        });
        return sf;
    }
    
    public List<SingleField> getSearchableFields() {
        ArrayList<SingleField> sf = new ArrayList<>();
        fields.stream().filter((field) -> (field.getFieldType() == FieldType.Single 
                && ((SingleField) field).isSearchable())).forEach((field) -> {
            sf.add((SingleField) field);
        });
        return sf;
    }
    
    public boolean hasSearchableFields() {
        return !getSearchableFields().isEmpty();
    }
    
    public List<SingleField> getFindByFields() {
        ArrayList<SingleField> sf = new ArrayList<>();
        fields.stream().filter((field) -> (field.getFieldType() == FieldType.Single
                && ((SingleField) field).isFindBy())).forEach((field) -> {
            sf.add((SingleField) field);
        });
        return sf;
    }
    
    public List<SingleField> getSelectAloneFields() {
        ArrayList<SingleField> sf = new ArrayList<>();
        fields.stream().filter((field) -> (field.getFieldType() == FieldType.Single
                && ((SingleField) field).isSelectAlone())).forEach((field) -> {
            sf.add((SingleField) field);
        });
        return sf;
    }
    
    public boolean hasFindByFields() {
        return !getFindByFields().isEmpty();
    }
    
     public SingleField getField(String prop) {
        ArrayList<SingleField> sf = new ArrayList<>();
        for(Field field : fields) {
            if(field.getFieldType() == FieldType.Single 
                    && prop.equals(((SingleField) field).getProperty())) {
                return (SingleField) field;
            }
        }
        return null;
    }
     
    public boolean is(SingleField field, MetadataType type ) {
        switch(type) {
            case Alone:
                return field.isSelectAlone();
            case FindBy:
                return field.isFindBy();
            case Searchable:
                return field.isSearchable();
            case Unique:
                return field.isUnique();
        }
        return false;
    }
    
    public String getColumn(String property) {
        List<SingleField> sfs = getSingleFields();
        for(SingleField sf : sfs) {
            if(sf.getProperty().equals(property))
                return sf.getColumn();
        }
        return null;
    }
    
    public static List<DObject> of(String str) {
        List<DObject> objs = new ArrayList<>();
        
        String[] lines = str.split("\n");
        
        int i, j;
        String ID   = "id=\"";
        String TYPE = "type=\"";
        String PROP = "property=\"";
        String OFTP = "ofType=\"";
        String COLM = "column=\"";
        String JVTP = "javaType=\"";
        String TBLE = "Table:";
        String FIND = "Find By:";
        String SRCH = "Searchable:";
        String ALON = "Select Alone:";
        String UNIQ = "Unique:";
        String MAPR = "Mapper:";
        String DBO  = "DBO:";
        String FKEY = "FK:";
        String JTYP = "Type:";
        String CASE = "<case";
        String RSMP = "resultMap=\"";
        String CLAZ = "Class:";
        
        DObject obj = null;
        CollectionField  collection  = null;
        AssociationField association = null;
        for(String line : lines) {
            line = line.trim();
            if(line.isEmpty()) continue;
            
            if(line.contains("<resultMap")) {
                i = line.indexOf(ID);
                j = line.indexOf("\"", i + ID.length());
                String id = line.substring(i + ID.length(), j).trim();
                
                i = line.indexOf(TYPE);
                j = line.indexOf("\"", i + TYPE.length());
                String type = line.substring(i + TYPE.length(), j).trim();
                
                obj = new DObject(id, type);
                obj.setResultMap(id);
            }
            
            if(line.startsWith(TBLE)) {
                String table = line.substring(TBLE.length()).trim();
                obj.setTable(table);
            }
            
            if(line.startsWith(CLAZ)) {
                String clazz = line.substring(CLAZ.length()).trim();
                obj.setClazz(clazz);
            }
            
            if(line.startsWith(DBO)) {
                String dbo = line.substring(DBO.length()).trim();
                obj.setDbo(dbo);
            }
            
            if(line.startsWith(MAPR)) {
                String mapper = line.substring(MAPR.length()).trim();
                obj.setMapper(mapper);
            }
            
            if(line.startsWith(FIND)) {
                String findByStr = line.substring(FIND.length()).trim();
                String[] findByList = findByStr.split(",");
                for(String findByCol: findByList) {
                    findByCol = findByCol.trim();
                    for(Field field : obj.fields) {
                        if(field.getFieldType() == FieldType.Single
                                && ((SingleField) field).getColumn().equals(findByCol)) {
                            ((SingleField) field).setFindBy(true);
                        }
                    }
                }
            }
            
            if(line.startsWith(SRCH)) {
                String searchableStr = line.substring(SRCH.length()).trim();
                String[] searchableList = searchableStr.split(",");
                for(String searchableCol: searchableList) {
                    searchableCol = searchableCol.trim();
                    for(Field field : obj.fields) {
                        if(field.getFieldType() == FieldType.Single
                                && ((SingleField) field).getColumn().equals(searchableCol)) {
                            ((SingleField) field).setSearchable(true);
                        }
                    }
                }
            }
            
            if(line.startsWith(ALON)) {
                String selAloneStr = line.substring(ALON.length()).trim();
                String[] selAloneList = selAloneStr.split(",");
                for(String selAloneCol: selAloneList) {
                    selAloneCol = selAloneCol.trim();
                    for(Field field : obj.fields) {
                        if(field.getFieldType() == FieldType.Single
                                && ((SingleField) field).getColumn().equals(selAloneCol)) {
                            ((SingleField) field).setSelectAlone(true);
                        }
                    }
                }
            }
            
            if(line.startsWith(UNIQ)) {
                String uniqueStr = line.substring(UNIQ.length()).trim();
                String[] uniqueList = uniqueStr.split(",");
                for(String uniqueCol: uniqueList) {
                    uniqueCol = uniqueCol.trim();
                    for(Field field : obj.fields) {
                        if(field.getFieldType() == FieldType.Single
                                && ((SingleField) field).getColumn().equals(uniqueCol)) {
                            ((SingleField) field).setUnique(true);
                        }
                    }
                }
            }
            
            if(line.startsWith(FKEY)) {
                String fKeyStr = line.substring(FKEY.length()).trim();
                String[] fKeyList = fKeyStr.split(",");
                CollectionField cf;
                if(fKeyList.length == 2 && 
                        ((cf = obj.getCollectionField(fKeyList[0].trim())) != null)) {
                    cf.setFKey(fKeyList[1].trim());
                }
            }
            
            if(line.startsWith(JTYP)) {
                String typesStr = line.substring(JTYP.length()).trim();
                String[] typesList = typesStr.split(";");
                for(String type : typesList) {
                    String[] split = type.split(" ");
                    String javaType = null;
                    List<String> vars = new ArrayList<>();
                    for(int k = 0; k < split.length; k++) {
                        if(split[k].trim().isEmpty())
                            continue;
                        if(javaType == null) {
                            javaType = split[k].trim();
                            continue;
                        }
                        vars.add(split[k].replace(",","").trim());
                    }
                    
                    for(String var : vars) { 
                        for(Field field : obj.fields) {
                            if(field.getProperty().equals(var)) {
                                field.setJavaType(javaType);
                            }
                        }
                    
                    }
                }
            }
            
            if(line.startsWith(CASE)) {
                i = line.indexOf(RSMP);
                j = line.indexOf("\"", i + RSMP.length());
                String resultMap = line.substring(i + RSMP.length(), j).trim();
                //Need to add DObject at the end once we are sure it ready.
                obj.children.put(resultMap, null);
            }
            
            if(line.contains(PROP) && line.contains(COLM) && !line.contains("<association")) {
                i = line.indexOf(PROP);
                j = line.indexOf("\"", i + PROP.length());
                String prop = line.substring(i + PROP.length(), j).trim();

                i = line.indexOf(COLM);
                j = line.indexOf("\"", i + COLM.length());
                String col = line.substring(i + COLM.length(), j).trim();

                if(association != null) {
                    association.addField(prop, col);
                } else if(collection != null) {
                    collection.addField(prop, col);
                } else {
                    SingleField field = new SingleField(prop, col); 
                    obj.fields.add( field );
                    if(line.trim().startsWith("<id"))
                        obj.idField = field;
                }
                
                
            }
            
            if(line.contains("</resultMap>")) {
                objs.add(obj);
            }
                    
            if(line.contains("<collection")) {
                collection = new CollectionField();
        
                i = line.indexOf(PROP);
                j = line.indexOf("\"", i + PROP.length());
                String prop = line.substring(i + PROP.length(), j).trim();
                collection.setProperty(prop);
                
                i = line.indexOf(OFTP);
                j = line.indexOf("\"", i + OFTP.length());
                String oftype = line.substring(i + OFTP.length(), j).trim();
                collection.setType(oftype);
                obj.fields.add(collection);
            }
            
            if(line.contains("</collection>")) {
                collection = null;
            }
            
                    
            if(line.contains("<association")) {
                association = new AssociationField();
        
                i = line.indexOf(PROP);
                j = line.indexOf("\"", i + PROP.length());
                String prop = line.substring(i + PROP.length(), j).trim();
                association.setProperty(prop);
                
                i = line.indexOf(COLM);
                j = line.indexOf("\"", i + COLM.length());
                String col = line.substring(i + COLM.length(), j).trim();
                association.setColumn(col);
                
                i = line.indexOf(JVTP);
                j = line.indexOf("\"", i + JVTP.length());
                String javaType = line.substring(i + JVTP.length(), j).trim();
                association.setJavaType(javaType);
                
                obj.fields.add(association);
            }
            
            if(line.contains("</association>")) {
                association = null;
            }
        }
        
        
        //Setting up Collections
        objs.stream().forEach((DObject dObj) -> {
            dObj.getAssociationFields().stream().forEach((field) -> {
                for (DObject dObj2 : objs) {
                    if(field.getJavaType().equals(dObj2.getType()))
                        field.setdObj(dObj2);
                }
                if(field.getdObj() == null) {
                    throw new RuntimeException("Association [" 
                            + field.getProperty() + "] in [" 
                            + dObj.getTable() + "] table requries Type ["
                            + field.getJavaType() + "]");
                }
            });
            
            dObj.getCollectionFields().stream().forEach((field) -> {
                for (DObject dObj2 : objs) {
                    if(field.getType().equals(dObj2.getType()))
                        field.setdObj(dObj2);
                }
                if(field.getdObj() == null) {
                    throw new RuntimeException("Collection [" 
                            + field.getProperty() + "] in " 
                            + dObj.getTable() + " requries Type ["
                            + field.getType() + "]");
                }
            });
            
            dObj.children.keySet().stream().forEach((resultMap) -> {
                for (DObject dObj2 : objs) {
                    if(resultMap.equals(dObj2.getResultMap()))
                        dObj.children.put(resultMap, dObj2);
                }
                if(dObj.children.get(resultMap) == null) {
                    throw new RuntimeException("case with ResultMap [" 
                            + resultMap + "] is null");
                }
            });
        });
        
        return objs;
    }

    @Override
    public String toString() {
        return "DObject{" + "table=" + table + ", type=" + type + ", resultMap=" + resultMap + ", mapper=" + mapper + ", fields=" + fields + '}';
    }

    private boolean hasCollections() {
        return !getCollectionFields().isEmpty();
    }
    
    // ture -> no need for findDBO(Dbo dbo)
    public boolean isSearchableUnique() {
        for( SingleField sField : getSearchableFields()) { 
            if(!is( sField, MetadataType.Unique))
                return false;
        }
        return true;
    }

}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/FieldType.java
package com.almatarm.mybatishelper;

/**
 *
 * @author almatarm
 */
public enum FieldType {
    Single,
    Collection,
    Association;
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/Gen.form
<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.3" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Menu class="javax.swing.JMenuBar" name="menuBar">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="fileMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="102"/>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="openMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="111"/>
                <Property name="text" type="java.lang.String" value="Open"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="115"/>
                <Property name="text" type="java.lang.String" value="Save"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="saveAsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="Save As ..."/>
                <Property name="displayedMnemonicIndex" type="int" value="5"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="exitMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="120"/>
                <Property name="text" type="java.lang.String" value="Exit"/>
              </Properties>
              <Events>
                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="exitMenuItemActionPerformed"/>
              </Events>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="editMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="101"/>
            <Property name="text" type="java.lang.String" value="Edit"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="cutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="116"/>
                <Property name="text" type="java.lang.String" value="Cut"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="copyMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="121"/>
                <Property name="text" type="java.lang.String" value="Copy"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="pasteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="112"/>
                <Property name="text" type="java.lang.String" value="Paste"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="deleteMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="100"/>
                <Property name="text" type="java.lang.String" value="Delete"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
        <Menu class="javax.swing.JMenu" name="helpMenu">
          <Properties>
            <Property name="mnemonic" type="int" value="104"/>
            <Property name="text" type="java.lang.String" value="Help"/>
          </Properties>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="contentsMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="99"/>
                <Property name="text" type="java.lang.String" value="Contents"/>
              </Properties>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="aboutMenuItem">
              <Properties>
                <Property name="mnemonic" type="int" value="97"/>
                <Property name="text" type="java.lang.String" value="About"/>
              </Properties>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="menuBar"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
  </AuxValues>

  <Layout>
    <DimensionLayout dim="0">
      <Group type="103" groupAlignment="0" attributes="0">
          <Group type="102" attributes="0">
              <Group type="103" groupAlignment="0" attributes="0">
                  <Group type="102" attributes="0">
                      <EmptySpace min="-2" pref="10" max="-2" attributes="0"/>
                      <Component id="jScrollPane3" max="32767" attributes="0"/>
                  </Group>
                  <Group type="102" alignment="0" attributes="0">
                      <EmptySpace max="-2" attributes="0"/>
                      <Component id="jScrollPane4" max="32767" attributes="0"/>
                  </Group>
                  <Group type="102" alignment="0" attributes="0">
                      <EmptySpace max="-2" attributes="0"/>
                      <Component id="javaType" min="-2" pref="170" max="-2" attributes="0"/>
                      <EmptySpace type="unrelated" max="-2" attributes="0"/>
                      <Component id="sqlTable" min="-2" pref="173" max="-2" attributes="0"/>
                      <EmptySpace pref="190" max="32767" attributes="0"/>
                      <Component id="jComboBox1" min="-2" pref="264" max="-2" attributes="0"/>
                      <EmptySpace type="separate" max="-2" attributes="0"/>
                      <Component id="generate" min="-2" max="-2" attributes="0"/>
                  </Group>
                  <Group type="102" alignment="0" attributes="0">
                      <EmptySpace max="-2" attributes="0"/>
                      <Component id="jScrollPane1" max="32767" attributes="0"/>
                  </Group>
              </Group>
              <EmptySpace max="-2" attributes="0"/>
          </Group>
      </Group>
    </DimensionLayout>
    <DimensionLayout dim="1">
      <Group type="103" groupAlignment="0" attributes="0">
          <Group type="102" alignment="0" attributes="0">
              <EmptySpace min="-2" pref="10" max="-2" attributes="0"/>
              <Component id="jScrollPane3" min="-2" pref="153" max="-2" attributes="0"/>
              <EmptySpace max="-2" attributes="0"/>
              <Component id="jScrollPane1" min="-2" pref="173" max="-2" attributes="0"/>
              <EmptySpace max="-2" attributes="0"/>
              <Component id="jScrollPane4" min="-2" pref="216" max="-2" attributes="0"/>
              <EmptySpace type="separate" max="-2" attributes="0"/>
              <Group type="103" groupAlignment="3" attributes="0">
                  <Component id="jComboBox1" alignment="3" min="-2" max="-2" attributes="0"/>
                  <Component id="generate" alignment="3" min="-2" max="-2" attributes="0"/>
                  <Component id="javaType" alignment="3" min="-2" max="-2" attributes="0"/>
                  <Component id="sqlTable" alignment="3" min="-2" max="-2" attributes="0"/>
              </Group>
              <EmptySpace max="32767" attributes="0"/>
          </Group>
      </Group>
    </DimensionLayout>
  </Layout>
  <SubComponents>
    <Container class="javax.swing.JScrollPane" name="jScrollPane3">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="in">
          <Properties>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
            <Property name="text" type="java.lang.String" value="        &lt;id     property=&quot;id&quot;             column=&quot;ID&quot; /&gt;&#xa;        &lt;result property=&quot;code&quot;           column=&quot;Code&quot; /&gt;&#xa;        &lt;result property=&quot;description&quot;    column=&quot;Descr&quot; /&gt;&#xa;        &lt;result property=&quot;symbol&quot;         column=&quot;Symbol&quot; /&gt;&#xa;        &lt;result property=&quot;provider&quot;       column=&quot;Provider&quot; /&gt;&#xa;        &lt;result property=&quot;fractionDigits&quot; column=&quot;FractDigt&quot; /&gt;"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Container class="javax.swing.JScrollPane" name="jScrollPane4">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="out">
          <Properties>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
    <Component class="javax.swing.JComboBox" name="jComboBox1">
      <Properties>
        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
          <StringArray count="4">
            <StringItem index="0" value="Item 1"/>
            <StringItem index="1" value="Item 2"/>
            <StringItem index="2" value="Item 3"/>
            <StringItem index="3" value="Item 4"/>
          </StringArray>
        </Property>
      </Properties>
      <AuxValues>
        <AuxValue name="JavaCodeGenerator_TypeParameters" type="java.lang.String" value="&lt;String&gt;"/>
      </AuxValues>
    </Component>
    <Component class="javax.swing.JButton" name="generate">
      <Properties>
        <Property name="text" type="java.lang.String" value="Generate"/>
      </Properties>
      <Events>
        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="generateActionPerformed"/>
      </Events>
    </Component>
    <Component class="javax.swing.JTextField" name="javaType">
      <Properties>
        <Property name="text" type="java.lang.String" value="java"/>
      </Properties>
    </Component>
    <Component class="javax.swing.JTextField" name="sqlTable">
      <Properties>
        <Property name="text" type="java.lang.String" value="table"/>
      </Properties>
    </Component>
    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
      <AuxValues>
        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
      </AuxValues>

      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
      <SubComponents>
        <Component class="javax.swing.JTextArea" name="methods">
          <Properties>
            <Property name="columns" type="int" value="20"/>
            <Property name="rows" type="int" value="5"/>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/CodeGen.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.mybatishelper;

/**
 *
 * @author almatarm
 */
public class CodeGen extends javax.swing.JFrame {

    /**
     * Creates new form CodeGen
     */
    public CodeGen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().add(jSeparator1, java.awt.BorderLayout.CENTER);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodeGen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/GenOutput.java
package com.almatarm.mybatishelper;

import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.Velocity;
import org.apache.velocity.exception.MethodInvocationException;
import org.apache.velocity.exception.ParseErrorException;
import org.apache.velocity.exception.ResourceNotFoundException;
import org.jvnet.inflector.Noun;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class GenOutput {
    HashMap<String, DObject> objects;// = new HashMap<>();
    List<Method> methods;// = new ArrayList<>();
    boolean useSpring = false;
    
    public GenOutput(HashMap<String, DObject> objects, List<Method> methods) {
        this.objects = objects;
        this.methods = methods;
    }
    
    public GenOutput(HashMap<String, DObject> objects) {
        this.objects = objects;
    }

    public boolean isUseSpring() {
        return useSpring;
    }

    public void setUseSpring(boolean useSpring) {
        this.useSpring = useSpring;
    }
    
    public String generate() {
        StringBuilder buff = new StringBuilder();
        
        methods.forEach( (method) -> { 
//            switch (method)
            System.out.println("M" + method);
        });
                
        return buff.toString();
    }
    
    public void genService(DObject dObj) {
        genService(dObj, "Service");
        System.out.println("**************************************************");
        if(!useSpring) 
            genService(dObj, "mybatis-service");
    }
    
    public void genService(DObject dObj, String template) {
        try {
            String Dbo  = dObj.getDbo();
            String Dbos = Noun.pluralOf(Dbo);
            String dbo  = Dbo.length() > 1 ? Dbo.substring(0, 1).toLowerCase() 
                    + Dbo.substring(1): Dbo.toLowerCase();
            
            Reader reader = new InputStreamReader(GenOutput.class.getClassLoader()
                    .getResourceAsStream(template));
            VelocityContext context = new VelocityContext();
//            context.put("disp",  new DisplayTool());
            context.put("Noun", Noun.class);
            context.put("Util", Util.class);
            context.put("dObj", dObj);
            context.put("Dbo",  Dbo);
            context.put("Dbos", Dbos);
            context.put("dbo",  dbo);
            
            context.put("Table", dObj.getTable());
            context.put("Type", dObj.getType());
            context.put("ResultMap", dObj.getResultMap());
            context.put("ColumnsList", dObj.getColumnsList());
            context.put("ColumnsListNoID", dObj.getColumnsList().replace("ID, ", ""));
            
            context.put("PropListInsert", dObj.getPropListInsert());
            context.put("PropListInsertNoID", dObj.getPropListInsert().replace("#{id}, ", ""));
            
            context.put("UpdateList", dObj.getUpdateList());
            
            context.put("new_line", "\n");
            
            context.put("use_spring", useSpring);
            StringWriter writer = new StringWriter();
            Velocity.evaluate(context, writer, "", reader);
            
            System.out.println(writer.toString().replaceAll("\n\\s*\n+", "\n\n"));
        } catch (ParseErrorException | MethodInvocationException | ResourceNotFoundException ex) {
            Logger.getLogger(GenOutput.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public static void main(String args[]) {
        HashMap<String, DObject> objects = new HashMap<>();
        List<Method> methods = new ArrayList<>();
        
        String tagsStr = "\n" +
"    <resultMap  id=\"tagGroupResultMap\"   type=\"TagGroup\">\n" +
"        <id         property=\"id\"       column=\"ID\" />\n" +
"        <result     property=\"name\"     column=\"Name\" />       \n" +
"        <collection property=\"tags\"     ofType=\"Tag\" > \n" +
"            <id     property=\"id\"       column=\"Tag_ID\" />      \n" +
"            <result property=\"name\"     column=\"Tag_Name\" />   \n" +
"        </collection>\n" +
"        <!-- \n" +
"            Table: TagGroup\n" +
"            Mapper: TagMapper\n" +
"            Unique: ID, Name\n" +
"            Find By: ID, Name\n" +
"            Searchable: Name\n" +
"            Select Alone: Name\n" +
"            FK: tags, TagGroup_ID\n" +
"            Type: Long id; String name; Tag tags; \n" +           
"        -->\n" +
"    </resultMap>\n" +
"    \n" +
"    <resultMap  id=\"tagResultMap\"   type=\"Tag\">\n" +
"        <id     property=\"id\"       column=\"ID\" />\n" +
"        <result property=\"name\"     column=\"Name\" />           \n" +
"        <!-- \n" +
"            Table: Tag \n" +
"            Unique: ID\n" +
"            Find By: ID, Name\n" +
"            Searchable: Name\n" +
"            Type: Long ID; String Name; \n" +           
"        -->   \n" +
"    </resultMap>\n" + 
"    <resultMap  id=\"payeeResultMap\"   type=\"Payee\">\n" +
"        <id     property=\"id\"         column=\"ID\" />\n" +
"        <result property=\"name\"       column=\"Name\" />\n" +
"        <result property=\"address\"    column=\"Address\" />\n" +
"        <!-- \n" +
"            Table: Payee\n" +
"            Mapper: PayeeMapper\n" +
"            Unique: ID, Name\n" +
"            Find By: ID, Name\n" +
"            Searchable: Name, Address\n" +
"            Select Alone: Name\n" +
"            Type: Long id; String name, address; \n" +
"        -->\n" +
"    </resultMap>\n" +
"    <resultMap  id=\"currencyUnitResultMap\"   type=\"CurrencyUnitDO\">\n" +
"        <id     property=\"id\"             column=\"ID\" />\n" +
"        <result property=\"code\"           column=\"Code\" />\n" +
"        <result property=\"description\"    column=\"Descr\" />\n" +
"        <result property=\"symbol\"         column=\"Symbol\" />\n" +
"        <result property=\"provider\"       column=\"Provider\" />\n" +
"        <result property=\"fractionDigits\" column=\"FractDigt\" />\n" +
"        <!-- \n" +
"            Table: Currency\n" +
"            DBO: CurrencyUnit\n" +
"            Mapper: currencyMapper\n" +
"            Unique: ID, Code\n" +
"            Find By: ID, Name, Descr, Symbol, Provider\n" +
"            Searchable: Code, Descr, Symbol, Provider\n" +
"            Select Alone: Code, Provider\n" +
"            Type: Long id; \n" +
"        -->\n" +
"    </resultMap>\n" +
"    <resultMap  id=\"transactionResultMap\"   type=\"Transaction\">\n" +
"        <id         property=\"id\"                 column=\"ID\" />\n" +
"        <result     property=\"date\"               column=\"Date\" />       \n" +
"        <result     property=\"effectiveDate\"      column=\"EffectiveDate\" />       \n" +
"        <result     property=\"amount\"             column=\"Amount\" />       \n" +
"        <result     property=\"number\"             column=\"Number\" />       \n" +  
"        <result     property=\"memo\"               column=\"Memo\" />       \n" +                  
"        <result     property=\"status\"             column=\"Status\" />       \n" +
"        <result     property=\"payeeID\"            column=\"Payee_ID\" />\n" +
"        <result     property=\"accountID\"          column=\"Account_ID\" /> \n" +
"        <result     property=\"transactionGroupID\" column=\"TGroup_ID\" /> \n" +
"        <result     property=\"type\"               column=\"Type\" />       \n" + 
"        <collection property=\"tags\"     ofType=\"Tag\" > \n" +
"            <id     property=\"id\"       column=\"Tag_ID\" />      \n" +
"            <result property=\"name\"     column=\"Tag_Name\" />   \n" +
"        </collection>\n" +
"        \n" +
"        <!-- \n" +
"            Table: Transactions\n" +
"            Mapper: TransactionMapper\n" +
"            Unique: ID\n" +
"            Find By: ID, Date, EffectiveDate, Number, Memo, Status\n" +
"            Searchable: Name, Date, EffectiveDate, Number, Memo, Status\n" +
"            !Select Alone: \n" +
"            !FK: tags, TagGroup_ID\n" +
"            Type: Long id, payeeID, accountID, transactionGropuID;\n" +
"            Type: TransactionStatus status;\n" +
"            Type: Calendar date, effectiveDate;\n" +
"            Type: TransactionType type;\n" +
"            Type: String number, memo;\n" +
"        -->\n" +
"    </resultMap>\n" + 
"    <resultMap  id=\"accountResultMap\"    type=\"Account\">\n" +
"        <id     property=\"id\"            column=\"ID\" />\n" +
"        <result property=\"name\"          column=\"Name\" />\n" +
"        <result property=\"description\"   column=\"Descr\" />\n" +
"        <result property=\"notes\"         column=\"Notes\" />\n" +
"        <result property=\"type\"          column=\"Type\" />\n" +
"        <result property=\"parentID\"      column=\"Parent_ID\" />\n" +
"        <result property=\"hidden\"        column=\"Hidden\" />\n" +
"        <result property=\"qualifiedName\" column=\"QName\" />\n" +
"        <association property=\"currency\"     column=\"Currency_ID\" javaType=\"CurrencyUnitDO\">\n" +
"            <id     property=\"id\"             column=\"CU_ID\" />\n" +
"            <result property=\"code\"           column=\"CU_Code\" />\n" +
"            <result property=\"description\"    column=\"CU_Descr\" />\n" +
"            <result property=\"symbol\"         column=\"CU_Symbol\" />\n" +
"            <result property=\"provider\"       column=\"CU_Provider\" />\n" +
"            <result property=\"fractionDigits\" column=\"CU_FractDigt\" />\n" +
"        </association>\n" +
"        <discriminator column=\"Type\" javaType=\"AccountType\">\n" +
"            <case value=\"CREDIT\" resultMap=\"creditResultMap\" />\n" +
"            <case value=\"LOAN\"   resultMap=\"loanResultMap\" />            \n" +
"        </discriminator>\n" +
"        <!-- \n" +
"            Table: Account\n" +
"            Mapper: AccountMapper\n" +
"            Unique: ID, QName\n" +
"            Find By: ID, QName, Name, Parent_ID\n" +
"            Searchable: Name, Descr, Notes, Type, QName\n" +
"            !Select Alone: \n" +
"            !FK: currency, TagGroup_ID\n" +
"            Type: Long id, parentID; String name, qualifiedName, description, notes;\n" +
"            Type: String name, qualifiedName, description, notes;\n" +
"            Type: boolean hidden;\n" +
"        -->\n" +
"    </resultMap>\n" +
"\n" +
"    <resultMap  id=\"creditResultMap\" type=\"CreditAccount\" extends=\"accountResultMap\">\n" +
"        <result property=\"limit\"            column=\"CreditLimit\" />\n" +
"        <result property=\"statementDay\"     column=\"StatDay\" />\n" +
"        <!-- \n" +
"            Type: BigDecimal limit; int statementDay;\n" +
"            Class: com.almatarm.money.domain.CreditAccount\n" +
"        -->\n" +
"    </resultMap>\n" +
"    \n" +
"    <resultMap  id=\"loanResultMap\" type=\"Loan\" extends=\"accountResultMap\">\n" +
"        <result property=\"presentValue\"     column=\"PresentValue\" />\n" +
"        <result property=\"interestRate\"     column=\"InterestRate\" />\n" +
"        <!-- \n" +
"            Type: BigDecimal presentValue, interestRate;\n" +
"            Class: com.almatarm.money.domain.Loan\n" +
"        -->\n" +
"    </resultMap>\n" +
"    <resultMap type=\"User\" id=\"UserResult\">\n" +
"      <id property=\"userId\" column=\"user_id\"/>\n" +
"      <result property=\"emailId\" column=\"email_id\"/>\n" +
"      <result property=\"password\" column=\"password\"/>\n" +
"      <result property=\"firstName\" column=\"first_name\"/>\n" +
"      <result property=\"lastName\" column=\"last_name\"/>   \n" +
"   </resultMap>";
        /*
        String payeeMethods = "" +
"    public List<Payee> getPayees();\n" +
"\n" +
"    public Payee findPayeeByID(Long id);\n" +
"\n" +
"    public Payee findPayeeByName(String name);\n" +
"\n" +
"    public List<Payee> findPayeeByNameRegEx(String name);\n" +
"\n" +
"    public void insertPayee(Payee payee);\n" +
"\n" +
"    public void updatePayee(Payee payee);\n" +
"\n" +                
"    public void deletePayee(Long id);" +                
"";
        
        System.out.println(payeeStr);
        System.out.println("------------------------------------------------------------------------");
        System.out.println(payeeMethods);
        System.out.println("------------------------------------------------------------------------");
        */
        
        System.out.println(tagsStr);
        System.out.println("------------------------------------------------------------------------");

        List<DObject> objs = DObject.of(tagsStr);
        objs.stream().forEach( (obj) -> { 
            System.out.println(obj);
        });
        
//        String[] lines = payeeMethods.split("\n");
//        for(String line : lines) {
//            if(!line.trim().isEmpty()) {
//                methods.add(Method.of(line));
//            }
//        }
//        methods.forEach( (m) -> {
//            System.out.println(m);
//        });
//      
        System.out.println("------------------------------------------------------------------------");

        GenOutput go = new GenOutput(objects);
//        System.out.println(go.generate());

//        System.out.println("------------------------------------------------------------------------");
//
        

        go.genService(objs.get(0));
        
        go.genService(objs.get(1));
        
        go.genService(objs.get(3));
        
        
        go.genService(objs.get(5));
//
//        System.out.println("------------------------------------------------------------------------");
//
//        System.out.println(objs.get(0).getColumnsList());
    }
    
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/AssociationField.java
package com.almatarm.mybatishelper;

import java.util.LinkedHashMap;

/**
 *
 * @author almatarm
 */
public class AssociationField extends Field {
    String column;
    DObject dObj;
    String fKey;
    LinkedHashMap<String, String> fields = new LinkedHashMap<>();

    public AssociationField() {
        super("Property");
        fieldType = FieldType.Association;
    }

    public AssociationField(String property, String column, String javaType) {
        super(property);
        this.column = column;
        this.javaType = javaType;
    }

    public String getColumn() {
        return column;
    }

    public void setColumn(String column) {
        this.column = column;
    }
    
    public LinkedHashMap<String, String> getFields() {
        return fields;
    }

    public void setFields(LinkedHashMap<String, String> fields) {
        this.fields = fields;
    }
    
    public void addField(String property, String column) {
        fields.put(property, column);
    }
    
    public String getField(String property) {
        return fields.get(property);
    }

    public DObject getdObj() {
        return dObj;
    }

    public void setdObj(DObject dObj) {
        this.dObj = dObj;
    }

    public String getQualifedColumnsList() {
        StringBuilder builder = new StringBuilder();
        
        int max = (int) (getMaxFieldLength() * 1.5);
        fields.keySet().forEach( (prop) -> {
            builder.append("            ").append(dObj.getTable()).append(".")
                    .append(Format.cell(dObj.getColumn(prop), max))    
                    .append(" AS ").append(fields.get(prop)).append(",\n");
        });
        
        String rVal = builder.toString();
        return rVal.substring(0, rVal.length() - 2);
    }
    
    public int getMaxFieldLength() {
        int max = 0;
        for(String prop : fields.keySet()) {  
            if(prop.length() > max) max = prop.length();
        }
        return max;
    }

    @Override
    public String toString() {
        return "AssociationField{" + "column=" + column + ", dObj=" + dObj + ", fKey=" + fKey + ", fields=" + fields + '}';
    }
    
    void setFKey(String fKey) {
        this.fKey = fKey;
    }

    public String getfKey() {
        return fKey;
    }
    
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/Field.java
package com.almatarm.mybatishelper;


/**
 *
 * @author almatarm
 */
public class Field {
    
    String property;
    FieldType fieldType;
    String javaType = "String";

    public Field(String property) {
        this.property = property;
    }

    public String getProperty() {
        return property;
    }

    public void setProperty(String property) {
        this.property = property;
    }

    public FieldType getFieldType() {
        return fieldType;
    }

    public String getJavaType() {
        return javaType;
    }

    public void setJavaType(String javaType) {
        this.javaType = javaType;
    }
    
    public String getPropertyU() {
        if(property.equals("id")) return "ID";
        return property.substring(0, 1).toUpperCase() 
                + (property.length() > 1? property.substring(1):"");
    }

}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/CollectionField.java
package com.almatarm.mybatishelper;

import java.util.LinkedHashMap;

/**
 *
 * @author almatarm
 */
public class CollectionField extends Field {
    String type;
    DObject dObj;
    String fKey;
    LinkedHashMap<String, String> fields = new LinkedHashMap<>();

    public CollectionField() {
        super("Property");
        fieldType = FieldType.Collection;
    }
    
    public CollectionField(String property, String type) {
        super(property);
        this.type = type;
        fieldType = FieldType.Collection;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public LinkedHashMap<String, String> getFields() {
        return fields;
    }

    public void setFields(LinkedHashMap<String, String> fields) {
        this.fields = fields;
    }
    
    public void addField(String property, String column) {
        fields.put(property, column);
    }
    
    public String getField(String property) {
        return fields.get(property);
    }

    public DObject getdObj() {
        return dObj;
    }

    public void setdObj(DObject dObj) {
        this.dObj = dObj;
    }

    public String getQualifedColumnsList() {
        StringBuilder builder = new StringBuilder();
        
        int max = dObj.getMaxFieldLength()  * 3;
        fields.keySet().forEach( (prop) -> {
            builder.append("            ").append(dObj.getTable()).append(".")
                    .append(Format.cell(dObj.getColumn(prop), max))    
                    .append(" AS ").append(fields.get(prop)).append(",\n");
        });
        
        String rVal = builder.toString();
        return rVal.substring(0, rVal.length() - 2);
    }
    
    @Override
    public String toString() {
        return "CollectionField{" + "property=" + property + ", type=" + type + ", fields=" + fields + '}';
    }

    void setFKey(String fKey) {
        this.fKey = fKey;
    }

    public String getfKey() {
        return fKey;
    }
    
}


*** end *** end ***
***$$$@@@ /mybatishelper/src/main/java/com/almatarm/mybatishelper/SingleField.java
package com.almatarm.mybatishelper;

/**
 *
 * @author <a href="mailto:almatarm@gmail.com">Mufeed H. AlMatar</a>
 * @version 1.0
 */
public class SingleField extends Field {
    
    String column;
    boolean findBy;
    boolean searchable;
    boolean selectAlone;
    boolean unique;

    public SingleField(String property, String column) {
        super(property);
        this.column = column;
        fieldType = FieldType.Single;
    }
    public String getColumn() {
        return column;
    }

    public void setColumn(String column) {
        this.column = column;
    }

    public boolean isFindBy() {
        return findBy;
    }

    public void setFindBy(boolean findBy) {
        this.findBy = findBy;
    }

    public boolean isSearchable() {
        return searchable;
    }

    public void setSearchable(boolean searchable) {
        this.searchable = searchable;
    }

    public boolean isSelectAlone() {
        return selectAlone;
    }

    public boolean isUnique() {
        return unique;
    }

    public void setUnique(boolean unique) {
        this.unique = unique;
    }

    public void setSelectAlone(boolean selectAlone) {
        this.selectAlone = selectAlone;
    }

    @Override
    public String toString() {
        return "SingleField{" + "column=" + column + ", findBy=" + findBy + ", searchable=" + searchable + ", selectAlone=" + selectAlone + ", unique=" + unique + '}';
    }

}


*** end *** end ***
***$$$@@@ /src/dirtotxt/DirToTxt.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dirtotxt;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author almatarm
 */
public class DirToTxt {

    FileFilter filter = new FileFilter() {
        @Override
        public boolean accept(File pathname) {
            if( pathname.getName().contains(".idea")) {
                return false;
            }
            if(
                    pathname.getAbsolutePath().contains("/src/main/resources") ||
                    pathname.getName().endsWith("java") ||
                    pathname.getName().endsWith("form") ||
                    pathname.getName().endsWith("xml") ||
                    pathname.getName().endsWith("properties") ||
                    pathname.getName().endsWith("mf") ||
                    pathname.isDirectory()) {
                return true;
            } 
            return false;
        }
    };
    
    public void toTxt(File out, File root) {
        try {
            StringBuilder buff = new StringBuilder();
            process(root, buff, root);
            Files.write(out.toPath(), buff.toString().getBytes());
        } catch (IOException ex) {
            Logger.getLogger(DirToTxt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void process(File file, StringBuilder buff, File root) {
        if(file.isDirectory()) {
            for(File f : file.listFiles(filter)) {
                process(f, buff, root);
            }
        } else {
            appendTxt(file, buff, root);
        }
    }
    
    String prefix = "***$$$@@@ ";
    String postfix = "*** end *** end ***";
    
    private void appendTxt(File file, StringBuilder buff, File root) {
        try {
            String filePath = file.getAbsolutePath().replace(root.getAbsolutePath(), "");
            buff.append(prefix).append(filePath).append("\n");
            String content = new String(Files.readAllBytes(file.toPath()));
            buff.append(content).append("\n").append(postfix).append("\n");
        } catch (IOException ex) {
            Logger.getLogger(DirToTxt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void toDir(File file, File root) {
        try {
            List<String> lines = Files.readAllLines(file.toPath());
            StringBuilder buff = new StringBuilder();
            File out  = null;
            boolean readingLines = false;
            for(String line : lines) {
                if (line.startsWith(prefix)) {
                    out = new File(root, line.replace(prefix, ""));
                } else if (line.startsWith(postfix)) {
                    createParentDir(out);
                    Files.write(out.toPath(), buff.toString().getBytes());
                    buff = new StringBuilder();
                } else {
                    buff.append(line).append("\n");
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(DirToTxt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void createParentDir(File file) {
        File parent = file.getParentFile();
        if (!parent.exists() && !parent.mkdirs()) {
                throw new IllegalStateException("Couldn't create dir: " + parent);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
//        new DirToTxt().toTxt(
//                new File("mybatishelper.txt"), 
//                new File("/Users/almatarm/Dropbox/projects/code/java//util/mybatishelper/"));
//        
//        new DirToTxt().toDir(
//                new File("mybatishelper.txt"), 
//                new File("mybatishelper"));


        new DirToTxt().toTxt(
                new File("dirtotxt.txt"), 
                new File("/Users/almatarm/NetBeansProjects/DirToTxt"));
        
        new DirToTxt().toDir(
                new File("dirtotxt.txt"), 
                new File("DirToTxt"));
        
    }
    
}

*** end *** end ***
